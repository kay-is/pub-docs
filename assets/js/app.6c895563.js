(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(e){function t(t){for(var a,o,s=t[0],l=t[1],d=t[2],u=0,p=[];u<s.length;u++)o=s[u],Object.prototype.hasOwnProperty.call(r,o)&&r[o]&&p.push(r[o][0]),r[o]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a]);for(c&&c(t);p.length;)p.shift()();return i.push.apply(i,d||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],a=!0,s=1;s<n.length;s++){var l=n[s];0!==r[l]&&(a=!1)}a&&(i.splice(t--,1),e=o(o.s=n[0]))}return e}var a={},r={1:0},i=[];function o(t){if(a[t])return a[t].exports;var n=a[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.e=function(e){var t=[],n=r[e];if(0!==n)if(n)t.push(n[2]);else{var a=new Promise((function(t,a){n=r[e]=[t,a]}));t.push(n[2]=a);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(e){return o.p+"assets/js/"+({}[e]||e)+"."+{2:"a2796282",3:"dceb9420",4:"380a8acb",5:"ce7bcffd",6:"88e53e4d",7:"654c532f",8:"efd149fe",9:"c10323af",10:"4f76ad23",11:"273c0017",12:"64f87dc2",13:"8ec8ae9d",14:"a9669fbc",15:"aeed3465",16:"d38b52bc",17:"c2356ca0",18:"316dfeab",19:"a66ada0d",20:"52e5843b",21:"0b8a84f4",22:"c14d1e2a",23:"1b13c35e",24:"1bf54df5",25:"c037c664",26:"ffa83cb7",27:"f4b16956",28:"6cb27a6f",29:"6432e4cc",30:"06ab7fce",31:"c62d350d",32:"00467e0b",33:"cf63c8d8",34:"317b309f",35:"545d22f7",36:"2690cee2",37:"77ab9219",38:"280c683a",39:"99eb1c7e",40:"7664d8e6",41:"c9cf1cc3",42:"2210a95a",43:"c75c4e5d",44:"dffe1a60",45:"3d0fcc93",46:"10b5df93"}[e]+".js"}(e);var l=new Error;i=function(t){s.onerror=s.onload=null,clearTimeout(d);var n=r[e];if(0!==n){if(n){var a=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;l.message="Loading chunk "+e+" failed.\n("+a+": "+i+")",l.name="ChunkLoadError",l.type=a,l.request=i,n[1](l)}r[e]=void 0}};var d=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(t)},o.m=e,o.c=a,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)o.d(n,a,function(t){return e[t]}.bind(null,a));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="/",o.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=t,s=s.slice();for(var d=0;d<s.length;d++)t(s[d]);var c=l;i.push([101,0]),n()}([function(e,t,n){var a=n(52),r=a.all;e.exports=a.IS_HTMLDDA?function(e){return"function"==typeof e||e===r}:function(e){return"function"==typeof e}},function(e,t,n){var a=n(25),r=Function.prototype,i=r.call,o=a&&r.bind.bind(i,i);e.exports=a?o:function(e){return function(){return i.apply(e,arguments)}}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(e,t,n){var a=n(2);e.exports=!a((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var a=n(66),r="object"==typeof self&&self&&self.Object===Object&&self,i=a||r||Function("return this")();e.exports=i},function(e,t,n){var a=n(1),r=n(30),i=a({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return i(r(e),t)}},function(e,t,n){var a=n(0),r=n(52),i=r.all;e.exports=r.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:a(e)||e===i}:function(e){return"object"==typeof e?null!==e:a(e)}},function(e,t,n){var a=n(162),r=n(165);e.exports=function(e,t){var n=r(e,t);return a(n)?n:void 0}},function(e,t,n){"use strict";function a(e,t,n,a,r,i,o,s){var l,d="function"==typeof e?e.options:e;if(t&&(d.render=t,d.staticRenderFns=n,d._compiled=!0),a&&(d.functional=!0),i&&(d._scopeId="data-v-"+i),o?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(o)},d._ssrRegister=l):r&&(l=s?function(){r.call(this,(d.functional?this.parent:this).$root.$options.shadowRoot)}:r),l)if(d.functional){d._injectStyles=l;var c=d.render;d.render=function(e,t){return l.call(t),c(e,t)}}else{var u=d.beforeCreate;d.beforeCreate=u?[].concat(u,l):[l]}return{exports:e,options:d}}n.d(t,"a",(function(){return a}))},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var a=n(14),r=n(147),i=n(148),o=a?a.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":o&&o in Object(e)?r(e):i(e)}},function(e,t,n){var a=n(4),r=n(15),i=n(33);e.exports=a?function(e,t,n){return r.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var a=n(6).Symbol;e.exports=a},function(e,t,n){var a=n(4),r=n(61),i=n(94),o=n(23),s=n(51),l=TypeError,d=Object.defineProperty,c=Object.getOwnPropertyDescriptor;t.f=a?i?function(e,t,n){if(o(e),t=s(t),o(n),"function"==typeof e&&"prototype"===t&&"value"in n&&"writable"in n&&!n.writable){var a=c(e,t);a&&a.writable&&(e[t]=n.value,n={configurable:"configurable"in n?n.configurable:a.configurable,enumerable:"enumerable"in n?n.enumerable:a.enumerable,writable:!1})}return d(e,t,n)}:d:function(e,t,n){if(o(e),t=s(t),o(n),r)try{return d(e,t,n)}catch(e){}if("get"in n||"set"in n)throw l("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var a=n(1),r=a({}.toString),i=a("".slice);e.exports=function(e){return i(r(e),8,-1)}},function(e,t,n){var a=n(152),r=n(153),i=n(154),o=n(155),s=n(156);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,e.exports=l},function(e,t,n){var a=n(68);e.exports=function(e,t){for(var n=e.length;n--;)if(a(e[n][0],t))return n;return-1}},function(e,t,n){var a=n(9)(Object,"create");e.exports=a},function(e,t,n){var a=n(174);e.exports=function(e,t){var n=e.__data__;return a(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var a=n(43);e.exports=function(e){if("string"==typeof e||a(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(e,t,n){var a,r;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(r="function"==typeof(a=function(){var e,t,n={version:"0.2.0"},a=n.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function r(e,t,n){return e<t?t:e>n?n:e}function i(e){return 100*(-1+e)}n.configure=function(e){var t,n;for(t in e)void 0!==(n=e[t])&&e.hasOwnProperty(t)&&(a[t]=n);return this},n.status=null,n.set=function(e){var t=n.isStarted();e=r(e,a.minimum,1),n.status=1===e?null:e;var l=n.render(!t),d=l.querySelector(a.barSelector),c=a.speed,u=a.easing;return l.offsetWidth,o((function(t){""===a.positionUsing&&(a.positionUsing=n.getPositioningCSS()),s(d,function(e,t,n){var r;return(r="translate3d"===a.positionUsing?{transform:"translate3d("+i(e)+"%,0,0)"}:"translate"===a.positionUsing?{transform:"translate("+i(e)+"%,0)"}:{"margin-left":i(e)+"%"}).transition="all "+t+"ms "+n,r}(e,c,u)),1===e?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+c+"ms linear",opacity:0}),setTimeout((function(){n.remove(),t()}),c)}),c)):setTimeout(t,c)})),this},n.isStarted=function(){return"number"==typeof n.status},n.start=function(){n.status||n.set(0);var e=function(){setTimeout((function(){n.status&&(n.trickle(),e())}),a.trickleSpeed)};return a.trickle&&e(),this},n.done=function(e){return e||n.status?n.inc(.3+.5*Math.random()).set(1):this},n.inc=function(e){var t=n.status;return t?("number"!=typeof e&&(e=(1-t)*r(Math.random()*t,.1,.95)),t=r(t+e,0,.994),n.set(t)):n.start()},n.trickle=function(){return n.inc(Math.random()*a.trickleRate)},e=0,t=0,n.promise=function(a){return a&&"resolved"!==a.state()?(0===t&&n.start(),e++,t++,a.always((function(){0==--t?(e=0,n.done()):n.set((e-t)/e)})),this):this},n.render=function(e){if(n.isRendered())return document.getElementById("nprogress");d(document.documentElement,"nprogress-busy");var t=document.createElement("div");t.id="nprogress",t.innerHTML=a.template;var r,o=t.querySelector(a.barSelector),l=e?"-100":i(n.status||0),c=document.querySelector(a.parent);return s(o,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),a.showSpinner||(r=t.querySelector(a.spinnerSelector))&&p(r),c!=document.body&&d(c,"nprogress-custom-parent"),c.appendChild(t),t},n.remove=function(){c(document.documentElement,"nprogress-busy"),c(document.querySelector(a.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&p(e)},n.isRendered=function(){return!!document.getElementById("nprogress")},n.getPositioningCSS=function(){var e=document.body.style,t="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return t+"Perspective"in e?"translate3d":t+"Transform"in e?"translate":"margin"};var o=function(){var e=[];function t(){var n=e.shift();n&&n(t)}return function(n){e.push(n),1==e.length&&t()}}(),s=function(){var e=["Webkit","O","Moz","ms"],t={};function n(n){return n=n.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,t){return t.toUpperCase()})),t[n]||(t[n]=function(t){var n=document.body.style;if(t in n)return t;for(var a,r=e.length,i=t.charAt(0).toUpperCase()+t.slice(1);r--;)if((a=e[r]+i)in n)return a;return t}(n))}function a(e,t,a){t=n(t),e.style[t]=a}return function(e,t){var n,r,i=arguments;if(2==i.length)for(n in t)void 0!==(r=t[n])&&t.hasOwnProperty(n)&&a(e,n,r);else a(e,i[1],i[2])}}();function l(e,t){return("string"==typeof e?e:u(e)).indexOf(" "+t+" ")>=0}function d(e,t){var n=u(e),a=n+t;l(n,t)||(e.className=a.substring(1))}function c(e,t){var n,a=u(e);l(e,t)&&(n=a.replace(" "+t+" "," "),e.className=n.substring(1,n.length-1))}function u(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function p(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return n})?a.call(t,n,t,e):a)||(e.exports=r)},function(e,t,n){var a=n(8),r=String,i=TypeError;e.exports=function(e){if(a(e))return e;throw i(r(e)+" is not an object")}},function(e,t,n){var a=n(3),r=n(48).f,i=n(13),o=n(109),s=n(35),l=n(62),d=n(122);e.exports=function(e,t){var n,c,u,p,h,f=e.target,m=e.global,v=e.stat;if(n=m?a:v?a[f]||s(f,{}):(a[f]||{}).prototype)for(c in t){if(p=t[c],u=e.dontCallGetSet?(h=r(n,c))&&h.value:n[c],!d(m?c:f+(v?".":"#")+c,e.forced)&&void 0!==u){if(typeof p==typeof u)continue;l(p,u)}(e.sham||u&&u.sham)&&i(p,"sham",!0),o(n,c,p,e)}}},function(e,t,n){var a=n(2);e.exports=!a((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},function(e,t,n){var a=n(45),r=n(49);e.exports=function(e){return a(r(e))}},function(e,t,n){var a=n(3),r=n(0),i=function(e){return r(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?i(a[e]):a[e]&&a[e][t]}},function(e,t,n){var a=n(0),r=n(107),i=TypeError;e.exports=function(e){if(a(e))return e;throw i(r(e)+" is not a function")}},function(e,t,n){var a=n(3),r=n(58),i=n(7),o=n(60),s=n(56),l=n(55),d=a.Symbol,c=r("wks"),u=l?d.for||d:d&&d.withoutSetter||o;e.exports=function(e){return i(c,e)||(c[e]=s&&i(d,e)?d[e]:u("Symbol."+e)),c[e]}},function(e,t,n){var a=n(49),r=Object;e.exports=function(e){return r(a(e))}},function(e,t,n){var a=n(120);e.exports=function(e){return a(e.length)}},function(e,t,n){var a=n(25),r=Function.prototype.call;e.exports=a?r.bind(r):function(){return r.apply(r,arguments)}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var a=n(3),r=n(35),i=a["__core-js_shared__"]||r("__core-js_shared__",{});e.exports=i},function(e,t,n){var a=n(3),r=Object.defineProperty;e.exports=function(e,t){try{r(a,e,{value:t,configurable:!0,writable:!0})}catch(n){a[e]=t}return t}},function(e,t,n){var a=n(146),r=n(11),i=Object.prototype,o=i.hasOwnProperty,s=i.propertyIsEnumerable,l=a(function(){return arguments}())?a:function(e){return r(e)&&o.call(e,"callee")&&!s.call(e,"callee")};e.exports=l},function(e,t,n){var a=n(9)(n(6),"Map");e.exports=a},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){var a=n(166),r=n(173),i=n(175),o=n(176),s=n(177);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,e.exports=l},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t,n){var a=n(5),r=n(43),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;e.exports=function(e,t){if(a(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!r(e))||(o.test(e)||!i.test(e)||null!=t&&e in Object(t))}},function(e,t,n){var a=n(12),r=n(11);e.exports=function(e){return"symbol"==typeof e||r(e)&&"[object Symbol]"==a(e)}},function(e,t){e.exports=function(e){return e}},function(e,t,n){var a=n(1),r=n(2),i=n(16),o=Object,s=a("".split);e.exports=r((function(){return!o("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?s(e,""):o(e)}:o},function(e,t){e.exports={}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var a=n(4),r=n(32),i=n(103),o=n(33),s=n(26),l=n(51),d=n(7),c=n(61),u=Object.getOwnPropertyDescriptor;t.f=a?u:function(e,t){if(e=s(e),t=l(t),c)try{return u(e,t)}catch(e){}if(d(e,t))return o(!r(i.f,e,t),e[t])}},function(e,t,n){var a=n(50),r=TypeError;e.exports=function(e){if(a(e))throw r("Can't call method on "+e);return e}},function(e,t){e.exports=function(e){return null==e}},function(e,t,n){var a=n(104),r=n(53);e.exports=function(e){var t=a(e,"string");return r(t)?t:t+""}},function(e,t){var n="object"==typeof document&&document.all,a=void 0===n&&void 0!==n;e.exports={all:n,IS_HTMLDDA:a}},function(e,t,n){var a=n(27),r=n(0),i=n(54),o=n(55),s=Object;e.exports=o?function(e){return"symbol"==typeof e}:function(e){var t=a("Symbol");return r(t)&&i(t.prototype,s(e))}},function(e,t,n){var a=n(1);e.exports=a({}.isPrototypeOf)},function(e,t,n){var a=n(56);e.exports=a&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var a=n(57),r=n(2);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&a&&a<41}))},function(e,t,n){var a,r,i=n(3),o=n(105),s=i.process,l=i.Deno,d=s&&s.versions||l&&l.version,c=d&&d.v8;c&&(r=(a=c.split("."))[0]>0&&a[0]<4?1:+(a[0]+a[1])),!r&&o&&(!(a=o.match(/Edge\/(\d+)/))||a[1]>=74)&&(a=o.match(/Chrome\/(\d+)/))&&(r=+a[1]),e.exports=r},function(e,t,n){var a=n(59),r=n(34);(e.exports=function(e,t){return r[e]||(r[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.30.1",mode:a?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.30.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(e,t){e.exports=!1},function(e,t,n){var a=n(1),r=0,i=Math.random(),o=a(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+o(++r+i,36)}},function(e,t,n){var a=n(4),r=n(2),i=n(93);e.exports=!a&&!r((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var a=n(7),r=n(115),i=n(48),o=n(15);e.exports=function(e,t,n){for(var s=r(t),l=o.f,d=i.f,c=0;c<s.length;c++){var u=s[c];a(e,u)||n&&a(n,u)||l(e,u,d(t,u))}}},function(e,t,n){var a=n(119);e.exports=function(e){var t=+e;return t!=t||0===t?0:a(t)}},function(e,t,n){var a=n(132),r=n(23),i=n(133);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=a(Object.prototype,"__proto__","set"))(n,[]),t=n instanceof Array}catch(e){}return function(n,a){return r(n),i(a),t?e(n,a):n.__proto__=a,n}}():void 0)},function(e,t){e.exports=function(e,t){for(var n=-1,a=t.length,r=e.length;++n<a;)e[r+n]=t[n];return e}},function(e,t){var n="object"==typeof global&&global&&global.Object===Object&&global;e.exports=n},function(e,t,n){var a=n(17),r=n(157),i=n(158),o=n(159),s=n(160),l=n(161);function d(e){var t=this.__data__=new a(e);this.size=t.size}d.prototype.clear=r,d.prototype.delete=i,d.prototype.get=o,d.prototype.has=s,d.prototype.set=l,e.exports=d},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var a=n(12),r=n(38);e.exports=function(e){if(!r(e))return!1;var t=a(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var a=n(178),r=n(11);e.exports=function e(t,n,i,o,s){return t===n||(null==t||null==n||!r(t)&&!r(n)?t!=t&&n!=n:a(t,n,i,o,e,s))}},function(e,t,n){var a=n(73),r=n(181),i=n(74);e.exports=function(e,t,n,o,s,l){var d=1&n,c=e.length,u=t.length;if(c!=u&&!(d&&u>c))return!1;var p=l.get(e),h=l.get(t);if(p&&h)return p==t&&h==e;var f=-1,m=!0,v=2&n?new a:void 0;for(l.set(e,t),l.set(t,e);++f<c;){var y=e[f],g=t[f];if(o)var w=d?o(g,y,f,t,e,l):o(y,g,f,e,t,l);if(void 0!==w){if(w)continue;m=!1;break}if(v){if(!r(t,(function(e,t){if(!i(v,t)&&(y===e||s(y,e,n,o,l)))return v.push(t)}))){m=!1;break}}else if(y!==g&&!s(y,g,n,o,l)){m=!1;break}}return l.delete(e),l.delete(t),m}},function(e,t,n){var a=n(39),r=n(179),i=n(180);function o(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new a;++t<n;)this.add(e[t])}o.prototype.add=o.prototype.push=r,o.prototype.has=i,e.exports=o},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t,n){var a=n(191),r=n(197),i=n(79);e.exports=function(e){return i(e)?a(e):r(e)}},function(e,t,n){(function(e){var a=n(6),r=n(193),i=t&&!t.nodeType&&t,o=i&&"object"==typeof e&&e&&!e.nodeType&&e,s=o&&o.exports===i?a.Buffer:void 0,l=(s?s.isBuffer:void 0)||r;e.exports=l}).call(this,n(47)(e))},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var a=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==a||"symbol"!=a&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var a=n(194),r=n(195),i=n(196),o=i&&i.isTypedArray,s=o?r(o):a;e.exports=s},function(e,t,n){var a=n(69),r=n(41);e.exports=function(e){return null!=e&&r(e.length)&&!a(e)}},function(e,t,n){var a=n(9)(n(6),"Set");e.exports=a},function(e,t,n){var a=n(38);e.exports=function(e){return e==e&&!a(e)}},function(e,t){e.exports=function(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}},function(e,t,n){var a=n(84),r=n(21);e.exports=function(e,t){for(var n=0,i=(t=a(t,e)).length;null!=e&&n<i;)e=e[r(t[n++])];return n&&n==i?e:void 0}},function(e,t,n){var a=n(5),r=n(42),i=n(207),o=n(210);e.exports=function(e,t){return a(e)?e:r(e,t)?[e]:i(o(e))}},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){var a=n(144),r=n(149),i=n(219),o=n(227),s=n(236),l=n(98),d=i((function(e){var t=l(e);return s(t)&&(t=void 0),o(a(e,1,s,!0),r(t,2))}));e.exports=d},function(e,t,n){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var a=/["'&<>]/;e.exports=function(e){var t,n=""+e,r=a.exec(n);if(!r)return n;var i="",o=0,s=0;for(o=r.index;o<n.length;o++){switch(n.charCodeAt(o)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#39;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}s!==o&&(i+=n.substring(s,o)),s=o+1,i+=t}return s!==o?i+n.substring(s,o):i}},function(e,t){var n=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,i=/^0o[0-7]+$/i,o=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,d=s||l||Function("return this")(),c=Object.prototype.toString,u=Math.max,p=Math.min,h=function(){return d.Date.now()};function f(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function m(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==c.call(e)}(e))return NaN;if(f(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=f(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var s=r.test(e);return s||i.test(e)?o(e.slice(2),s?2:8):a.test(e)?NaN:+e}e.exports=function(e,t,n){var a,r,i,o,s,l,d=0,c=!1,v=!1,y=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function g(t){var n=a,i=r;return a=r=void 0,d=t,o=e.apply(i,n)}function w(e){return d=e,s=setTimeout(x,t),c?g(e):o}function b(e){var n=e-l;return void 0===l||n>=t||n<0||v&&e-d>=i}function x(){var e=h();if(b(e))return k(e);s=setTimeout(x,function(e){var n=t-(e-l);return v?p(n,i-(e-d)):n}(e))}function k(e){return s=void 0,y&&a?g(e):(a=r=void 0,o)}function T(){var e=h(),n=b(e);if(a=arguments,r=this,l=e,n){if(void 0===s)return w(l);if(v)return s=setTimeout(x,t),g(l)}return void 0===s&&(s=setTimeout(x,t)),o}return t=m(t)||0,f(n)&&(c=!!n.leading,i=(v="maxWait"in n)?u(m(n.maxWait)||0,t):i,y="trailing"in n?!!n.trailing:y),T.cancel=function(){void 0!==s&&clearTimeout(s),d=0,a=l=r=s=void 0},T.flush=function(){return void 0===s?o:k(h())},T}},function(e,t,n){"use strict";var a=n(24),r=n(30),i=n(31),o=n(126),s=n(128);a({target:"Array",proto:!0,arity:1,forced:n(2)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(e){return e instanceof TypeError}}()},{push:function(e){var t=r(this),n=i(t),a=arguments.length;s(n+a);for(var l=0;l<a;l++)t[n]=arguments[l],n++;return o(t,n),n}})},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,n){var a=n(3),r=n(8),i=a.document,o=r(i)&&r(i.createElement);e.exports=function(e){return o?i.createElement(e):{}}},function(e,t,n){var a=n(4),r=n(2);e.exports=a&&r((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(e,t,n){var a=n(58),r=n(60),i=a("keys");e.exports=function(e){return i[e]||(i[e]=r(e))}},function(e,t,n){var a=n(1),r=n(7),i=n(26),o=n(117).indexOf,s=n(46),l=a([].push);e.exports=function(e,t){var n,a=i(e),d=0,c=[];for(n in a)!r(s,n)&&r(a,n)&&l(c,n);for(;t.length>d;)r(a,n=t[d++])&&(~o(c,n)||l(c,n));return c}},function(e,t,n){var a=n(83);e.exports=function(e,t,n){var r=null==e?void 0:a(e,t);return void 0===r?n:r}},function(e,t){e.exports=function(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}},,,function(e,t,n){e.exports=n(243)},function(e,t,n){"use strict";var a=n(24),r=n(123).left,i=n(124),o=n(57);a({target:"Array",proto:!0,forced:!n(125)&&o>79&&o<83||!i("reduce")},{reduce:function(e){var t=arguments.length;return r(this,e,t,t>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var a={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,i=r&&!a.call({1:2},1);t.f=i?function(e){var t=r(this,e);return!!t&&t.enumerable}:a},function(e,t,n){var a=n(32),r=n(8),i=n(53),o=n(106),s=n(108),l=n(29),d=TypeError,c=l("toPrimitive");e.exports=function(e,t){if(!r(e)||i(e))return e;var n,l=o(e,c);if(l){if(void 0===t&&(t="default"),n=a(l,e,t),!r(n)||i(n))return n;throw d("Can't convert object to primitive value")}return void 0===t&&(t="number"),s(e,t)}},function(e,t){e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(e,t,n){var a=n(28),r=n(50);e.exports=function(e,t){var n=e[t];return r(n)?void 0:a(n)}},function(e,t){var n=String;e.exports=function(e){try{return n(e)}catch(e){return"Object"}}},function(e,t,n){var a=n(32),r=n(0),i=n(8),o=TypeError;e.exports=function(e,t){var n,s;if("string"===t&&r(n=e.toString)&&!i(s=a(n,e)))return s;if(r(n=e.valueOf)&&!i(s=a(n,e)))return s;if("string"!==t&&r(n=e.toString)&&!i(s=a(n,e)))return s;throw o("Can't convert object to primitive value")}},function(e,t,n){var a=n(0),r=n(15),i=n(110),o=n(35);e.exports=function(e,t,n,s){s||(s={});var l=s.enumerable,d=void 0!==s.name?s.name:t;if(a(n)&&i(n,d,s),s.global)l?e[t]=n:o(t,n);else{try{s.unsafe?e[t]&&(l=!0):delete e[t]}catch(e){}l?e[t]=n:r.f(e,t,{value:n,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return e}},function(e,t,n){var a=n(1),r=n(2),i=n(0),o=n(7),s=n(4),l=n(111).CONFIGURABLE,d=n(112),c=n(113),u=c.enforce,p=c.get,h=String,f=Object.defineProperty,m=a("".slice),v=a("".replace),y=a([].join),g=s&&!r((function(){return 8!==f((function(){}),"length",{value:8}).length})),w=String(String).split("String"),b=e.exports=function(e,t,n){"Symbol("===m(h(t),0,7)&&(t="["+v(h(t),/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!o(e,"name")||l&&e.name!==t)&&(s?f(e,"name",{value:t,configurable:!0}):e.name=t),g&&n&&o(n,"arity")&&e.length!==n.arity&&f(e,"length",{value:n.arity});try{n&&o(n,"constructor")&&n.constructor?s&&f(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var a=u(e);return o(a,"source")||(a.source=y(w,"string"==typeof t?t:"")),e};Function.prototype.toString=b((function(){return i(this)&&p(this).source||d(this)}),"toString")},function(e,t,n){var a=n(4),r=n(7),i=Function.prototype,o=a&&Object.getOwnPropertyDescriptor,s=r(i,"name"),l=s&&"something"===function(){}.name,d=s&&(!a||a&&o(i,"name").configurable);e.exports={EXISTS:s,PROPER:l,CONFIGURABLE:d}},function(e,t,n){var a=n(1),r=n(0),i=n(34),o=a(Function.toString);r(i.inspectSource)||(i.inspectSource=function(e){return o(e)}),e.exports=i.inspectSource},function(e,t,n){var a,r,i,o=n(114),s=n(3),l=n(8),d=n(13),c=n(7),u=n(34),p=n(95),h=n(46),f=s.TypeError,m=s.WeakMap;if(o||u.state){var v=u.state||(u.state=new m);v.get=v.get,v.has=v.has,v.set=v.set,a=function(e,t){if(v.has(e))throw f("Object already initialized");return t.facade=e,v.set(e,t),t},r=function(e){return v.get(e)||{}},i=function(e){return v.has(e)}}else{var y=p("state");h[y]=!0,a=function(e,t){if(c(e,y))throw f("Object already initialized");return t.facade=e,d(e,y,t),t},r=function(e){return c(e,y)?e[y]:{}},i=function(e){return c(e,y)}}e.exports={set:a,get:r,has:i,enforce:function(e){return i(e)?r(e):a(e,{})},getterFor:function(e){return function(t){var n;if(!l(t)||(n=r(t)).type!==e)throw f("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var a=n(3),r=n(0),i=a.WeakMap;e.exports=r(i)&&/native code/.test(String(i))},function(e,t,n){var a=n(27),r=n(1),i=n(116),o=n(121),s=n(23),l=r([].concat);e.exports=a("Reflect","ownKeys")||function(e){var t=i.f(s(e)),n=o.f;return n?l(t,n(e)):t}},function(e,t,n){var a=n(96),r=n(92).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return a(e,r)}},function(e,t,n){var a=n(26),r=n(118),i=n(31),o=function(e){return function(t,n,o){var s,l=a(t),d=i(l),c=r(o,d);if(e&&n!=n){for(;d>c;)if((s=l[c++])!=s)return!0}else for(;d>c;c++)if((e||c in l)&&l[c]===n)return e||c||0;return!e&&-1}};e.exports={includes:o(!0),indexOf:o(!1)}},function(e,t,n){var a=n(63),r=Math.max,i=Math.min;e.exports=function(e,t){var n=a(e);return n<0?r(n+t,0):i(n,t)}},function(e,t){var n=Math.ceil,a=Math.floor;e.exports=Math.trunc||function(e){var t=+e;return(t>0?a:n)(t)}},function(e,t,n){var a=n(63),r=Math.min;e.exports=function(e){return e>0?r(a(e),9007199254740991):0}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var a=n(2),r=n(0),i=/#|\.prototype\./,o=function(e,t){var n=l[s(e)];return n==c||n!=d&&(r(t)?a(t):!!t)},s=o.normalize=function(e){return String(e).replace(i,".").toLowerCase()},l=o.data={},d=o.NATIVE="N",c=o.POLYFILL="P";e.exports=o},function(e,t,n){var a=n(28),r=n(30),i=n(45),o=n(31),s=TypeError,l=function(e){return function(t,n,l,d){a(n);var c=r(t),u=i(c),p=o(c),h=e?p-1:0,f=e?-1:1;if(l<2)for(;;){if(h in u){d=u[h],h+=f;break}if(h+=f,e?h<0:p<=h)throw s("Reduce of empty array with no initial value")}for(;e?h>=0:p>h;h+=f)h in u&&(d=n(d,u[h],h,c));return d}};e.exports={left:l(!1),right:l(!0)}},function(e,t,n){"use strict";var a=n(2);e.exports=function(e,t){var n=[][e];return!!n&&a((function(){n.call(null,t||function(){return 1},1)}))}},function(e,t,n){var a=n(16);e.exports="undefined"!=typeof process&&"process"==a(process)},function(e,t,n){"use strict";var a=n(4),r=n(127),i=TypeError,o=Object.getOwnPropertyDescriptor,s=a&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(e){return e instanceof TypeError}}();e.exports=s?function(e,t){if(r(e)&&!o(e,"length").writable)throw i("Cannot set read only .length");return e.length=t}:function(e,t){return e.length=t}},function(e,t,n){var a=n(16);e.exports=Array.isArray||function(e){return"Array"==a(e)}},function(e,t){var n=TypeError;e.exports=function(e){if(e>9007199254740991)throw n("Maximum allowed index exceeded");return e}},function(e,t,n){var a=n(24),r=n(3),i=n(130),o=n(131),s=r.WebAssembly,l=7!==Error("e",{cause:7}).cause,d=function(e,t){var n={};n[e]=o(e,t,l),a({global:!0,constructor:!0,arity:1,forced:l},n)},c=function(e,t){if(s&&s[e]){var n={};n[e]=o("WebAssembly."+e,t,l),a({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},n)}};d("Error",(function(e){return function(t){return i(e,this,arguments)}})),d("EvalError",(function(e){return function(t){return i(e,this,arguments)}})),d("RangeError",(function(e){return function(t){return i(e,this,arguments)}})),d("ReferenceError",(function(e){return function(t){return i(e,this,arguments)}})),d("SyntaxError",(function(e){return function(t){return i(e,this,arguments)}})),d("TypeError",(function(e){return function(t){return i(e,this,arguments)}})),d("URIError",(function(e){return function(t){return i(e,this,arguments)}})),c("CompileError",(function(e){return function(t){return i(e,this,arguments)}})),c("LinkError",(function(e){return function(t){return i(e,this,arguments)}})),c("RuntimeError",(function(e){return function(t){return i(e,this,arguments)}}))},function(e,t,n){var a=n(25),r=Function.prototype,i=r.apply,o=r.call;e.exports="object"==typeof Reflect&&Reflect.apply||(a?o.bind(i):function(){return o.apply(i,arguments)})},function(e,t,n){"use strict";var a=n(27),r=n(7),i=n(13),o=n(54),s=n(64),l=n(62),d=n(134),c=n(135),u=n(136),p=n(140),h=n(141),f=n(4),m=n(59);e.exports=function(e,t,n,v){var y=v?2:1,g=e.split("."),w=g[g.length-1],b=a.apply(null,g);if(b){var x=b.prototype;if(!m&&r(x,"cause")&&delete x.cause,!n)return b;var k=a("Error"),T=t((function(e,t){var n=u(v?t:e,void 0),a=v?new b(e):new b;return void 0!==n&&i(a,"message",n),h(a,T,a.stack,2),this&&o(x,this)&&c(a,this,T),arguments.length>y&&p(a,arguments[y]),a}));if(T.prototype=x,"Error"!==w?s?s(T,k):l(T,k,{name:!0}):f&&"stackTraceLimit"in b&&(d(T,b,"stackTraceLimit"),d(T,b,"prepareStackTrace")),l(T,b),!m)try{x.name!==w&&i(x,"name",w),x.constructor=T}catch(e){}return T}}},function(e,t,n){var a=n(1),r=n(28);e.exports=function(e,t,n){try{return a(r(Object.getOwnPropertyDescriptor(e,t)[n]))}catch(e){}}},function(e,t,n){var a=n(0),r=String,i=TypeError;e.exports=function(e){if("object"==typeof e||a(e))return e;throw i("Can't set "+r(e)+" as a prototype")}},function(e,t,n){var a=n(15).f;e.exports=function(e,t,n){n in e||a(e,n,{configurable:!0,get:function(){return t[n]},set:function(e){t[n]=e}})}},function(e,t,n){var a=n(0),r=n(8),i=n(64);e.exports=function(e,t,n){var o,s;return i&&a(o=t.constructor)&&o!==n&&r(s=o.prototype)&&s!==n.prototype&&i(e,s),e}},function(e,t,n){var a=n(137);e.exports=function(e,t){return void 0===e?arguments.length<2?"":t:a(e)}},function(e,t,n){var a=n(138),r=String;e.exports=function(e){if("Symbol"===a(e))throw TypeError("Cannot convert a Symbol value to a string");return r(e)}},function(e,t,n){var a=n(139),r=n(0),i=n(16),o=n(29)("toStringTag"),s=Object,l="Arguments"==i(function(){return arguments}());e.exports=a?i:function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=s(e),o))?n:l?i(t):"Object"==(a=i(t))&&r(t.callee)?"Arguments":a}},function(e,t,n){var a={};a[n(29)("toStringTag")]="z",e.exports="[object z]"===String(a)},function(e,t,n){var a=n(8),r=n(13);e.exports=function(e,t){a(t)&&"cause"in t&&r(e,"cause",t.cause)}},function(e,t,n){var a=n(13),r=n(142),i=n(143),o=Error.captureStackTrace;e.exports=function(e,t,n,s){i&&(o?o(e,t):a(e,"stack",r(n,s)))}},function(e,t,n){var a=n(1),r=Error,i=a("".replace),o=String(r("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(o);e.exports=function(e,t){if(l&&"string"==typeof e&&!r.prepareStackTrace)for(;t--;)e=i(e,s,"");return e}},function(e,t,n){var a=n(2),r=n(33);e.exports=!a((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",r(1,7)),7!==e.stack)}))},function(e,t,n){var a=n(65),r=n(145);e.exports=function e(t,n,i,o,s){var l=-1,d=t.length;for(i||(i=r),s||(s=[]);++l<d;){var c=t[l];n>0&&i(c)?n>1?e(c,n-1,i,o,s):a(s,c):o||(s[s.length]=c)}return s}},function(e,t,n){var a=n(14),r=n(36),i=n(5),o=a?a.isConcatSpreadable:void 0;e.exports=function(e){return i(e)||r(e)||!!(o&&e&&e[o])}},function(e,t,n){var a=n(12),r=n(11);e.exports=function(e){return r(e)&&"[object Arguments]"==a(e)}},function(e,t,n){var a=n(14),r=Object.prototype,i=r.hasOwnProperty,o=r.toString,s=a?a.toStringTag:void 0;e.exports=function(e){var t=i.call(e,s),n=e[s];try{e[s]=void 0;var a=!0}catch(e){}var r=o.call(e);return a&&(t?e[s]=n:delete e[s]),r}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var a=n(150),r=n(206),i=n(44),o=n(5),s=n(216);e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?o(e)?r(e[0],e[1]):a(e):s(e)}},function(e,t,n){var a=n(151),r=n(205),i=n(82);e.exports=function(e){var t=r(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(n){return n===e||a(n,e,t)}}},function(e,t,n){var a=n(67),r=n(71);e.exports=function(e,t,n,i){var o=n.length,s=o,l=!i;if(null==e)return!s;for(e=Object(e);o--;){var d=n[o];if(l&&d[2]?d[1]!==e[d[0]]:!(d[0]in e))return!1}for(;++o<s;){var c=(d=n[o])[0],u=e[c],p=d[1];if(l&&d[2]){if(void 0===u&&!(c in e))return!1}else{var h=new a;if(i)var f=i(u,p,c,e,t,h);if(!(void 0===f?r(p,u,3,i,h):f))return!1}}return!0}},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var a=n(18),r=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=a(t,e);return!(n<0)&&(n==t.length-1?t.pop():r.call(t,n,1),--this.size,!0)}},function(e,t,n){var a=n(18);e.exports=function(e){var t=this.__data__,n=a(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var a=n(18);e.exports=function(e){return a(this.__data__,e)>-1}},function(e,t,n){var a=n(18);e.exports=function(e,t){var n=this.__data__,r=a(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this}},function(e,t,n){var a=n(17);e.exports=function(){this.__data__=new a,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var a=n(17),r=n(37),i=n(39);e.exports=function(e,t){var n=this.__data__;if(n instanceof a){var o=n.__data__;if(!r||o.length<199)return o.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(o)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var a=n(69),r=n(163),i=n(38),o=n(70),s=/^\[object .+?Constructor\]$/,l=Function.prototype,d=Object.prototype,c=l.toString,u=d.hasOwnProperty,p=RegExp("^"+c.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||r(e))&&(a(e)?p:s).test(o(e))}},function(e,t,n){var a,r=n(164),i=(a=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+a:"";e.exports=function(e){return!!i&&i in e}},function(e,t,n){var a=n(6)["__core-js_shared__"];e.exports=a},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var a=n(167),r=n(17),i=n(37);e.exports=function(){this.size=0,this.__data__={hash:new a,map:new(i||r),string:new a}}},function(e,t,n){var a=n(168),r=n(169),i=n(170),o=n(171),s=n(172);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,e.exports=l},function(e,t,n){var a=n(19);e.exports=function(){this.__data__=a?a(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var a=n(19),r=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(a){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return r.call(t,e)?t[e]:void 0}},function(e,t,n){var a=n(19),r=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return a?void 0!==t[e]:r.call(t,e)}},function(e,t,n){var a=n(19);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=a&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t,n){var a=n(20);e.exports=function(e){var t=a(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var a=n(20);e.exports=function(e){return a(this,e).get(e)}},function(e,t,n){var a=n(20);e.exports=function(e){return a(this,e).has(e)}},function(e,t,n){var a=n(20);e.exports=function(e,t){var n=a(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this}},function(e,t,n){var a=n(67),r=n(72),i=n(182),o=n(185),s=n(201),l=n(5),d=n(76),c=n(78),u="[object Object]",p=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,h,f,m){var v=l(e),y=l(t),g=v?"[object Array]":s(e),w=y?"[object Array]":s(t),b=(g="[object Arguments]"==g?u:g)==u,x=(w="[object Arguments]"==w?u:w)==u,k=g==w;if(k&&d(e)){if(!d(t))return!1;v=!0,b=!1}if(k&&!b)return m||(m=new a),v||c(e)?r(e,t,n,h,f,m):i(e,t,g,n,h,f,m);if(!(1&n)){var T=b&&p.call(e,"__wrapped__"),_=x&&p.call(t,"__wrapped__");if(T||_){var j=T?e.value():e,A=_?t.value():t;return m||(m=new a),f(j,A,n,h,m)}}return!!k&&(m||(m=new a),o(e,t,n,h,f,m))}},function(e,t){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e,t){for(var n=-1,a=null==e?0:e.length;++n<a;)if(t(e[n],n,e))return!0;return!1}},function(e,t,n){var a=n(14),r=n(183),i=n(68),o=n(72),s=n(184),l=n(40),d=a?a.prototype:void 0,c=d?d.valueOf:void 0;e.exports=function(e,t,n,a,d,u,p){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!u(new r(e),new r(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var h=s;case"[object Set]":var f=1&a;if(h||(h=l),e.size!=t.size&&!f)return!1;var m=p.get(e);if(m)return m==t;a|=2,p.set(e,t);var v=o(h(e),h(t),a,d,u,p);return p.delete(e),v;case"[object Symbol]":if(c)return c.call(e)==c.call(t)}return!1}},function(e,t,n){var a=n(6).Uint8Array;e.exports=a},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,a){n[++t]=[a,e]})),n}},function(e,t,n){var a=n(186),r=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,i,o,s){var l=1&n,d=a(e),c=d.length;if(c!=a(t).length&&!l)return!1;for(var u=c;u--;){var p=d[u];if(!(l?p in t:r.call(t,p)))return!1}var h=s.get(e),f=s.get(t);if(h&&f)return h==t&&f==e;var m=!0;s.set(e,t),s.set(t,e);for(var v=l;++u<c;){var y=e[p=d[u]],g=t[p];if(i)var w=l?i(g,y,p,t,e,s):i(y,g,p,e,t,s);if(!(void 0===w?y===g||o(y,g,n,i,s):w)){m=!1;break}v||(v="constructor"==p)}if(m&&!v){var b=e.constructor,x=t.constructor;b==x||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof x&&x instanceof x||(m=!1)}return s.delete(e),s.delete(t),m}},function(e,t,n){var a=n(187),r=n(188),i=n(75);e.exports=function(e){return a(e,i,r)}},function(e,t,n){var a=n(65),r=n(5);e.exports=function(e,t,n){var i=t(e);return r(e)?i:a(i,n(e))}},function(e,t,n){var a=n(189),r=n(190),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,s=o?function(e){return null==e?[]:(e=Object(e),a(o(e),(function(t){return i.call(e,t)})))}:r;e.exports=s},function(e,t){e.exports=function(e,t){for(var n=-1,a=null==e?0:e.length,r=0,i=[];++n<a;){var o=e[n];t(o,n,e)&&(i[r++]=o)}return i}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var a=n(192),r=n(36),i=n(5),o=n(76),s=n(77),l=n(78),d=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),c=!n&&r(e),u=!n&&!c&&o(e),p=!n&&!c&&!u&&l(e),h=n||c||u||p,f=h?a(e.length,String):[],m=f.length;for(var v in e)!t&&!d.call(e,v)||h&&("length"==v||u&&("offset"==v||"parent"==v)||p&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||s(v,m))||f.push(v);return f}},function(e,t){e.exports=function(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var a=n(12),r=n(41),i=n(11),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&r(e.length)&&!!o[a(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var a=n(66),r=t&&!t.nodeType&&t,i=r&&"object"==typeof e&&e&&!e.nodeType&&e,o=i&&i.exports===r&&a.process,s=function(){try{var e=i&&i.require&&i.require("util").types;return e||o&&o.binding&&o.binding("util")}catch(e){}}();e.exports=s}).call(this,n(47)(e))},function(e,t,n){var a=n(198),r=n(199),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!a(e))return r(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var a=n(200)(Object.keys,Object);e.exports=a},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var a=n(202),r=n(37),i=n(203),o=n(80),s=n(204),l=n(12),d=n(70),c=d(a),u=d(r),p=d(i),h=d(o),f=d(s),m=l;(a&&"[object DataView]"!=m(new a(new ArrayBuffer(1)))||r&&"[object Map]"!=m(new r)||i&&"[object Promise]"!=m(i.resolve())||o&&"[object Set]"!=m(new o)||s&&"[object WeakMap]"!=m(new s))&&(m=function(e){var t=l(e),n="[object Object]"==t?e.constructor:void 0,a=n?d(n):"";if(a)switch(a){case c:return"[object DataView]";case u:return"[object Map]";case p:return"[object Promise]";case h:return"[object Set]";case f:return"[object WeakMap]"}return t}),e.exports=m},function(e,t,n){var a=n(9)(n(6),"DataView");e.exports=a},function(e,t,n){var a=n(9)(n(6),"Promise");e.exports=a},function(e,t,n){var a=n(9)(n(6),"WeakMap");e.exports=a},function(e,t,n){var a=n(81),r=n(75);e.exports=function(e){for(var t=r(e),n=t.length;n--;){var i=t[n],o=e[i];t[n]=[i,o,a(o)]}return t}},function(e,t,n){var a=n(71),r=n(97),i=n(213),o=n(42),s=n(81),l=n(82),d=n(21);e.exports=function(e,t){return o(e)&&s(t)?l(d(e),t):function(n){var o=r(n,e);return void 0===o&&o===t?i(n,e):a(t,o,3)}}},function(e,t,n){var a=n(208),r=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=a((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(r,(function(e,n,a,r){t.push(a?r.replace(i,"$1"):n||e)})),t}));e.exports=o},function(e,t,n){var a=n(209);e.exports=function(e){var t=a(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}},function(e,t,n){var a=n(39);function r(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var a=arguments,r=t?t.apply(this,a):a[0],i=n.cache;if(i.has(r))return i.get(r);var o=e.apply(this,a);return n.cache=i.set(r,o)||i,o};return n.cache=new(r.Cache||a),n}r.Cache=a,e.exports=r},function(e,t,n){var a=n(211);e.exports=function(e){return null==e?"":a(e)}},function(e,t,n){var a=n(14),r=n(212),i=n(5),o=n(43),s=a?a.prototype:void 0,l=s?s.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return r(t,e)+"";if(o(t))return l?l.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}},function(e,t){e.exports=function(e,t){for(var n=-1,a=null==e?0:e.length,r=Array(a);++n<a;)r[n]=t(e[n],n,e);return r}},function(e,t,n){var a=n(214),r=n(215);e.exports=function(e,t){return null!=e&&r(e,t,a)}},function(e,t){e.exports=function(e,t){return null!=e&&t in Object(e)}},function(e,t,n){var a=n(84),r=n(36),i=n(5),o=n(77),s=n(41),l=n(21);e.exports=function(e,t,n){for(var d=-1,c=(t=a(t,e)).length,u=!1;++d<c;){var p=l(t[d]);if(!(u=null!=e&&n(e,p)))break;e=e[p]}return u||++d!=c?u:!!(c=null==e?0:e.length)&&s(c)&&o(p,c)&&(i(e)||r(e))}},function(e,t,n){var a=n(217),r=n(218),i=n(42),o=n(21);e.exports=function(e){return i(e)?a(o(e)):r(e)}},function(e,t){e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},function(e,t,n){var a=n(83);e.exports=function(e){return function(t){return a(t,e)}}},function(e,t,n){var a=n(44),r=n(220),i=n(222);e.exports=function(e,t){return i(r(e,t,a),e+"")}},function(e,t,n){var a=n(221),r=Math.max;e.exports=function(e,t,n){return t=r(void 0===t?e.length-1:t,0),function(){for(var i=arguments,o=-1,s=r(i.length-t,0),l=Array(s);++o<s;)l[o]=i[t+o];o=-1;for(var d=Array(t+1);++o<t;)d[o]=i[o];return d[t]=n(l),a(e,this,d)}}},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var a=n(223),r=n(226)(a);e.exports=r},function(e,t,n){var a=n(224),r=n(225),i=n(44),o=r?function(e,t){return r(e,"toString",{configurable:!0,enumerable:!1,value:a(t),writable:!0})}:i;e.exports=o},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t,n){var a=n(9),r=function(){try{var e=a(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=r},function(e,t){var n=Date.now;e.exports=function(e){var t=0,a=0;return function(){var r=n(),i=16-(r-a);if(a=r,i>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t,n){var a=n(73),r=n(228),i=n(233),o=n(74),s=n(234),l=n(40);e.exports=function(e,t,n){var d=-1,c=r,u=e.length,p=!0,h=[],f=h;if(n)p=!1,c=i;else if(u>=200){var m=t?null:s(e);if(m)return l(m);p=!1,c=o,f=new a}else f=t?[]:h;e:for(;++d<u;){var v=e[d],y=t?t(v):v;if(v=n||0!==v?v:0,p&&y==y){for(var g=f.length;g--;)if(f[g]===y)continue e;t&&f.push(y),h.push(v)}else c(f,y,n)||(f!==h&&f.push(y),h.push(v))}return h}},function(e,t,n){var a=n(229);e.exports=function(e,t){return!!(null==e?0:e.length)&&a(e,t,0)>-1}},function(e,t,n){var a=n(230),r=n(231),i=n(232);e.exports=function(e,t,n){return t==t?i(e,t,n):a(e,r,n)}},function(e,t){e.exports=function(e,t,n,a){for(var r=e.length,i=n+(a?1:-1);a?i--:++i<r;)if(t(e[i],i,e))return i;return-1}},function(e,t){e.exports=function(e){return e!=e}},function(e,t){e.exports=function(e,t,n){for(var a=n-1,r=e.length;++a<r;)if(e[a]===t)return a;return-1}},function(e,t){e.exports=function(e,t,n){for(var a=-1,r=null==e?0:e.length;++a<r;)if(n(t,e[a]))return!0;return!1}},function(e,t,n){var a=n(80),r=n(235),i=n(40),o=a&&1/i(new a([,-0]))[1]==1/0?function(e){return new a(e)}:r;e.exports=o},function(e,t){e.exports=function(){}},function(e,t,n){var a=n(79),r=n(11);e.exports=function(e){return r(e)&&a(e)}},function(e,t,n){"use strict";n(85)},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n(86)},function(e,t,n){"use strict";n(87)},function(e,t,n){"use strict";n.r(t);
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var a=Object.freeze({}),r=Array.isArray;function i(e){return null==e}function o(e){return null!=e}function s(e){return!0===e}function l(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function d(e){return"function"==typeof e}function c(e){return null!==e&&"object"==typeof e}var u=Object.prototype.toString;function p(e){return"[object Object]"===u.call(e)}function h(e){return"[object RegExp]"===u.call(e)}function f(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function m(e){return o(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function v(e){return null==e?"":Array.isArray(e)||p(e)&&e.toString===u?JSON.stringify(e,null,2):String(e)}function y(e){var t=parseFloat(e);return isNaN(t)?e:t}function g(e,t){for(var n=Object.create(null),a=e.split(","),r=0;r<a.length;r++)n[a[r]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}g("slot,component",!0);var w=g("key,ref,slot,slot-scope,is");function b(e,t){var n=e.length;if(n){if(t===e[n-1])return void(e.length=n-1);var a=e.indexOf(t);if(a>-1)return e.splice(a,1)}}var x=Object.prototype.hasOwnProperty;function k(e,t){return x.call(e,t)}function T(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var _=/-(\w)/g,j=T((function(e){return e.replace(_,(function(e,t){return t?t.toUpperCase():""}))})),A=T((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),S=/\B([A-Z])/g,I=T((function(e){return e.replace(S,"-$1").toLowerCase()}));var C=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var a=arguments.length;return a?a>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function D(e,t){t=t||0;for(var n=e.length-t,a=new Array(n);n--;)a[n]=e[n+t];return a}function F(e,t){for(var n in t)e[n]=t[n];return e}function E(e){for(var t={},n=0;n<e.length;n++)e[n]&&F(t,e[n]);return t}function P(e,t,n){}var z=function(e,t,n){return!1},O=function(e){return e};function q(e,t){if(e===t)return!0;var n=c(e),a=c(t);if(!n||!a)return!n&&!a&&String(e)===String(t);try{var r=Array.isArray(e),i=Array.isArray(t);if(r&&i)return e.length===t.length&&e.every((function(e,n){return q(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(r||i)return!1;var o=Object.keys(e),s=Object.keys(t);return o.length===s.length&&o.every((function(n){return q(e[n],t[n])}))}catch(e){return!1}}function R(e,t){for(var n=0;n<e.length;n++)if(q(e[n],t))return n;return-1}function M(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}function L(e,t){return e===t?0===e&&1/e!=1/t:e==e||t==t}var U=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],$={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:z,isReservedAttr:z,isUnknownElement:z,getTagNamespace:P,parsePlatformTagName:O,mustUseProp:z,async:!0,_lifecycleHooks:N},W=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function V(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function B(e,t,n,a){Object.defineProperty(e,t,{value:n,enumerable:!!a,writable:!0,configurable:!0})}var G=new RegExp("[^".concat(W.source,".$_\\d]"));var H="__proto__"in{},J="undefined"!=typeof window,K=J&&window.navigator.userAgent.toLowerCase(),Y=K&&/msie|trident/.test(K),Q=K&&K.indexOf("msie 9.0")>0,Z=K&&K.indexOf("edge/")>0;K&&K.indexOf("android");var X=K&&/iphone|ipad|ipod|ios/.test(K);K&&/chrome\/\d+/.test(K),K&&/phantomjs/.test(K);var ee,te=K&&K.match(/firefox\/(\d+)/),ne={}.watch,ae=!1;if(J)try{var re={};Object.defineProperty(re,"passive",{get:function(){ae=!0}}),window.addEventListener("test-passive",null,re)}catch(e){}var ie=function(){return void 0===ee&&(ee=!J&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),ee},oe=J&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var le,de="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);le="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ce=null;function ue(e){void 0===e&&(e=null),e||ce&&ce._scope.off(),ce=e,e&&e._scope.on()}var pe=function(){function e(e,t,n,a,r,i,o,s){this.tag=e,this.data=t,this.children=n,this.text=a,this.elm=r,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),he=function(e){void 0===e&&(e="");var t=new pe;return t.text=e,t.isComment=!0,t};function fe(e){return new pe(void 0,void 0,void 0,String(e))}function me(e){var t=new pe(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var ve=0,ye=[],ge=function(){function e(){this._pending=!1,this.id=ve++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){this.subs[this.subs.indexOf(e)]=null,this._pending||(this._pending=!0,ye.push(this))},e.prototype.depend=function(t){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){var t=this.subs.filter((function(e){return e}));for(var n=0,a=t.length;n<a;n++){0,t[n].update()}},e}();ge.target=null;var we=[];function be(e){we.push(e),ge.target=e}function xe(){we.pop(),ge.target=we[we.length-1]}var ke=Array.prototype,Te=Object.create(ke);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=ke[e];B(Te,e,(function(){for(var n=[],a=0;a<arguments.length;a++)n[a]=arguments[a];var r,i=t.apply(this,n),o=this.__ob__;switch(e){case"push":case"unshift":r=n;break;case"splice":r=n.slice(2)}return r&&o.observeArray(r),o.dep.notify(),i}))}));var _e=Object.getOwnPropertyNames(Te),je={},Ae=!0;function Se(e){Ae=e}var Ie={notify:P,depend:P,addSub:P,removeSub:P},Ce=function(){function e(e,t,n){if(void 0===t&&(t=!1),void 0===n&&(n=!1),this.value=e,this.shallow=t,this.mock=n,this.dep=n?Ie:new ge,this.vmCount=0,B(e,"__ob__",this),r(e)){if(!n)if(H)e.__proto__=Te;else for(var a=0,i=_e.length;a<i;a++){B(e,s=_e[a],Te[s])}t||this.observeArray(e)}else{var o=Object.keys(e);for(a=0;a<o.length;a++){var s;Fe(e,s=o[a],je,void 0,t,n)}}}return e.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)De(e[t],!1,this.mock)},e}();function De(e,t,n){return e&&k(e,"__ob__")&&e.__ob__ instanceof Ce?e.__ob__:!Ae||!n&&ie()||!r(e)&&!p(e)||!Object.isExtensible(e)||e.__v_skip||Ue(e)||e instanceof pe?void 0:new Ce(e,t,n)}function Fe(e,t,n,a,i,o){var s=new ge,l=Object.getOwnPropertyDescriptor(e,t);if(!l||!1!==l.configurable){var d=l&&l.get,c=l&&l.set;d&&!c||n!==je&&2!==arguments.length||(n=e[t]);var u=!i&&De(n,!1,o);return Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=d?d.call(e):n;return ge.target&&(s.depend(),u&&(u.dep.depend(),r(t)&&ze(t))),Ue(t)&&!i?t.value:t},set:function(t){var a=d?d.call(e):n;if(L(a,t)){if(c)c.call(e,t);else{if(d)return;if(!i&&Ue(a)&&!Ue(t))return void(a.value=t);n=t}u=!i&&De(t,!1,o),s.notify()}}}),s}}function Ee(e,t,n){if(!Le(e)){var a=e.__ob__;return r(e)&&f(t)?(e.length=Math.max(e.length,t),e.splice(t,1,n),a&&!a.shallow&&a.mock&&De(n,!1,!0),n):t in e&&!(t in Object.prototype)?(e[t]=n,n):e._isVue||a&&a.vmCount?n:a?(Fe(a.value,t,n,void 0,a.shallow,a.mock),a.dep.notify(),n):(e[t]=n,n)}}function Pe(e,t){if(r(e)&&f(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||Le(e)||k(e,t)&&(delete e[t],n&&n.dep.notify())}}function ze(e){for(var t=void 0,n=0,a=e.length;n<a;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),r(t)&&ze(t)}function Oe(e){return qe(e,!0),B(e,"__v_isShallow",!0),e}function qe(e,t){if(!Le(e)){De(e,t,ie());0}}function Re(e){return Le(e)?Re(e.__v_raw):!(!e||!e.__ob__)}function Me(e){return!(!e||!e.__v_isShallow)}function Le(e){return!(!e||!e.__v_isReadonly)}function Ue(e){return!(!e||!0!==e.__v_isRef)}function Ne(e,t,n){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var e=t[n];if(Ue(e))return e.value;var a=e&&e.__ob__;return a&&a.dep.depend(),e},set:function(e){var a=t[n];Ue(a)&&!Ue(e)?a.value=e:t[n]=e}})}var $e="".concat("watcher"," callback"),We="".concat("watcher"," getter"),Ve="".concat("watcher"," cleanup");var Be,Ge={};function He(e,t,n){return Je(e,t,n)}function Je(e,t,n){var i=void 0===n?a:n,o=i.immediate,s=i.deep,l=i.flush,c=void 0===l?"pre":l;i.onTrack,i.onTrigger;var u,p,h=ce,f=function(e,t,n){return void 0===n&&(n=null),zt(e,null,n,h,t)},m=!1,v=!1;if(Ue(e)?(u=function(){return e.value},m=Me(e)):Re(e)?(u=function(){return e.__ob__.dep.depend(),e},s=!0):r(e)?(v=!0,m=e.some((function(e){return Re(e)||Me(e)})),u=function(){return e.map((function(e){return Ue(e)?e.value:Re(e)?Kt(e):d(e)?f(e,We):void 0}))}):u=d(e)?t?function(){return f(e,We)}:function(){if(!h||!h._isDestroyed)return p&&p(),f(e,"watcher",[g])}:P,t&&s){var y=u;u=function(){return Kt(y())}}var g=function(e){p=w.onStop=function(){f(e,Ve)}};if(ie())return g=P,t?o&&f(t,$e,[u(),v?[]:void 0,g]):u(),P;var w=new Zt(ce,u,P,{lazy:!0});w.noRecurse=!t;var b=v?[]:Ge;return w.run=function(){if(w.active)if(t){var e=w.get();(s||m||(v?e.some((function(e,t){return L(e,b[t])})):L(e,b)))&&(p&&p(),f(t,$e,[e,b===Ge?void 0:b,g]),b=e)}else w.get()},"sync"===c?w.update=w.run:"post"===c?(w.post=!0,w.update=function(){return bn(w)}):w.update=function(){if(h&&h===ce&&!h._isMounted){var e=h._preWatchers||(h._preWatchers=[]);e.indexOf(w)<0&&e.push(w)}else bn(w)},t?o?w.run():b=w.get():"post"===c&&h?h.$once("hook:mounted",(function(){return w.get()})):w.get(),function(){w.teardown()}}var Ke=function(){function e(e){void 0===e&&(e=!1),this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Be,!e&&Be&&(this.index=(Be.scopes||(Be.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var t=Be;try{return Be=this,e()}finally{Be=t}}else 0},e.prototype.on=function(){Be=this},e.prototype.off=function(){Be=this.parent},e.prototype.stop=function(e){if(this.active){var t=void 0,n=void 0;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].teardown();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){var a=this.parent.scopes.pop();a&&a!==this&&(this.parent.scopes[this.index]=a,a.index=this.index)}this.parent=void 0,this.active=!1}},e}();function Ye(e){var t=e._provided,n=e.$parent&&e.$parent._provided;return n===t?e._provided=Object.create(n):t}var Qe=T((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),a="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=a?e.slice(1):e,once:n,capture:a,passive:t}}));function Ze(e,t){function n(){var e=n.fns;if(!r(e))return zt(e,null,arguments,t,"v-on handler");for(var a=e.slice(),i=0;i<a.length;i++)zt(a[i],null,arguments,t,"v-on handler")}return n.fns=e,n}function Xe(e,t,n,a,r,o){var l,d,c,u;for(l in e)d=e[l],c=t[l],u=Qe(l),i(d)||(i(c)?(i(d.fns)&&(d=e[l]=Ze(d,o)),s(u.once)&&(d=e[l]=r(u.name,d,u.capture)),n(u.name,d,u.capture,u.passive,u.params)):d!==c&&(c.fns=d,e[l]=c));for(l in t)i(e[l])&&a((u=Qe(l)).name,t[l],u.capture)}function et(e,t,n){var a;e instanceof pe&&(e=e.data.hook||(e.data.hook={}));var r=e[t];function l(){n.apply(this,arguments),b(a.fns,l)}i(r)?a=Ze([l]):o(r.fns)&&s(r.merged)?(a=r).fns.push(l):a=Ze([r,l]),a.merged=!0,e[t]=a}function tt(e,t,n,a,r){if(o(t)){if(k(t,n))return e[n]=t[n],r||delete t[n],!0;if(k(t,a))return e[n]=t[a],r||delete t[a],!0}return!1}function nt(e){return l(e)?[fe(e)]:r(e)?function e(t,n){var a,d,c,u,p=[];for(a=0;a<t.length;a++)i(d=t[a])||"boolean"==typeof d||(c=p.length-1,u=p[c],r(d)?d.length>0&&(at((d=e(d,"".concat(n||"","_").concat(a)))[0])&&at(u)&&(p[c]=fe(u.text+d[0].text),d.shift()),p.push.apply(p,d)):l(d)?at(u)?p[c]=fe(u.text+d):""!==d&&p.push(fe(d)):at(d)&&at(u)?p[c]=fe(u.text+d.text):(s(t._isVList)&&o(d.tag)&&i(d.key)&&o(n)&&(d.key="__vlist".concat(n,"_").concat(a,"__")),p.push(d)));return p}(e):void 0}function at(e){return o(e)&&o(e.text)&&!1===e.isComment}function rt(e,t){var n,a,i,s,l=null;if(r(e)||"string"==typeof e)for(l=new Array(e.length),n=0,a=e.length;n<a;n++)l[n]=t(e[n],n);else if("number"==typeof e)for(l=new Array(e),n=0;n<e;n++)l[n]=t(n+1,n);else if(c(e))if(de&&e[Symbol.iterator]){l=[];for(var d=e[Symbol.iterator](),u=d.next();!u.done;)l.push(t(u.value,l.length)),u=d.next()}else for(i=Object.keys(e),l=new Array(i.length),n=0,a=i.length;n<a;n++)s=i[n],l[n]=t(e[s],s,n);return o(l)||(l=[]),l._isVList=!0,l}function it(e,t,n,a){var r,i=this.$scopedSlots[e];i?(n=n||{},a&&(n=F(F({},a),n)),r=i(n)||(d(t)?t():t)):r=this.$slots[e]||(d(t)?t():t);var o=n&&n.slot;return o?this.$createElement("template",{slot:o},r):r}function ot(e){return Mn(this.$options,"filters",e,!0)||O}function st(e,t){return r(e)?-1===e.indexOf(t):e!==t}function lt(e,t,n,a,r){var i=$.keyCodes[t]||n;return r&&a&&!$.keyCodes[t]?st(r,a):i?st(i,e):a?I(a)!==t:void 0===e}function dt(e,t,n,a,i){if(n)if(c(n)){r(n)&&(n=E(n));var o=void 0,s=function(r){if("class"===r||"style"===r||w(r))o=e;else{var s=e.attrs&&e.attrs.type;o=a||$.mustUseProp(t,s,r)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=j(r),d=I(r);l in o||d in o||(o[r]=n[r],i&&((e.on||(e.on={}))["update:".concat(r)]=function(e){n[r]=e}))};for(var l in n)s(l)}else;return e}function ct(e,t){var n=this._staticTrees||(this._staticTrees=[]),a=n[e];return a&&!t||pt(a=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),a}function ut(e,t,n){return pt(e,"__once__".concat(t).concat(n?"_".concat(n):""),!0),e}function pt(e,t,n){if(r(e))for(var a=0;a<e.length;a++)e[a]&&"string"!=typeof e[a]&&ht(e[a],"".concat(t,"_").concat(a),n);else ht(e,t,n)}function ht(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function ft(e,t){if(t)if(p(t)){var n=e.on=e.on?F({},e.on):{};for(var a in t){var r=n[a],i=t[a];n[a]=r?[].concat(r,i):i}}else;return e}function mt(e,t,n,a){t=t||{$stable:!n};for(var i=0;i<e.length;i++){var o=e[i];r(o)?mt(o,t,n):o&&(o.proxy&&(o.fn.proxy=!0),t[o.key]=o.fn)}return a&&(t.$key=a),t}function vt(e,t){for(var n=0;n<t.length;n+=2){var a=t[n];"string"==typeof a&&a&&(e[t[n]]=t[n+1])}return e}function yt(e,t){return"string"==typeof e?t+e:e}function gt(e){e._o=ut,e._n=y,e._s=v,e._l=rt,e._t=it,e._q=q,e._i=R,e._m=ct,e._f=ot,e._k=lt,e._b=dt,e._v=fe,e._e=he,e._u=mt,e._g=ft,e._d=vt,e._p=yt}function wt(e,t){if(!e||!e.length)return{};for(var n={},a=0,r=e.length;a<r;a++){var i=e[a],o=i.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,i.context!==t&&i.fnContext!==t||!o||null==o.slot)(n.default||(n.default=[])).push(i);else{var s=o.slot,l=n[s]||(n[s]=[]);"template"===i.tag?l.push.apply(l,i.children||[]):l.push(i)}}for(var d in n)n[d].every(bt)&&delete n[d];return n}function bt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function xt(e){return e.isComment&&e.asyncFactory}function kt(e,t,n,r){var i,o=Object.keys(n).length>0,s=t?!!t.$stable:!o,l=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(s&&r&&r!==a&&l===r.$key&&!o&&!r.$hasNormal)return r;for(var d in i={},t)t[d]&&"$"!==d[0]&&(i[d]=Tt(e,n,d,t[d]))}else i={};for(var c in n)c in i||(i[c]=_t(n,c));return t&&Object.isExtensible(t)&&(t._normalized=i),B(i,"$stable",s),B(i,"$key",l),B(i,"$hasNormal",o),i}function Tt(e,t,n,a){var i=function(){var t=ce;ue(e);var n=arguments.length?a.apply(null,arguments):a({}),i=(n=n&&"object"==typeof n&&!r(n)?[n]:nt(n))&&n[0];return ue(t),n&&(!i||1===n.length&&i.isComment&&!xt(i))?void 0:n};return a.proxy&&Object.defineProperty(t,n,{get:i,enumerable:!0,configurable:!0}),i}function _t(e,t){return function(){return e[t]}}function jt(e){return{get attrs(){if(!e._attrsProxy){var t=e._attrsProxy={};B(t,"_v_attr_proxy",!0),At(t,e.$attrs,a,e,"$attrs")}return e._attrsProxy},get listeners(){e._listenersProxy||At(e._listenersProxy={},e.$listeners,a,e,"$listeners");return e._listenersProxy},get slots(){return function(e){e._slotsProxy||It(e._slotsProxy={},e.$scopedSlots);return e._slotsProxy}(e)},emit:C(e.$emit,e),expose:function(t){t&&Object.keys(t).forEach((function(n){return Ne(e,t,n)}))}}}function At(e,t,n,a,r){var i=!1;for(var o in t)o in e?t[o]!==n[o]&&(i=!0):(i=!0,St(e,o,a,r));for(var o in e)o in t||(i=!0,delete e[o]);return i}function St(e,t,n,a){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){return n[a][t]}})}function It(e,t){for(var n in t)e[n]=t[n];for(var n in e)n in t||delete e[n]}var Ct=null;function Dt(e,t){return(e.__esModule||de&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?t.extend(e):e}function Ft(e){if(r(e))for(var t=0;t<e.length;t++){var n=e[t];if(o(n)&&(o(n.componentOptions)||xt(n)))return n}}function Et(e,t,n,a,u,p){return(r(n)||l(n))&&(u=a,a=n,n=void 0),s(p)&&(u=2),function(e,t,n,a,l){if(o(n)&&o(n.__ob__))return he();o(n)&&o(n.is)&&(t=n.is);if(!t)return he();0;r(a)&&d(a[0])&&((n=n||{}).scopedSlots={default:a[0]},a.length=0);2===l?a=nt(a):1===l&&(a=function(e){for(var t=0;t<e.length;t++)if(r(e[t]))return Array.prototype.concat.apply([],e);return e}(a));var u,p;if("string"==typeof t){var h=void 0;p=e.$vnode&&e.$vnode.ns||$.getTagNamespace(t),u=$.isReservedTag(t)?new pe($.parsePlatformTagName(t),n,a,void 0,void 0,e):n&&n.pre||!o(h=Mn(e.$options,"components",t))?new pe(t,n,a,void 0,void 0,e):In(h,n,e,a,t)}else u=In(t,n,e,a);return r(u)?u:o(u)?(o(p)&&function e(t,n,a){t.ns=n,"foreignObject"===t.tag&&(n=void 0,a=!0);if(o(t.children))for(var r=0,l=t.children.length;r<l;r++){var d=t.children[r];o(d.tag)&&(i(d.ns)||s(a)&&"svg"!==d.tag)&&e(d,n,a)}}(u,p),o(n)&&function(e){c(e.style)&&Kt(e.style);c(e.class)&&Kt(e.class)}(n),u):he()}(e,t,n,a,u)}function Pt(e,t,n){be();try{if(t)for(var a=t;a=a.$parent;){var r=a.$options.errorCaptured;if(r)for(var i=0;i<r.length;i++)try{if(!1===r[i].call(a,e,t,n))return}catch(e){Ot(e,a,"errorCaptured hook")}}Ot(e,t,n)}finally{xe()}}function zt(e,t,n,a,r){var i;try{(i=n?e.apply(t,n):e.call(t))&&!i._isVue&&m(i)&&!i._handled&&(i.catch((function(e){return Pt(e,a,r+" (Promise/async)")})),i._handled=!0)}catch(e){Pt(e,a,r)}return i}function Ot(e,t,n){if($.errorHandler)try{return $.errorHandler.call(null,e,t,n)}catch(t){t!==e&&qt(t,null,"config.errorHandler")}qt(e,t,n)}function qt(e,t,n){if(!J||"undefined"==typeof console)throw e;console.error(e)}var Rt,Mt=!1,Lt=[],Ut=!1;function Nt(){Ut=!1;var e=Lt.slice(0);Lt.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&se(Promise)){var $t=Promise.resolve();Rt=function(){$t.then(Nt),X&&setTimeout(P)},Mt=!0}else if(Y||"undefined"==typeof MutationObserver||!se(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Rt="undefined"!=typeof setImmediate&&se(setImmediate)?function(){setImmediate(Nt)}:function(){setTimeout(Nt,0)};else{var Wt=1,Vt=new MutationObserver(Nt),Bt=document.createTextNode(String(Wt));Vt.observe(Bt,{characterData:!0}),Rt=function(){Wt=(Wt+1)%2,Bt.data=String(Wt)},Mt=!0}function Gt(e,t){var n;if(Lt.push((function(){if(e)try{e.call(t)}catch(e){Pt(e,t,"nextTick")}else n&&n(t)})),Ut||(Ut=!0,Rt()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}function Ht(e){return function(t,n){if(void 0===n&&(n=ce),n)return function(e,t,n){var a=e.$options;a[t]=zn(a[t],n)}(n,e,t)}}Ht("beforeMount"),Ht("mounted"),Ht("beforeUpdate"),Ht("updated"),Ht("beforeDestroy"),Ht("destroyed"),Ht("activated"),Ht("deactivated"),Ht("serverPrefetch"),Ht("renderTracked"),Ht("renderTriggered"),Ht("errorCaptured");var Jt=new le;function Kt(e){return function e(t,n){var a,i,o=r(t);if(!o&&!c(t)||t.__v_skip||Object.isFrozen(t)||t instanceof pe)return;if(t.__ob__){var s=t.__ob__.dep.id;if(n.has(s))return;n.add(s)}if(o)for(a=t.length;a--;)e(t[a],n);else if(Ue(t))e(t.value,n);else for(i=Object.keys(t),a=i.length;a--;)e(t[i[a]],n)}(e,Jt),Jt.clear(),e}var Yt,Qt=0,Zt=function(){function e(e,t,n,a,r){var i,o;i=this,void 0===(o=Be&&!Be._vm?Be:e?e._scope:void 0)&&(o=Be),o&&o.active&&o.effects.push(i),(this.vm=e)&&r&&(e._watcher=this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Qt,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new le,this.newDepIds=new le,this.expression="",d(t)?this.getter=t:(this.getter=function(e){if(!G.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=P)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;be(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;Pt(e,t,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Kt(e),xe(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():bn(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var t=this.value;if(this.value=e,this.user){var n='callback for watcher "'.concat(this.expression,'"');zt(this.cb,this.vm,[e,t],this.vm,n)}else this.cb.call(this.vm,e,t)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&b(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}();function Xt(e,t){Yt.$on(e,t)}function en(e,t){Yt.$off(e,t)}function tn(e,t){var n=Yt;return function a(){var r=t.apply(null,arguments);null!==r&&n.$off(e,a)}}function nn(e,t,n){Yt=e,Xe(t,n||{},Xt,en,tn,e),Yt=void 0}var an=null;function rn(e){var t=an;return an=e,function(){an=t}}function on(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function sn(e,t){if(t){if(e._directInactive=!1,on(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)sn(e.$children[n]);ln(e,"activated")}}function ln(e,t,n,a){void 0===a&&(a=!0),be();var r=ce;a&&ue(e);var i=e.$options[t],o="".concat(t," hook");if(i)for(var s=0,l=i.length;s<l;s++)zt(i[s],e,n||null,e,o);e._hasHookEvent&&e.$emit("hook:"+t),a&&ue(r),xe()}var dn=[],cn=[],un={},pn=!1,hn=!1,fn=0;var mn=0,vn=Date.now;if(J&&!Y){var yn=window.performance;yn&&"function"==typeof yn.now&&vn()>document.createEvent("Event").timeStamp&&(vn=function(){return yn.now()})}var gn=function(e,t){if(e.post){if(!t.post)return 1}else if(t.post)return-1;return e.id-t.id};function wn(){var e,t;for(mn=vn(),hn=!0,dn.sort(gn),fn=0;fn<dn.length;fn++)(e=dn[fn]).before&&e.before(),t=e.id,un[t]=null,e.run();var n=cn.slice(),a=dn.slice();fn=dn.length=cn.length=0,un={},pn=hn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,sn(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],a=n.vm;a&&a._watcher===n&&a._isMounted&&!a._isDestroyed&&ln(a,"updated")}}(a),function(){for(var e=0;e<ye.length;e++){var t=ye[e];t.subs=t.subs.filter((function(e){return e})),t._pending=!1}ye.length=0}(),oe&&$.devtools&&oe.emit("flush")}function bn(e){var t=e.id;if(null==un[t]&&(e!==ge.target||!e.noRecurse)){if(un[t]=!0,hn){for(var n=dn.length-1;n>fn&&dn[n].id>e.id;)n--;dn.splice(n+1,0,e)}else dn.push(e);pn||(pn=!0,Gt(wn))}}function xn(e,t){if(e){for(var n=Object.create(null),a=de?Reflect.ownKeys(e):Object.keys(e),r=0;r<a.length;r++){var i=a[r];if("__ob__"!==i){var o=e[i].from;if(o in t._provided)n[i]=t._provided[o];else if("default"in e[i]){var s=e[i].default;n[i]=d(s)?s.call(t):s}else 0}}return n}}function kn(e,t,n,i,o){var l,d=this,c=o.options;k(i,"_uid")?(l=Object.create(i))._original=i:(l=i,i=i._original);var u=s(c._compiled),p=!u;this.data=e,this.props=t,this.children=n,this.parent=i,this.listeners=e.on||a,this.injections=xn(c.inject,i),this.slots=function(){return d.$slots||kt(i,e.scopedSlots,d.$slots=wt(n,i)),d.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return kt(i,e.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=kt(i,e.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,t,n,a){var o=Et(l,e,t,n,a,p);return o&&!r(o)&&(o.fnScopeId=c._scopeId,o.fnContext=i),o}:this._c=function(e,t,n,a){return Et(l,e,t,n,a,p)}}function Tn(e,t,n,a,r){var i=me(e);return i.fnContext=n,i.fnOptions=a,t.slot&&((i.data||(i.data={})).slot=t.slot),i}function _n(e,t){for(var n in t)e[j(n)]=t[n]}function jn(e){return e.name||e.__name||e._componentTag}gt(kn.prototype);var An={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;An.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},a=e.data.inlineTemplate;o(a)&&(n.render=a.render,n.staticRenderFns=a.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,an)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,r,i){var o=r.data.scopedSlots,s=e.$scopedSlots,l=!!(o&&!o.$stable||s!==a&&!s.$stable||o&&e.$scopedSlots.$key!==o.$key||!o&&e.$scopedSlots.$key),d=!!(i||e.$options._renderChildren||l),c=e.$vnode;e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r),e.$options._renderChildren=i;var u=r.data.attrs||a;e._attrsProxy&&At(e._attrsProxy,u,c.data&&c.data.attrs||a,e,"$attrs")&&(d=!0),e.$attrs=u,n=n||a;var p=e.$options._parentListeners;if(e._listenersProxy&&At(e._listenersProxy,n,p||a,e,"$listeners"),e.$listeners=e.$options._parentListeners=n,nn(e,n,p),t&&e.$options.props){Se(!1);for(var h=e._props,f=e.$options._propKeys||[],m=0;m<f.length;m++){var v=f[m],y=e.$options.props;h[v]=Ln(v,y,t,e)}Se(!0),e.$options.propsData=t}d&&(e.$slots=wt(i,r.context),e.$forceUpdate())}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,a=e.componentInstance;a._isMounted||(a._isMounted=!0,ln(a,"mounted")),e.data.keepAlive&&(n._isMounted?((t=a)._inactive=!1,cn.push(t)):sn(a,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(!(n&&(t._directInactive=!0,on(t))||t._inactive)){t._inactive=!0;for(var a=0;a<t.$children.length;a++)e(t.$children[a]);ln(t,"deactivated")}}(t,!0):t.$destroy())}},Sn=Object.keys(An);function In(e,t,n,l,d){if(!i(e)){var u=n.$options._base;if(c(e)&&(e=u.extend(e)),"function"==typeof e){var p;if(i(e.cid)&&void 0===(e=function(e,t){if(s(e.error)&&o(e.errorComp))return e.errorComp;if(o(e.resolved))return e.resolved;var n=Ct;if(n&&o(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n),s(e.loading)&&o(e.loadingComp))return e.loadingComp;if(n&&!o(e.owners)){var a=e.owners=[n],r=!0,l=null,d=null;n.$on("hook:destroyed",(function(){return b(a,n)}));var u=function(e){for(var t=0,n=a.length;t<n;t++)a[t].$forceUpdate();e&&(a.length=0,null!==l&&(clearTimeout(l),l=null),null!==d&&(clearTimeout(d),d=null))},p=M((function(n){e.resolved=Dt(n,t),r?a.length=0:u(!0)})),h=M((function(t){o(e.errorComp)&&(e.error=!0,u(!0))})),f=e(p,h);return c(f)&&(m(f)?i(e.resolved)&&f.then(p,h):m(f.component)&&(f.component.then(p,h),o(f.error)&&(e.errorComp=Dt(f.error,t)),o(f.loading)&&(e.loadingComp=Dt(f.loading,t),0===f.delay?e.loading=!0:l=setTimeout((function(){l=null,i(e.resolved)&&i(e.error)&&(e.loading=!0,u(!1))}),f.delay||200)),o(f.timeout)&&(d=setTimeout((function(){d=null,i(e.resolved)&&h(null)}),f.timeout)))),r=!1,e.loading?e.loadingComp:e.resolved}}(p=e,u)))return function(e,t,n,a,r){var i=he();return i.asyncFactory=e,i.asyncMeta={data:t,context:n,children:a,tag:r},i}(p,t,n,l,d);t=t||{},Xn(e),o(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",a=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var i=t.on||(t.on={}),s=i[a],l=t.model.callback;o(s)?(r(s)?-1===s.indexOf(l):s!==l)&&(i[a]=[l].concat(s)):i[a]=l}(e.options,t);var h=function(e,t,n){var a=t.options.props;if(!i(a)){var r={},s=e.attrs,l=e.props;if(o(s)||o(l))for(var d in a){var c=I(d);tt(r,l,d,c,!0)||tt(r,s,d,c,!1)}return r}}(t,e);if(s(e.options.functional))return function(e,t,n,i,s){var l=e.options,d={},c=l.props;if(o(c))for(var u in c)d[u]=Ln(u,c,t||a);else o(n.attrs)&&_n(d,n.attrs),o(n.props)&&_n(d,n.props);var p=new kn(n,d,s,i,e),h=l.render.call(null,p._c,p);if(h instanceof pe)return Tn(h,n,p.parent,l,p);if(r(h)){for(var f=nt(h)||[],m=new Array(f.length),v=0;v<f.length;v++)m[v]=Tn(f[v],n,p.parent,l,p);return m}}(e,h,t,n,l);var f=t.on;if(t.on=t.nativeOn,s(e.options.abstract)){var v=t.slot;t={},v&&(t.slot=v)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<Sn.length;n++){var a=Sn[n],r=t[a],i=An[a];r===i||r&&r._merged||(t[a]=r?Cn(i,r):i)}}(t);var y=jn(e.options)||d;return new pe("vue-component-".concat(e.cid).concat(y?"-".concat(y):""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:h,listeners:f,tag:d,children:l},p)}}}function Cn(e,t){var n=function(n,a){e(n,a),t(n,a)};return n._merged=!0,n}var Dn=P,Fn=$.optionMergeStrategies;function En(e,t,n){if(void 0===n&&(n=!0),!t)return e;for(var a,r,i,o=de?Reflect.ownKeys(t):Object.keys(t),s=0;s<o.length;s++)"__ob__"!==(a=o[s])&&(r=e[a],i=t[a],n&&k(e,a)?r!==i&&p(r)&&p(i)&&En(r,i):Ee(e,a,i));return e}function Pn(e,t,n){return n?function(){var a=d(t)?t.call(n,n):t,r=d(e)?e.call(n,n):e;return a?En(a,r):r}:t?e?function(){return En(d(t)?t.call(this,this):t,d(e)?e.call(this,this):e)}:t:e}function zn(e,t){var n=t?e?e.concat(t):r(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function On(e,t,n,a){var r=Object.create(e||null);return t?F(r,t):r}Fn.data=function(e,t,n){return n?Pn(e,t,n):t&&"function"!=typeof t?e:Pn(e,t)},N.forEach((function(e){Fn[e]=zn})),U.forEach((function(e){Fn[e+"s"]=On})),Fn.watch=function(e,t,n,a){if(e===ne&&(e=void 0),t===ne&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var i={};for(var o in F(i,e),t){var s=i[o],l=t[o];s&&!r(s)&&(s=[s]),i[o]=s?s.concat(l):r(l)?l:[l]}return i},Fn.props=Fn.methods=Fn.inject=Fn.computed=function(e,t,n,a){if(!e)return t;var r=Object.create(null);return F(r,e),t&&F(r,t),r},Fn.provide=function(e,t){return e?function(){var n=Object.create(null);return En(n,d(e)?e.call(this):e),t&&En(n,d(t)?t.call(this):t,!1),n}:t};var qn=function(e,t){return void 0===t?e:t};function Rn(e,t,n){if(d(t)&&(t=t.options),function(e,t){var n=e.props;if(n){var a,i,o={};if(r(n))for(a=n.length;a--;)"string"==typeof(i=n[a])&&(o[j(i)]={type:null});else if(p(n))for(var s in n)i=n[s],o[j(s)]=p(i)?i:{type:i};else 0;e.props=o}}(t),function(e,t){var n=e.inject;if(n){var a=e.inject={};if(r(n))for(var i=0;i<n.length;i++)a[n[i]]={from:n[i]};else if(p(n))for(var o in n){var s=n[o];a[o]=p(s)?F({from:o},s):{from:s}}else 0}}(t),function(e){var t=e.directives;if(t)for(var n in t){var a=t[n];d(a)&&(t[n]={bind:a,update:a})}}(t),!t._base&&(t.extends&&(e=Rn(e,t.extends,n)),t.mixins))for(var a=0,i=t.mixins.length;a<i;a++)e=Rn(e,t.mixins[a],n);var o,s={};for(o in e)l(o);for(o in t)k(e,o)||l(o);function l(a){var r=Fn[a]||qn;s[a]=r(e[a],t[a],n,a)}return s}function Mn(e,t,n,a){if("string"==typeof n){var r=e[t];if(k(r,n))return r[n];var i=j(n);if(k(r,i))return r[i];var o=A(i);return k(r,o)?r[o]:r[n]||r[i]||r[o]}}function Ln(e,t,n,a){var r=t[e],i=!k(n,e),o=n[e],s=Wn(Boolean,r.type);if(s>-1)if(i&&!k(r,"default"))o=!1;else if(""===o||o===I(e)){var l=Wn(String,r.type);(l<0||s<l)&&(o=!0)}if(void 0===o){o=function(e,t,n){if(!k(t,"default"))return;var a=t.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return d(a)&&"Function"!==Nn(t.type)?a.call(e):a}(a,r,e);var c=Ae;Se(!0),De(o),Se(c)}return o}var Un=/^\s*function (\w+)/;function Nn(e){var t=e&&e.toString().match(Un);return t?t[1]:""}function $n(e,t){return Nn(e)===Nn(t)}function Wn(e,t){if(!r(t))return $n(t,e)?0:-1;for(var n=0,a=t.length;n<a;n++)if($n(t[n],e))return n;return-1}var Vn={enumerable:!0,configurable:!0,get:P,set:P};function Bn(e,t,n){Vn.get=function(){return this[t][n]},Vn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Vn)}function Gn(e){var t=e.$options;if(t.props&&function(e,t){var n=e.$options.propsData||{},a=e._props=Oe({}),r=e.$options._propKeys=[];e.$parent&&Se(!1);var i=function(i){r.push(i);var o=Ln(i,t,n,e);Fe(a,i,o),i in e||Bn(e,"_props",i)};for(var o in t)i(o);Se(!0)}(e,t.props),function(e){var t=e.$options,n=t.setup;if(n){var a=e._setupContext=jt(e);ue(e),be();var r=zt(n,null,[e._props||Oe({}),a],e,"setup");if(xe(),ue(),d(r))t.render=r;else if(c(r))if(e._setupState=r,r.__sfc){var i=e._setupProxy={};for(var o in r)"__sfc"!==o&&Ne(i,r,o)}else for(var o in r)V(o)||Ne(e,r,o);else 0}}(e),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?P:C(t[n],e)}(e,t.methods),t.data)!function(e){var t=e.$options.data;p(t=e._data=d(t)?function(e,t){be();try{return e.call(t,t)}catch(e){return Pt(e,t,"data()"),{}}finally{xe()}}(t,e):t||{})||(t={});var n=Object.keys(t),a=e.$options.props,r=(e.$options.methods,n.length);for(;r--;){var i=n[r];0,a&&k(a,i)||V(i)||Bn(e,"_data",i)}var o=De(t);o&&o.vmCount++}(e);else{var n=De(e._data={});n&&n.vmCount++}t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),a=ie();for(var r in t){var i=t[r],o=d(i)?i:i.get;0,a||(n[r]=new Zt(e,o||P,P,Hn)),r in e||Jn(e,r,i)}}(e,t.computed),t.watch&&t.watch!==ne&&function(e,t){for(var n in t){var a=t[n];if(r(a))for(var i=0;i<a.length;i++)Qn(e,n,a[i]);else Qn(e,n,a)}}(e,t.watch)}var Hn={lazy:!0};function Jn(e,t,n){var a=!ie();d(n)?(Vn.get=a?Kn(t):Yn(n),Vn.set=P):(Vn.get=n.get?a&&!1!==n.cache?Kn(t):Yn(n.get):P,Vn.set=n.set||P),Object.defineProperty(e,t,Vn)}function Kn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ge.target&&t.depend(),t.value}}function Yn(e){return function(){return e.call(this,this)}}function Qn(e,t,n,a){return p(n)&&(a=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,a)}var Zn=0;function Xn(e){var t=e.options;if(e.super){var n=Xn(e.super);if(n!==e.superOptions){e.superOptions=n;var a=function(e){var t,n=e.options,a=e.sealedOptions;for(var r in n)n[r]!==a[r]&&(t||(t={}),t[r]=n[r]);return t}(e);a&&F(e.extendOptions,a),(t=e.options=Rn(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function ea(e){this._init(e)}function ta(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,a=n.cid,r=e._Ctor||(e._Ctor={});if(r[a])return r[a];var i=jn(e)||jn(n.options);var o=function(e){this._init(e)};return(o.prototype=Object.create(n.prototype)).constructor=o,o.cid=t++,o.options=Rn(n.options,e),o.super=n,o.options.props&&function(e){var t=e.options.props;for(var n in t)Bn(e.prototype,"_props",n)}(o),o.options.computed&&function(e){var t=e.options.computed;for(var n in t)Jn(e.prototype,n,t[n])}(o),o.extend=n.extend,o.mixin=n.mixin,o.use=n.use,U.forEach((function(e){o[e]=n[e]})),i&&(o.options.components[i]=o),o.superOptions=n.options,o.extendOptions=e,o.sealedOptions=F({},o.options),r[a]=o,o}}function na(e){return e&&(jn(e.Ctor.options)||e.tag)}function aa(e,t){return r(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!h(e)&&e.test(t)}function ra(e,t){var n=e.cache,a=e.keys,r=e._vnode;for(var i in n){var o=n[i];if(o){var s=o.name;s&&!t(s)&&ia(n,i,a,r)}}}function ia(e,t,n,a){var r=e[t];!r||a&&r.tag===a.tag||r.componentInstance.$destroy(),e[t]=null,b(n,t)}ea.prototype._init=function(e){var t=this;t._uid=Zn++,t._isVue=!0,t.__v_skip=!0,t._scope=new Ke(!0),t._scope._vm=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),a=t._parentVnode;n.parent=t.parent,n._parentVnode=a;var r=a.componentOptions;n.propsData=r.propsData,n._parentListeners=r.listeners,n._renderChildren=r.children,n._componentTag=r.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=Rn(Xn(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._provided=n?n._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&nn(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,r=n&&n.context;e.$slots=wt(t._renderChildren,r),e.$scopedSlots=n?kt(e.$parent,n.data.scopedSlots,e.$slots):a,e._c=function(t,n,a,r){return Et(e,t,n,a,r,!1)},e.$createElement=function(t,n,a,r){return Et(e,t,n,a,r,!0)};var i=n&&n.data;Fe(e,"$attrs",i&&i.attrs||a,null,!0),Fe(e,"$listeners",t._parentListeners||a,null,!0)}(t),ln(t,"beforeCreate",void 0,!1),function(e){var t=xn(e.$options.inject,e);t&&(Se(!1),Object.keys(t).forEach((function(n){Fe(e,n,t[n])})),Se(!0))}(t),Gn(t),function(e){var t=e.$options.provide;if(t){var n=d(t)?t.call(e):t;if(!c(n))return;for(var a=Ye(e),r=de?Reflect.ownKeys(n):Object.keys(n),i=0;i<r.length;i++){var o=r[i];Object.defineProperty(a,o,Object.getOwnPropertyDescriptor(n,o))}}}(t),ln(t,"created"),t.$options.el&&t.$mount(t.$options.el)},function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Ee,e.prototype.$delete=Pe,e.prototype.$watch=function(e,t,n){if(p(t))return Qn(this,e,t,n);(n=n||{}).user=!0;var a=new Zt(this,e,t,n);if(n.immediate){var r='callback for immediate watcher "'.concat(a.expression,'"');be(),zt(t,this,[a.value],this,r),xe()}return function(){a.teardown()}}}(ea),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var a=this;if(r(e))for(var i=0,o=e.length;i<o;i++)a.$on(e[i],n);else(a._events[e]||(a._events[e]=[])).push(n),t.test(e)&&(a._hasHookEvent=!0);return a},e.prototype.$once=function(e,t){var n=this;function a(){n.$off(e,a),t.apply(n,arguments)}return a.fn=t,n.$on(e,a),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(r(e)){for(var a=0,i=e.length;a<i;a++)n.$off(e[a],t);return n}var o,s=n._events[e];if(!s)return n;if(!t)return n._events[e]=null,n;for(var l=s.length;l--;)if((o=s[l])===t||o.fn===t){s.splice(l,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?D(n):n;for(var a=D(arguments,1),r='event handler for "'.concat(e,'"'),i=0,o=n.length;i<o;i++)zt(n[i],t,a,t,r)}return t}}(ea),function(e){e.prototype._update=function(e,t){var n=this,a=n.$el,r=n._vnode,i=rn(n);n._vnode=e,n.$el=r?n.__patch__(r,e):n.__patch__(n.$el,e,t,!1),i(),a&&(a.__vue__=null),n.$el&&(n.$el.__vue__=n);for(var o=n;o&&o.$vnode&&o.$parent&&o.$vnode===o.$parent._vnode;)o.$parent.$el=o.$el,o=o.$parent},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){ln(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||b(t.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),ln(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(ea),function(e){gt(e.prototype),e.prototype.$nextTick=function(e){return Gt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,a=n.render,i=n._parentVnode;i&&t._isMounted&&(t.$scopedSlots=kt(t.$parent,i.data.scopedSlots,t.$slots,t.$scopedSlots),t._slotsProxy&&It(t._slotsProxy,t.$scopedSlots)),t.$vnode=i;try{ue(t),Ct=t,e=a.call(t._renderProxy,t.$createElement)}catch(n){Pt(n,t,"render"),e=t._vnode}finally{Ct=null,ue()}return r(e)&&1===e.length&&(e=e[0]),e instanceof pe||(e=he()),e.parent=i,e}}(ea);var oa=[String,RegExp,Array],sa={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:oa,exclude:oa,max:[String,Number]},methods:{cacheVNode:function(){var e=this.cache,t=this.keys,n=this.vnodeToCache,a=this.keyToCache;if(n){var r=n.tag,i=n.componentInstance,o=n.componentOptions;e[a]={name:na(o),tag:r,componentInstance:i},t.push(a),this.max&&t.length>parseInt(this.max)&&ia(e,t[0],t,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)ia(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){ra(e,(function(e){return aa(t,e)}))})),this.$watch("exclude",(function(t){ra(e,(function(e){return!aa(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=Ft(e),n=t&&t.componentOptions;if(n){var a=na(n),r=this.include,i=this.exclude;if(r&&(!a||!aa(r,a))||i&&a&&aa(i,a))return t;var o=this.cache,s=this.keys,l=null==t.key?n.Ctor.cid+(n.tag?"::".concat(n.tag):""):t.key;o[l]?(t.componentInstance=o[l].componentInstance,b(s,l),s.push(l)):(this.vnodeToCache=t,this.keyToCache=l),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return $}};Object.defineProperty(e,"config",t),e.util={warn:Dn,extend:F,mergeOptions:Rn,defineReactive:Fe},e.set=Ee,e.delete=Pe,e.nextTick=Gt,e.observable=function(e){return De(e),e},e.options=Object.create(null),U.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,F(e.options.components,sa),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=D(arguments,1);return n.unshift(this),d(e.install)?e.install.apply(e,n):d(e)&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Rn(this.options,e),this}}(e),ta(e),function(e){U.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&p(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&d(n)&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(ea),Object.defineProperty(ea.prototype,"$isServer",{get:ie}),Object.defineProperty(ea.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(ea,"FunctionalRenderContext",{value:kn}),ea.version="2.7.14";var la=g("style,class"),da=g("input,textarea,option,select,progress"),ca=g("contenteditable,draggable,spellcheck"),ua=g("events,caret,typing,plaintext-only"),pa=g("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ha="http://www.w3.org/1999/xlink",fa=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},ma=function(e){return fa(e)?e.slice(6,e.length):""},va=function(e){return null==e||!1===e};function ya(e){for(var t=e.data,n=e,a=e;o(a.componentInstance);)(a=a.componentInstance._vnode)&&a.data&&(t=ga(a.data,t));for(;o(n=n.parent);)n&&n.data&&(t=ga(t,n.data));return function(e,t){if(o(e)||o(t))return wa(e,ba(t));return""}(t.staticClass,t.class)}function ga(e,t){return{staticClass:wa(e.staticClass,t.staticClass),class:o(e.class)?[e.class,t.class]:t.class}}function wa(e,t){return e?t?e+" "+t:e:t||""}function ba(e){return Array.isArray(e)?function(e){for(var t,n="",a=0,r=e.length;a<r;a++)o(t=ba(e[a]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):c(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var xa={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},ka=g("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Ta=g("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),_a=function(e){return ka(e)||Ta(e)};var ja=Object.create(null);var Aa=g("text,number,password,search,email,tel,url");var Sa=Object.freeze({__proto__:null,createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(xa[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Ia={create:function(e,t){Ca(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Ca(e,!0),Ca(t))},destroy:function(e){Ca(e,!0)}};function Ca(e,t){var n=e.data.ref;if(o(n)){var a=e.context,i=e.componentInstance||e.elm,s=t?null:i,l=t?void 0:i;if(d(n))zt(n,a,[s],a,"template ref function");else{var c=e.data.refInFor,u="string"==typeof n||"number"==typeof n,p=Ue(n),h=a.$refs;if(u||p)if(c){var f=u?h[n]:n.value;t?r(f)&&b(f,i):r(f)?f.includes(i)||f.push(i):u?(h[n]=[i],Da(a,n,h[n])):n.value=[i]}else if(u){if(t&&h[n]!==i)return;h[n]=l,Da(a,n,s)}else if(p){if(t&&n.value!==i)return;n.value=s}else 0}}}function Da(e,t,n){var a=e._setupState;a&&k(a,t)&&(Ue(a[t])?a[t].value=n:a[t]=n)}var Fa=new pe("",{},[]),Ea=["create","activate","update","remove","destroy"];function Pa(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&o(e.data)===o(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,a=o(n=e.data)&&o(n=n.attrs)&&n.type,r=o(n=t.data)&&o(n=n.attrs)&&n.type;return a===r||Aa(a)&&Aa(r)}(e,t)||s(e.isAsyncPlaceholder)&&i(t.asyncFactory.error))}function za(e,t,n){var a,r,i={};for(a=t;a<=n;++a)o(r=e[a].key)&&(i[r]=a);return i}var Oa={create:qa,update:qa,destroy:function(e){qa(e,Fa)}};function qa(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,a,r,i=e===Fa,o=t===Fa,s=Ma(e.data.directives,e.context),l=Ma(t.data.directives,t.context),d=[],c=[];for(n in l)a=s[n],r=l[n],a?(r.oldValue=a.value,r.oldArg=a.arg,Ua(r,"update",t,e),r.def&&r.def.componentUpdated&&c.push(r)):(Ua(r,"bind",t,e),r.def&&r.def.inserted&&d.push(r));if(d.length){var u=function(){for(var n=0;n<d.length;n++)Ua(d[n],"inserted",t,e)};i?et(t,"insert",u):u()}c.length&&et(t,"postpatch",(function(){for(var n=0;n<c.length;n++)Ua(c[n],"componentUpdated",t,e)}));if(!i)for(n in s)l[n]||Ua(s[n],"unbind",e,e,o)}(e,t)}var Ra=Object.create(null);function Ma(e,t){var n,a,r=Object.create(null);if(!e)return r;for(n=0;n<e.length;n++){if((a=e[n]).modifiers||(a.modifiers=Ra),r[La(a)]=a,t._setupState&&t._setupState.__sfc){var i=a.def||Mn(t,"_setupState","v-"+a.name);a.def="function"==typeof i?{bind:i,update:i}:i}a.def=a.def||Mn(t.$options,"directives",a.name)}return r}function La(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function Ua(e,t,n,a,r){var i=e.def&&e.def[t];if(i)try{i(n.elm,e,n,a,r)}catch(a){Pt(a,n.context,"directive ".concat(e.name," ").concat(t," hook"))}}var Na=[Ia,Oa];function $a(e,t){var n=t.componentOptions;if(!(o(n)&&!1===n.Ctor.options.inheritAttrs||i(e.data.attrs)&&i(t.data.attrs))){var a,r,l=t.elm,d=e.data.attrs||{},c=t.data.attrs||{};for(a in(o(c.__ob__)||s(c._v_attr_proxy))&&(c=t.data.attrs=F({},c)),c)r=c[a],d[a]!==r&&Wa(l,a,r,t.data.pre);for(a in(Y||Z)&&c.value!==d.value&&Wa(l,"value",c.value),d)i(c[a])&&(fa(a)?l.removeAttributeNS(ha,ma(a)):ca(a)||l.removeAttribute(a))}}function Wa(e,t,n,a){a||e.tagName.indexOf("-")>-1?Va(e,t,n):pa(t)?va(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):ca(t)?e.setAttribute(t,function(e,t){return va(t)||"false"===t?"false":"contenteditable"===e&&ua(t)?t:"true"}(t,n)):fa(t)?va(n)?e.removeAttributeNS(ha,ma(t)):e.setAttributeNS(ha,t,n):Va(e,t,n)}function Va(e,t,n){if(va(n))e.removeAttribute(t);else{if(Y&&!Q&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var a=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",a)};e.addEventListener("input",a),e.__ieph=!0}e.setAttribute(t,n)}}var Ba={create:$a,update:$a};function Ga(e,t){var n=t.elm,a=t.data,r=e.data;if(!(i(a.staticClass)&&i(a.class)&&(i(r)||i(r.staticClass)&&i(r.class)))){var s=ya(t),l=n._transitionClasses;o(l)&&(s=wa(s,ba(l))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var Ha,Ja={create:Ga,update:Ga};function Ka(e,t,n){var a=Ha;return function r(){var i=t.apply(null,arguments);null!==i&&Za(e,r,n,a)}}var Ya=Mt&&!(te&&Number(te[1])<=53);function Qa(e,t,n,a){if(Ya){var r=mn,i=t;t=i._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=r||e.timeStamp<=0||e.target.ownerDocument!==document)return i.apply(this,arguments)}}Ha.addEventListener(e,t,ae?{capture:n,passive:a}:n)}function Za(e,t,n,a){(a||Ha).removeEventListener(e,t._wrapper||t,n)}function Xa(e,t){if(!i(e.data.on)||!i(t.data.on)){var n=t.data.on||{},a=e.data.on||{};Ha=t.elm||e.elm,function(e){if(o(e.__r)){var t=Y?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}o(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),Xe(n,a,Qa,Za,Ka,t.context),Ha=void 0}}var er,tr={create:Xa,update:Xa,destroy:function(e){return Xa(e,Fa)}};function nr(e,t){if(!i(e.data.domProps)||!i(t.data.domProps)){var n,a,r=t.elm,l=e.data.domProps||{},d=t.data.domProps||{};for(n in(o(d.__ob__)||s(d._v_attr_proxy))&&(d=t.data.domProps=F({},d)),l)n in d||(r[n]="");for(n in d){if(a=d[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),a===l[n])continue;1===r.childNodes.length&&r.removeChild(r.childNodes[0])}if("value"===n&&"PROGRESS"!==r.tagName){r._value=a;var c=i(a)?"":String(a);ar(r,c)&&(r.value=c)}else if("innerHTML"===n&&Ta(r.tagName)&&i(r.innerHTML)){(er=er||document.createElement("div")).innerHTML="<svg>".concat(a,"</svg>");for(var u=er.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;u.firstChild;)r.appendChild(u.firstChild)}else if(a!==l[n])try{r[n]=a}catch(e){}}}}function ar(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,a=e._vModifiers;if(o(a)){if(a.number)return y(n)!==y(t);if(a.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var rr={create:nr,update:nr},ir=T((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var a=e.split(n);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}));function or(e){var t=sr(e.style);return e.staticStyle?F(e.staticStyle,t):t}function sr(e){return Array.isArray(e)?E(e):"string"==typeof e?ir(e):e}var lr,dr=/^--/,cr=/\s*!important$/,ur=function(e,t,n){if(dr.test(t))e.style.setProperty(t,n);else if(cr.test(n))e.style.setProperty(I(t),n.replace(cr,""),"important");else{var a=hr(t);if(Array.isArray(n))for(var r=0,i=n.length;r<i;r++)e.style[a]=n[r];else e.style[a]=n}},pr=["Webkit","Moz","ms"],hr=T((function(e){if(lr=lr||document.createElement("div").style,"filter"!==(e=j(e))&&e in lr)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<pr.length;n++){var a=pr[n]+t;if(a in lr)return a}}));function fr(e,t){var n=t.data,a=e.data;if(!(i(n.staticStyle)&&i(n.style)&&i(a.staticStyle)&&i(a.style))){var r,s,l=t.elm,d=a.staticStyle,c=a.normalizedStyle||a.style||{},u=d||c,p=sr(t.data.style)||{};t.data.normalizedStyle=o(p.__ob__)?F({},p):p;var h=function(e,t){var n,a={};if(t)for(var r=e;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(n=or(r.data))&&F(a,n);(n=or(e.data))&&F(a,n);for(var i=e;i=i.parent;)i.data&&(n=or(i.data))&&F(a,n);return a}(t,!0);for(s in u)i(h[s])&&ur(l,s,"");for(s in h)(r=h[s])!==u[s]&&ur(l,s,null==r?"":r)}}var mr={create:fr,update:fr},vr=/\s+/;function yr(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(vr).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" ".concat(e.getAttribute("class")||""," ");n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function gr(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(vr).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" ".concat(e.getAttribute("class")||""," "),a=" "+t+" ";n.indexOf(a)>=0;)n=n.replace(a," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function wr(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&F(t,br(e.name||"v")),F(t,e),t}return"string"==typeof e?br(e):void 0}}var br=T((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),xr=J&&!Q,kr="transition",Tr="transitionend",_r="animation",jr="animationend";xr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(kr="WebkitTransition",Tr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(_r="WebkitAnimation",jr="webkitAnimationEnd"));var Ar=J?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Sr(e){Ar((function(){Ar(e)}))}function Ir(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),yr(e,t))}function Cr(e,t){e._transitionClasses&&b(e._transitionClasses,t),gr(e,t)}function Dr(e,t,n){var a=Er(e,t),r=a.type,i=a.timeout,o=a.propCount;if(!r)return n();var s="transition"===r?Tr:jr,l=0,d=function(){e.removeEventListener(s,c),n()},c=function(t){t.target===e&&++l>=o&&d()};setTimeout((function(){l<o&&d()}),i+1),e.addEventListener(s,c)}var Fr=/\b(transform|all)(,|$)/;function Er(e,t){var n,a=window.getComputedStyle(e),r=(a[kr+"Delay"]||"").split(", "),i=(a[kr+"Duration"]||"").split(", "),o=Pr(r,i),s=(a[_r+"Delay"]||"").split(", "),l=(a[_r+"Duration"]||"").split(", "),d=Pr(s,l),c=0,u=0;return"transition"===t?o>0&&(n="transition",c=o,u=i.length):"animation"===t?d>0&&(n="animation",c=d,u=l.length):u=(n=(c=Math.max(o,d))>0?o>d?"transition":"animation":null)?"transition"===n?i.length:l.length:0,{type:n,timeout:c,propCount:u,hasTransform:"transition"===n&&Fr.test(a[kr+"Property"])}}function Pr(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return zr(t)+zr(e[n])})))}function zr(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Or(e,t){var n=e.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var a=wr(e.data.transition);if(!i(a)&&!o(n._enterCb)&&1===n.nodeType){for(var r=a.css,s=a.type,l=a.enterClass,u=a.enterToClass,p=a.enterActiveClass,h=a.appearClass,f=a.appearToClass,m=a.appearActiveClass,v=a.beforeEnter,g=a.enter,w=a.afterEnter,b=a.enterCancelled,x=a.beforeAppear,k=a.appear,T=a.afterAppear,_=a.appearCancelled,j=a.duration,A=an,S=an.$vnode;S&&S.parent;)A=S.context,S=S.parent;var I=!A._isMounted||!e.isRootInsert;if(!I||k||""===k){var C=I&&h?h:l,D=I&&m?m:p,F=I&&f?f:u,E=I&&x||v,P=I&&d(k)?k:g,z=I&&T||w,O=I&&_||b,q=y(c(j)?j.enter:j);0;var R=!1!==r&&!Q,L=Mr(P),U=n._enterCb=M((function(){R&&(Cr(n,F),Cr(n,D)),U.cancelled?(R&&Cr(n,C),O&&O(n)):z&&z(n),n._enterCb=null}));e.data.show||et(e,"insert",(function(){var t=n.parentNode,a=t&&t._pending&&t._pending[e.key];a&&a.tag===e.tag&&a.elm._leaveCb&&a.elm._leaveCb(),P&&P(n,U)})),E&&E(n),R&&(Ir(n,C),Ir(n,D),Sr((function(){Cr(n,C),U.cancelled||(Ir(n,F),L||(Rr(q)?setTimeout(U,q):Dr(n,s,U)))}))),e.data.show&&(t&&t(),P&&P(n,U)),R||L||U()}}}function qr(e,t){var n=e.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var a=wr(e.data.transition);if(i(a)||1!==n.nodeType)return t();if(!o(n._leaveCb)){var r=a.css,s=a.type,l=a.leaveClass,d=a.leaveToClass,u=a.leaveActiveClass,p=a.beforeLeave,h=a.leave,f=a.afterLeave,m=a.leaveCancelled,v=a.delayLeave,g=a.duration,w=!1!==r&&!Q,b=Mr(h),x=y(c(g)?g.leave:g);0;var k=n._leaveCb=M((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),w&&(Cr(n,d),Cr(n,u)),k.cancelled?(w&&Cr(n,l),m&&m(n)):(t(),f&&f(n)),n._leaveCb=null}));v?v(T):T()}function T(){k.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),p&&p(n),w&&(Ir(n,l),Ir(n,u),Sr((function(){Cr(n,l),k.cancelled||(Ir(n,d),b||(Rr(x)?setTimeout(k,x):Dr(n,s,k)))}))),h&&h(n,k),w||b||k())}}function Rr(e){return"number"==typeof e&&!isNaN(e)}function Mr(e){if(i(e))return!1;var t=e.fns;return o(t)?Mr(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Lr(e,t){!0!==t.data.show&&Or(t)}var Ur=function(e){var t,n,a={},d=e.modules,c=e.nodeOps;for(t=0;t<Ea.length;++t)for(a[Ea[t]]=[],n=0;n<d.length;++n)o(d[n][Ea[t]])&&a[Ea[t]].push(d[n][Ea[t]]);function u(e){var t=c.parentNode(e);o(t)&&c.removeChild(t,e)}function p(e,t,n,r,i,l,d){if(o(e.elm)&&o(l)&&(e=l[d]=me(e)),e.isRootInsert=!i,!function(e,t,n,r){var i=e.data;if(o(i)){var l=o(e.componentInstance)&&i.keepAlive;if(o(i=i.hook)&&o(i=i.init)&&i(e,!1),o(e.componentInstance))return h(e,t),f(n,e.elm,r),s(l)&&function(e,t,n,r){var i,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<a.activate.length;++i)a.activate[i](Fa,s);t.push(s);break}f(n,e.elm,r)}(e,t,n,r),!0}}(e,t,n,r)){var u=e.data,p=e.children,v=e.tag;o(v)?(e.elm=e.ns?c.createElementNS(e.ns,v):c.createElement(v,e),w(e),m(e,p,t),o(u)&&y(e,t),f(n,e.elm,r)):s(e.isComment)?(e.elm=c.createComment(e.text),f(n,e.elm,r)):(e.elm=c.createTextNode(e.text),f(n,e.elm,r))}}function h(e,t){o(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,v(e)?(y(e,t),w(e)):(Ca(e),t.push(e))}function f(e,t,n){o(e)&&(o(n)?c.parentNode(n)===e&&c.insertBefore(e,t,n):c.appendChild(e,t))}function m(e,t,n){if(r(t)){0;for(var a=0;a<t.length;++a)p(t[a],n,e.elm,null,!0,t,a)}else l(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function v(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return o(e.tag)}function y(e,n){for(var r=0;r<a.create.length;++r)a.create[r](Fa,e);o(t=e.data.hook)&&(o(t.create)&&t.create(Fa,e),o(t.insert)&&n.push(e))}function w(e){var t;if(o(t=e.fnScopeId))c.setStyleScope(e.elm,t);else for(var n=e;n;)o(t=n.context)&&o(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t),n=n.parent;o(t=an)&&t!==e.context&&t!==e.fnContext&&o(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t)}function b(e,t,n,a,r,i){for(;a<=r;++a)p(n[a],i,e,t,!1,n,a)}function x(e){var t,n,r=e.data;if(o(r))for(o(t=r.hook)&&o(t=t.destroy)&&t(e),t=0;t<a.destroy.length;++t)a.destroy[t](e);if(o(t=e.children))for(n=0;n<e.children.length;++n)x(e.children[n])}function k(e,t,n){for(;t<=n;++t){var a=e[t];o(a)&&(o(a.tag)?(T(a),x(a)):u(a.elm))}}function T(e,t){if(o(t)||o(e.data)){var n,r=a.remove.length+1;for(o(t)?t.listeners+=r:t=function(e,t){function n(){0==--n.listeners&&u(e)}return n.listeners=t,n}(e.elm,r),o(n=e.componentInstance)&&o(n=n._vnode)&&o(n.data)&&T(n,t),n=0;n<a.remove.length;++n)a.remove[n](e,t);o(n=e.data.hook)&&o(n=n.remove)?n(e,t):t()}else u(e.elm)}function _(e,t,n,a){for(var r=n;r<a;r++){var i=t[r];if(o(i)&&Pa(e,i))return r}}function j(e,t,n,r,l,d){if(e!==t){o(t.elm)&&o(r)&&(t=r[l]=me(t));var u=t.elm=e.elm;if(s(e.isAsyncPlaceholder))o(t.asyncFactory.resolved)?I(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(s(t.isStatic)&&s(e.isStatic)&&t.key===e.key&&(s(t.isCloned)||s(t.isOnce)))t.componentInstance=e.componentInstance;else{var h,f=t.data;o(f)&&o(h=f.hook)&&o(h=h.prepatch)&&h(e,t);var m=e.children,y=t.children;if(o(f)&&v(t)){for(h=0;h<a.update.length;++h)a.update[h](e,t);o(h=f.hook)&&o(h=h.update)&&h(e,t)}i(t.text)?o(m)&&o(y)?m!==y&&function(e,t,n,a,r){var s,l,d,u=0,h=0,f=t.length-1,m=t[0],v=t[f],y=n.length-1,g=n[0],w=n[y],x=!r;for(0;u<=f&&h<=y;)i(m)?m=t[++u]:i(v)?v=t[--f]:Pa(m,g)?(j(m,g,a,n,h),m=t[++u],g=n[++h]):Pa(v,w)?(j(v,w,a,n,y),v=t[--f],w=n[--y]):Pa(m,w)?(j(m,w,a,n,y),x&&c.insertBefore(e,m.elm,c.nextSibling(v.elm)),m=t[++u],w=n[--y]):Pa(v,g)?(j(v,g,a,n,h),x&&c.insertBefore(e,v.elm,m.elm),v=t[--f],g=n[++h]):(i(s)&&(s=za(t,u,f)),i(l=o(g.key)?s[g.key]:_(g,t,u,f))?p(g,a,e,m.elm,!1,n,h):Pa(d=t[l],g)?(j(d,g,a,n,h),t[l]=void 0,x&&c.insertBefore(e,d.elm,m.elm)):p(g,a,e,m.elm,!1,n,h),g=n[++h]);u>f?b(e,i(n[y+1])?null:n[y+1].elm,n,h,y,a):h>y&&k(t,u,f)}(u,m,y,n,d):o(y)?(o(e.text)&&c.setTextContent(u,""),b(u,null,y,0,y.length-1,n)):o(m)?k(m,0,m.length-1):o(e.text)&&c.setTextContent(u,""):e.text!==t.text&&c.setTextContent(u,t.text),o(f)&&o(h=f.hook)&&o(h=h.postpatch)&&h(e,t)}}}function A(e,t,n){if(s(n)&&o(e.parent))e.parent.data.pendingInsert=t;else for(var a=0;a<t.length;++a)t[a].data.hook.insert(t[a])}var S=g("attrs,class,staticClass,staticStyle,key");function I(e,t,n,a){var r,i=t.tag,l=t.data,d=t.children;if(a=a||l&&l.pre,t.elm=e,s(t.isComment)&&o(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(o(l)&&(o(r=l.hook)&&o(r=r.init)&&r(t,!0),o(r=t.componentInstance)))return h(t,n),!0;if(o(i)){if(o(d))if(e.hasChildNodes())if(o(r=l)&&o(r=r.domProps)&&o(r=r.innerHTML)){if(r!==e.innerHTML)return!1}else{for(var c=!0,u=e.firstChild,p=0;p<d.length;p++){if(!u||!I(u,d[p],n,a)){c=!1;break}u=u.nextSibling}if(!c||u)return!1}else m(t,d,n);if(o(l)){var f=!1;for(var v in l)if(!S(v)){f=!0,y(t,n);break}!f&&l.class&&Kt(l.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,r){if(!i(t)){var l,d=!1,u=[];if(i(e))d=!0,p(t,u);else{var h=o(e.nodeType);if(!h&&Pa(e,t))j(e,t,u,null,null,r);else{if(h){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),n=!0),s(n)&&I(e,t,u))return A(t,u,!0),e;l=e,e=new pe(c.tagName(l).toLowerCase(),{},[],void 0,l)}var f=e.elm,m=c.parentNode(f);if(p(t,u,f._leaveCb?null:m,c.nextSibling(f)),o(t.parent))for(var y=t.parent,g=v(t);y;){for(var w=0;w<a.destroy.length;++w)a.destroy[w](y);if(y.elm=t.elm,g){for(var b=0;b<a.create.length;++b)a.create[b](Fa,y);var T=y.data.hook.insert;if(T.merged)for(var _=1;_<T.fns.length;_++)T.fns[_]()}else Ca(y);y=y.parent}o(m)?k([e],0,0):o(e.tag)&&x(e)}}return A(t,u,d),t.elm}o(e)&&x(e)}}({nodeOps:Sa,modules:[Ba,Ja,tr,rr,mr,J?{create:Lr,activate:Lr,remove:function(e,t){!0!==e.data.show?qr(e,t):t()}}:{}].concat(Na)});Q&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&Jr(e,"input")}));var Nr={inserted:function(e,t,n,a){"select"===n.tag?(a.elm&&!a.elm._vOptions?et(n,"postpatch",(function(){Nr.componentUpdated(e,t,n)})):$r(e,t,n.context),e._vOptions=[].map.call(e.options,Br)):("textarea"===n.tag||Aa(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Gr),e.addEventListener("compositionend",Hr),e.addEventListener("change",Hr),Q&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){$r(e,t,n.context);var a=e._vOptions,r=e._vOptions=[].map.call(e.options,Br);if(r.some((function(e,t){return!q(e,a[t])})))(e.multiple?t.value.some((function(e){return Vr(e,r)})):t.value!==t.oldValue&&Vr(t.value,r))&&Jr(e,"change")}}};function $r(e,t,n){Wr(e,t,n),(Y||Z)&&setTimeout((function(){Wr(e,t,n)}),0)}function Wr(e,t,n){var a=t.value,r=e.multiple;if(!r||Array.isArray(a)){for(var i,o,s=0,l=e.options.length;s<l;s++)if(o=e.options[s],r)i=R(a,Br(o))>-1,o.selected!==i&&(o.selected=i);else if(q(Br(o),a))return void(e.selectedIndex!==s&&(e.selectedIndex=s));r||(e.selectedIndex=-1)}}function Vr(e,t){return t.every((function(t){return!q(t,e)}))}function Br(e){return"_value"in e?e._value:e.value}function Gr(e){e.target.composing=!0}function Hr(e){e.target.composing&&(e.target.composing=!1,Jr(e.target,"input"))}function Jr(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function Kr(e){return!e.componentInstance||e.data&&e.data.transition?e:Kr(e.componentInstance._vnode)}var Yr={model:Nr,show:{bind:function(e,t,n){var a=t.value,r=(n=Kr(n)).data&&n.data.transition,i=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;a&&r?(n.data.show=!0,Or(n,(function(){e.style.display=i}))):e.style.display=a?i:"none"},update:function(e,t,n){var a=t.value;!a!=!t.oldValue&&((n=Kr(n)).data&&n.data.transition?(n.data.show=!0,a?Or(n,(function(){e.style.display=e.__vOriginalDisplay})):qr(n,(function(){e.style.display="none"}))):e.style.display=a?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,a,r){r||(e.style.display=e.__vOriginalDisplay)}}},Qr={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Zr(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?Zr(Ft(t.children)):e}function Xr(e){var t={},n=e.$options;for(var a in n.propsData)t[a]=e[a];var r=n._parentListeners;for(var a in r)t[j(a)]=r[a];return t}function ei(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var ti=function(e){return e.tag||xt(e)},ni=function(e){return"show"===e.name},ai={name:"transition",props:Qr,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(ti)).length){0;var a=this.mode;0;var r=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return r;var i=Zr(r);if(!i)return r;if(this._leaving)return ei(e,r);var o="__transition-".concat(this._uid,"-");i.key=null==i.key?i.isComment?o+"comment":o+i.tag:l(i.key)?0===String(i.key).indexOf(o)?i.key:o+i.key:i.key;var s=(i.data||(i.data={})).transition=Xr(this),d=this._vnode,c=Zr(d);if(i.data.directives&&i.data.directives.some(ni)&&(i.data.show=!0),c&&c.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(i,c)&&!xt(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var u=c.data.transition=F({},s);if("out-in"===a)return this._leaving=!0,et(u,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),ei(e,r);if("in-out"===a){if(xt(i))return d;var p,h=function(){p()};et(s,"afterEnter",h),et(s,"enterCancelled",h),et(u,"delayLeave",(function(e){p=e}))}}return r}}},ri=F({tag:String,moveClass:String},Qr);function ii(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function oi(e){e.data.newPos=e.elm.getBoundingClientRect()}function si(e){var t=e.data.pos,n=e.data.newPos,a=t.left-n.left,r=t.top-n.top;if(a||r){e.data.moved=!0;var i=e.elm.style;i.transform=i.WebkitTransform="translate(".concat(a,"px,").concat(r,"px)"),i.transitionDuration="0s"}}delete ri.mode;var li={Transition:ai,TransitionGroup:{props:ri,beforeMount:function(){var e=this,t=this._update;this._update=function(n,a){var r=rn(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,r(),t.call(e,n,a)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),a=this.prevChildren=this.children,r=this.$slots.default||[],i=this.children=[],o=Xr(this),s=0;s<r.length;s++){if((c=r[s]).tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=o;else;}if(a){var l=[],d=[];for(s=0;s<a.length;s++){var c;(c=a[s]).data.transition=o,c.data.pos=c.elm.getBoundingClientRect(),n[c.key]?l.push(c):d.push(c)}this.kept=e(t,null,l),this.removed=d}return e(t,null,i)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(ii),e.forEach(oi),e.forEach(si),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,a=n.style;Ir(n,t),a.transform=a.WebkitTransform=a.transitionDuration="",n.addEventListener(Tr,n._moveCb=function e(a){a&&a.target!==n||a&&!/transform$/.test(a.propertyName)||(n.removeEventListener(Tr,e),n._moveCb=null,Cr(n,t))})}})))},methods:{hasMove:function(e,t){if(!xr)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){gr(n,e)})),yr(n,t),n.style.display="none",this.$el.appendChild(n);var a=Er(n);return this.$el.removeChild(n),this._hasMove=a.hasTransform}}}};function di(e,t){for(var n in t)e[n]=t[n];return e}ea.config.mustUseProp=function(e,t,n){return"value"===n&&da(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},ea.config.isReservedTag=_a,ea.config.isReservedAttr=la,ea.config.getTagNamespace=function(e){return Ta(e)?"svg":"math"===e?"math":void 0},ea.config.isUnknownElement=function(e){if(!J)return!0;if(_a(e))return!1;if(e=e.toLowerCase(),null!=ja[e])return ja[e];var t=document.createElement(e);return e.indexOf("-")>-1?ja[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:ja[e]=/HTMLUnknownElement/.test(t.toString())},F(ea.options.directives,Yr),F(ea.options.components,li),ea.prototype.__patch__=J?Ur:P,ea.prototype.$mount=function(e,t){return function(e,t,n){var a;e.$el=t,e.$options.render||(e.$options.render=he),ln(e,"beforeMount"),a=function(){e._update(e._render(),n)},new Zt(e,a,P,{before:function(){e._isMounted&&!e._isDestroyed&&ln(e,"beforeUpdate")}},!0),n=!1;var r=e._preWatchers;if(r)for(var i=0;i<r.length;i++)r[i].run();return null==e.$vnode&&(e._isMounted=!0,ln(e,"mounted")),e}(this,e=e&&J?function(e){if("string"==typeof e){var t=document.querySelector(e);return t||document.createElement("div")}return e}(e):void 0,t)},J&&setTimeout((function(){$.devtools&&oe&&oe.emit("init",ea)}),0);var ci=/[!'()*]/g,ui=function(e){return"%"+e.charCodeAt(0).toString(16)},pi=/%2C/g,hi=function(e){return encodeURIComponent(e).replace(ci,ui).replace(pi,",")};function fi(e){try{return decodeURIComponent(e)}catch(e){0}return e}var mi=function(e){return null==e||"object"==typeof e?e:String(e)};function vi(e){var t={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var n=e.replace(/\+/g," ").split("="),a=fi(n.shift()),r=n.length>0?fi(n.join("=")):null;void 0===t[a]?t[a]=r:Array.isArray(t[a])?t[a].push(r):t[a]=[t[a],r]})),t):t}function yi(e){var t=e?Object.keys(e).map((function(t){var n=e[t];if(void 0===n)return"";if(null===n)return hi(t);if(Array.isArray(n)){var a=[];return n.forEach((function(e){void 0!==e&&(null===e?a.push(hi(t)):a.push(hi(t)+"="+hi(e)))})),a.join("&")}return hi(t)+"="+hi(n)})).filter((function(e){return e.length>0})).join("&"):null;return t?"?"+t:""}var gi=/\/?$/;function wi(e,t,n,a){var r=a&&a.options.stringifyQuery,i=t.query||{};try{i=bi(i)}catch(e){}var o={name:t.name||e&&e.name,meta:e&&e.meta||{},path:t.path||"/",hash:t.hash||"",query:i,params:t.params||{},fullPath:Ti(t,r),matched:e?ki(e):[]};return n&&(o.redirectedFrom=Ti(n,r)),Object.freeze(o)}function bi(e){if(Array.isArray(e))return e.map(bi);if(e&&"object"==typeof e){var t={};for(var n in e)t[n]=bi(e[n]);return t}return e}var xi=wi(null,{path:"/"});function ki(e){for(var t=[];e;)t.unshift(e),e=e.parent;return t}function Ti(e,t){var n=e.path,a=e.query;void 0===a&&(a={});var r=e.hash;return void 0===r&&(r=""),(n||"/")+(t||yi)(a)+r}function _i(e,t,n){return t===xi?e===t:!!t&&(e.path&&t.path?e.path.replace(gi,"")===t.path.replace(gi,"")&&(n||e.hash===t.hash&&ji(e.query,t.query)):!(!e.name||!t.name)&&(e.name===t.name&&(n||e.hash===t.hash&&ji(e.query,t.query)&&ji(e.params,t.params))))}function ji(e,t){if(void 0===e&&(e={}),void 0===t&&(t={}),!e||!t)return e===t;var n=Object.keys(e).sort(),a=Object.keys(t).sort();return n.length===a.length&&n.every((function(n,r){var i=e[n];if(a[r]!==n)return!1;var o=t[n];return null==i||null==o?i===o:"object"==typeof i&&"object"==typeof o?ji(i,o):String(i)===String(o)}))}function Ai(e){for(var t=0;t<e.matched.length;t++){var n=e.matched[t];for(var a in n.instances){var r=n.instances[a],i=n.enteredCbs[a];if(r&&i){delete n.enteredCbs[a];for(var o=0;o<i.length;o++)r._isBeingDestroyed||i[o](r)}}}}var Si={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,t){var n=t.props,a=t.children,r=t.parent,i=t.data;i.routerView=!0;for(var o=r.$createElement,s=n.name,l=r.$route,d=r._routerViewCache||(r._routerViewCache={}),c=0,u=!1;r&&r._routerRoot!==r;){var p=r.$vnode?r.$vnode.data:{};p.routerView&&c++,p.keepAlive&&r._directInactive&&r._inactive&&(u=!0),r=r.$parent}if(i.routerViewDepth=c,u){var h=d[s],f=h&&h.component;return f?(h.configProps&&Ii(f,i,h.route,h.configProps),o(f,i,a)):o()}var m=l.matched[c],v=m&&m.components[s];if(!m||!v)return d[s]=null,o();d[s]={component:v},i.registerRouteInstance=function(e,t){var n=m.instances[s];(t&&n!==e||!t&&n===e)&&(m.instances[s]=t)},(i.hook||(i.hook={})).prepatch=function(e,t){m.instances[s]=t.componentInstance},i.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==m.instances[s]&&(m.instances[s]=e.componentInstance),Ai(l)};var y=m.props&&m.props[s];return y&&(di(d[s],{route:l,configProps:y}),Ii(v,i,l,y)),o(v,i,a)}};function Ii(e,t,n,a){var r=t.props=function(e,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(e);case"boolean":return t?e.params:void 0;default:0}}(n,a);if(r){r=t.props=di({},r);var i=t.attrs=t.attrs||{};for(var o in r)e.props&&o in e.props||(i[o]=r[o],delete r[o])}}function Ci(e,t,n){var a=e.charAt(0);if("/"===a)return e;if("?"===a||"#"===a)return t+e;var r=t.split("/");n&&r[r.length-1]||r.pop();for(var i=e.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?r.pop():"."!==s&&r.push(s)}return""!==r[0]&&r.unshift(""),r.join("/")}function Di(e){return e.replace(/\/(?:\s*\/)+/g,"/")}var Fi=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},Ei=Gi,Pi=Mi,zi=function(e,t){return Ui(Mi(e,t),t)},Oi=Ui,qi=Bi,Ri=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Mi(e,t){for(var n,a=[],r=0,i=0,o="",s=t&&t.delimiter||"/";null!=(n=Ri.exec(e));){var l=n[0],d=n[1],c=n.index;if(o+=e.slice(i,c),i=c+l.length,d)o+=d[1];else{var u=e[i],p=n[2],h=n[3],f=n[4],m=n[5],v=n[6],y=n[7];o&&(a.push(o),o="");var g=null!=p&&null!=u&&u!==p,w="+"===v||"*"===v,b="?"===v||"*"===v,x=n[2]||s,k=f||m;a.push({name:h||r++,prefix:p||"",delimiter:x,optional:b,repeat:w,partial:g,asterisk:!!y,pattern:k?$i(k):y?".*":"[^"+Ni(x)+"]+?"})}}return i<e.length&&(o+=e.substr(i)),o&&a.push(o),a}function Li(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function Ui(e,t){for(var n=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(n[a]=new RegExp("^(?:"+e[a].pattern+")$",Vi(t)));return function(t,a){for(var r="",i=t||{},o=(a||{}).pretty?Li:encodeURIComponent,s=0;s<e.length;s++){var l=e[s];if("string"!=typeof l){var d,c=i[l.name];if(null==c){if(l.optional){l.partial&&(r+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(Fi(c)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(c)+"`");if(0===c.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var u=0;u<c.length;u++){if(d=o(c[u]),!n[s].test(d))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(d)+"`");r+=(0===u?l.prefix:l.delimiter)+d}}else{if(d=l.asterisk?encodeURI(c).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):o(c),!n[s].test(d))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+d+'"');r+=l.prefix+d}}else r+=l}return r}}function Ni(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function $i(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function Wi(e,t){return e.keys=t,e}function Vi(e){return e&&e.sensitive?"":"i"}function Bi(e,t,n){Fi(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,r=!1!==n.end,i="",o=0;o<e.length;o++){var s=e[o];if("string"==typeof s)i+=Ni(s);else{var l=Ni(s.prefix),d="(?:"+s.pattern+")";t.push(s),s.repeat&&(d+="(?:"+l+d+")*"),i+=d=s.optional?s.partial?l+"("+d+")?":"(?:"+l+"("+d+"))?":l+"("+d+")"}}var c=Ni(n.delimiter||"/"),u=i.slice(-c.length)===c;return a||(i=(u?i.slice(0,-c.length):i)+"(?:"+c+"(?=$))?"),i+=r?"$":a&&u?"":"(?="+c+"|$)",Wi(new RegExp("^"+i,Vi(n)),t)}function Gi(e,t,n){return Fi(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var a=0;a<n.length;a++)t.push({name:a,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Wi(e,t)}(e,t):Fi(e)?function(e,t,n){for(var a=[],r=0;r<e.length;r++)a.push(Gi(e[r],t,n).source);return Wi(new RegExp("(?:"+a.join("|")+")",Vi(n)),t)}(e,t,n):function(e,t,n){return Bi(Mi(e,n),t,n)}(e,t,n)}Ei.parse=Pi,Ei.compile=zi,Ei.tokensToFunction=Oi,Ei.tokensToRegExp=qi;var Hi=Object.create(null);function Ji(e,t,n){t=t||{};try{var a=Hi[e]||(Hi[e]=Ei.compile(e));return"string"==typeof t.pathMatch&&(t[0]=t.pathMatch),a(t,{pretty:!0})}catch(e){return""}finally{delete t[0]}}function Ki(e,t,n,a){var r="string"==typeof e?{path:e}:e;if(r._normalized)return r;if(r.name){var i=(r=di({},e)).params;return i&&"object"==typeof i&&(r.params=di({},i)),r}if(!r.path&&r.params&&t){(r=di({},r))._normalized=!0;var o=di(di({},t.params),r.params);if(t.name)r.name=t.name,r.params=o;else if(t.matched.length){var s=t.matched[t.matched.length-1].path;r.path=Ji(s,o,t.path)}else 0;return r}var l=function(e){var t="",n="",a=e.indexOf("#");a>=0&&(t=e.slice(a),e=e.slice(0,a));var r=e.indexOf("?");return r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),{path:e,query:n,hash:t}}(r.path||""),d=t&&t.path||"/",c=l.path?Ci(l.path,d,n||r.append):d,u=function(e,t,n){void 0===t&&(t={});var a,r=n||vi;try{a=r(e||"")}catch(e){a={}}for(var i in t){var o=t[i];a[i]=Array.isArray(o)?o.map(mi):mi(o)}return a}(l.query,r.query,a&&a.options.parseQuery),p=r.hash||l.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:c,query:u,hash:p}}var Yi,Qi=function(){},Zi={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var t=this,n=this.$router,a=this.$route,r=n.resolve(this.to,a,this.append),i=r.location,o=r.route,s=r.href,l={},d=n.options.linkActiveClass,c=n.options.linkExactActiveClass,u=null==d?"router-link-active":d,p=null==c?"router-link-exact-active":c,h=null==this.activeClass?u:this.activeClass,f=null==this.exactActiveClass?p:this.exactActiveClass,m=o.redirectedFrom?wi(null,Ki(o.redirectedFrom),null,n):o;l[f]=_i(a,m,this.exactPath),l[h]=this.exact||this.exactPath?l[f]:function(e,t){return 0===e.path.replace(gi,"/").indexOf(t.path.replace(gi,"/"))&&(!t.hash||e.hash===t.hash)&&function(e,t){for(var n in t)if(!(n in e))return!1;return!0}(e.query,t.query)}(a,m);var v=l[f]?this.ariaCurrentValue:null,y=function(e){Xi(e)&&(t.replace?n.replace(i,Qi):n.push(i,Qi))},g={click:Xi};Array.isArray(this.event)?this.event.forEach((function(e){g[e]=y})):g[this.event]=y;var w={class:l},b=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:o,navigate:y,isActive:l[h],isExactActive:l[f]});if(b){if(1===b.length)return b[0];if(b.length>1||!b.length)return 0===b.length?e():e("span",{},b)}if("a"===this.tag)w.on=g,w.attrs={href:s,"aria-current":v};else{var x=function e(t){var n;if(t)for(var a=0;a<t.length;a++){if("a"===(n=t[a]).tag)return n;if(n.children&&(n=e(n.children)))return n}}(this.$slots.default);if(x){x.isStatic=!1;var k=x.data=di({},x.data);for(var T in k.on=k.on||{},k.on){var _=k.on[T];T in g&&(k.on[T]=Array.isArray(_)?_:[_])}for(var j in g)j in k.on?k.on[j].push(g[j]):k.on[j]=y;var A=x.data.attrs=di({},x.data.attrs);A.href=s,A["aria-current"]=v}else w.on=g}return e(this.tag,w,this.$slots.default)}};function Xi(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}var eo="undefined"!=typeof window;function to(e,t,n,a,r){var i=t||[],o=n||Object.create(null),s=a||Object.create(null);e.forEach((function(e){!function e(t,n,a,r,i,o){var s=r.path,l=r.name;0;var d=r.pathToRegexpOptions||{},c=function(e,t,n){n||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==t)return e;return Di(t.path+"/"+e)}(s,i,d.strict);"boolean"==typeof r.caseSensitive&&(d.sensitive=r.caseSensitive);var u={path:c,regex:no(c,d),components:r.components||{default:r.component},alias:r.alias?"string"==typeof r.alias?[r.alias]:r.alias:[],instances:{},enteredCbs:{},name:l,parent:i,matchAs:o,redirect:r.redirect,beforeEnter:r.beforeEnter,meta:r.meta||{},props:null==r.props?{}:r.components?r.props:{default:r.props}};r.children&&r.children.forEach((function(r){var i=o?Di(o+"/"+r.path):void 0;e(t,n,a,r,u,i)}));n[u.path]||(t.push(u.path),n[u.path]=u);if(void 0!==r.alias)for(var p=Array.isArray(r.alias)?r.alias:[r.alias],h=0;h<p.length;++h){0;var f={path:p[h],children:r.children};e(t,n,a,f,i,u.path||"/")}l&&(a[l]||(a[l]=u))}(i,o,s,e,r)}));for(var l=0,d=i.length;l<d;l++)"*"===i[l]&&(i.push(i.splice(l,1)[0]),d--,l--);return{pathList:i,pathMap:o,nameMap:s}}function no(e,t){return Ei(e,[],t)}function ao(e,t){var n=to(e),a=n.pathList,r=n.pathMap,i=n.nameMap;function o(e,n,o){var s=Ki(e,n,!1,t),d=s.name;if(d){var c=i[d];if(!c)return l(null,s);var u=c.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),n&&"object"==typeof n.params)for(var p in n.params)!(p in s.params)&&u.indexOf(p)>-1&&(s.params[p]=n.params[p]);return s.path=Ji(c.path,s.params),l(c,s,o)}if(s.path){s.params={};for(var h=0;h<a.length;h++){var f=a[h],m=r[f];if(ro(m.regex,s.path,s.params))return l(m,s,o)}}return l(null,s)}function s(e,n){var a=e.redirect,r="function"==typeof a?a(wi(e,n,null,t)):a;if("string"==typeof r&&(r={path:r}),!r||"object"!=typeof r)return l(null,n);var s=r,d=s.name,c=s.path,u=n.query,p=n.hash,h=n.params;if(u=s.hasOwnProperty("query")?s.query:u,p=s.hasOwnProperty("hash")?s.hash:p,h=s.hasOwnProperty("params")?s.params:h,d){i[d];return o({_normalized:!0,name:d,query:u,hash:p,params:h},void 0,n)}if(c){var f=function(e,t){return Ci(e,t.parent?t.parent.path:"/",!0)}(c,e);return o({_normalized:!0,path:Ji(f,h),query:u,hash:p},void 0,n)}return l(null,n)}function l(e,n,a){return e&&e.redirect?s(e,a||n):e&&e.matchAs?function(e,t,n){var a=o({_normalized:!0,path:Ji(n,t.params)});if(a){var r=a.matched,i=r[r.length-1];return t.params=a.params,l(i,t)}return l(null,t)}(0,n,e.matchAs):wi(e,n,a,t)}return{match:o,addRoute:function(e,t){var n="object"!=typeof e?i[e]:void 0;to([t||e],a,r,i,n),n&&n.alias.length&&to(n.alias.map((function(e){return{path:e,children:[t]}})),a,r,i,n)},getRoutes:function(){return a.map((function(e){return r[e]}))},addRoutes:function(e){to(e,a,r,i)}}}function ro(e,t,n){var a=t.match(e);if(!a)return!1;if(!n)return!0;for(var r=1,i=a.length;r<i;++r){var o=e.keys[r-1];o&&(n[o.name||"pathMatch"]="string"==typeof a[r]?fi(a[r]):a[r])}return!0}var io=eo&&window.performance&&window.performance.now?window.performance:Date;function oo(){return io.now().toFixed(3)}var so=oo();function lo(){return so}function co(e){return so=e}var uo=Object.create(null);function po(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,t=window.location.href.replace(e,""),n=di({},window.history.state);return n.key=lo(),window.history.replaceState(n,"",t),window.addEventListener("popstate",mo),function(){window.removeEventListener("popstate",mo)}}function ho(e,t,n,a){if(e.app){var r=e.options.scrollBehavior;r&&e.app.$nextTick((function(){var i=function(){var e=lo();if(e)return uo[e]}(),o=r.call(e,t,n,a?i:null);o&&("function"==typeof o.then?o.then((function(e){bo(e,i)})).catch((function(e){0})):bo(o,i))}))}}function fo(){var e=lo();e&&(uo[e]={x:window.pageXOffset,y:window.pageYOffset})}function mo(e){fo(),e.state&&e.state.key&&co(e.state.key)}function vo(e){return go(e.x)||go(e.y)}function yo(e){return{x:go(e.x)?e.x:window.pageXOffset,y:go(e.y)?e.y:window.pageYOffset}}function go(e){return"number"==typeof e}var wo=/^#\d/;function bo(e,t){var n,a="object"==typeof e;if(a&&"string"==typeof e.selector){var r=wo.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(r){var i=e.offset&&"object"==typeof e.offset?e.offset:{};t=function(e,t){var n=document.documentElement.getBoundingClientRect(),a=e.getBoundingClientRect();return{x:a.left-n.left-t.x,y:a.top-n.top-t.y}}(r,i={x:go((n=i).x)?n.x:0,y:go(n.y)?n.y:0})}else vo(e)&&(t=yo(e))}else a&&vo(e)&&(t=yo(e));t&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:t.x,top:t.y,behavior:e.behavior}):window.scrollTo(t.x,t.y))}var xo,ko=eo&&((-1===(xo=window.navigator.userAgent).indexOf("Android 2.")&&-1===xo.indexOf("Android 4.0")||-1===xo.indexOf("Mobile Safari")||-1!==xo.indexOf("Chrome")||-1!==xo.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function To(e,t){fo();var n=window.history;try{if(t){var a=di({},n.state);a.key=lo(),n.replaceState(a,"",e)}else n.pushState({key:co(oo())},"",e)}catch(n){window.location[t?"replace":"assign"](e)}}function _o(e){To(e,!0)}var jo={redirected:2,aborted:4,cancelled:8,duplicated:16};function Ao(e,t){return Io(e,t,jo.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var t={};return Co.forEach((function(n){n in e&&(t[n]=e[n])})),JSON.stringify(t,null,2)}(t)+'" via a navigation guard.')}function So(e,t){return Io(e,t,jo.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+t.fullPath+'" with a new navigation.')}function Io(e,t,n,a){var r=new Error(a);return r._isRouter=!0,r.from=e,r.to=t,r.type=n,r}var Co=["params","query","hash"];function Do(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function Fo(e,t){return Do(e)&&e._isRouter&&(null==t||e.type===t)}function Eo(e,t,n){var a=function(r){r>=e.length?n():e[r]?t(e[r],(function(){a(r+1)})):a(r+1)};a(0)}function Po(e){return function(t,n,a){var r=!1,i=0,o=null;zo(e,(function(e,t,n,s){if("function"==typeof e&&void 0===e.cid){r=!0,i++;var l,d=Ro((function(t){var r;((r=t).__esModule||qo&&"Module"===r[Symbol.toStringTag])&&(t=t.default),e.resolved="function"==typeof t?t:Yi.extend(t),n.components[s]=t,--i<=0&&a()})),c=Ro((function(e){var t="Failed to resolve async component "+s+": "+e;o||(o=Do(e)?e:new Error(t),a(o))}));try{l=e(d,c)}catch(e){c(e)}if(l)if("function"==typeof l.then)l.then(d,c);else{var u=l.component;u&&"function"==typeof u.then&&u.then(d,c)}}})),r||a()}}function zo(e,t){return Oo(e.map((function(e){return Object.keys(e.components).map((function(n){return t(e.components[n],e.instances[n],e,n)}))})))}function Oo(e){return Array.prototype.concat.apply([],e)}var qo="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Ro(e){var t=!1;return function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];if(!t)return t=!0,e.apply(this,n)}}var Mo=function(e,t){this.router=e,this.base=function(e){if(!e)if(eo){var t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(t),this.current=xi,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Lo(e,t,n,a){var r=zo(e,(function(e,a,r,i){var o=function(e,t){"function"!=typeof e&&(e=Yi.extend(e));return e.options[t]}(e,t);if(o)return Array.isArray(o)?o.map((function(e){return n(e,a,r,i)})):n(o,a,r,i)}));return Oo(a?r.reverse():r)}function Uo(e,t){if(t)return function(){return e.apply(t,arguments)}}Mo.prototype.listen=function(e){this.cb=e},Mo.prototype.onReady=function(e,t){this.ready?e():(this.readyCbs.push(e),t&&this.readyErrorCbs.push(t))},Mo.prototype.onError=function(e){this.errorCbs.push(e)},Mo.prototype.transitionTo=function(e,t,n){var a,r=this;try{a=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(t){t(e)})),e}var i=this.current;this.confirmTransition(a,(function(){r.updateRoute(a),t&&t(a),r.ensureURL(),r.router.afterHooks.forEach((function(e){e&&e(a,i)})),r.ready||(r.ready=!0,r.readyCbs.forEach((function(e){e(a)})))}),(function(e){n&&n(e),e&&!r.ready&&(Fo(e,jo.redirected)&&i===xi||(r.ready=!0,r.readyErrorCbs.forEach((function(t){t(e)}))))}))},Mo.prototype.confirmTransition=function(e,t,n){var a=this,r=this.current;this.pending=e;var i,o,s=function(e){!Fo(e)&&Do(e)&&(a.errorCbs.length?a.errorCbs.forEach((function(t){t(e)})):console.error(e)),n&&n(e)},l=e.matched.length-1,d=r.matched.length-1;if(_i(e,r)&&l===d&&e.matched[l]===r.matched[d])return this.ensureURL(),e.hash&&ho(this.router,r,e,!1),s(((o=Io(i=r,e,jo.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",o));var c=function(e,t){var n,a=Math.max(e.length,t.length);for(n=0;n<a&&e[n]===t[n];n++);return{updated:t.slice(0,n),activated:t.slice(n),deactivated:e.slice(n)}}(this.current.matched,e.matched),u=c.updated,p=c.deactivated,h=c.activated,f=[].concat(function(e){return Lo(e,"beforeRouteLeave",Uo,!0)}(p),this.router.beforeHooks,function(e){return Lo(e,"beforeRouteUpdate",Uo)}(u),h.map((function(e){return e.beforeEnter})),Po(h)),m=function(t,n){if(a.pending!==e)return s(So(r,e));try{t(e,r,(function(t){!1===t?(a.ensureURL(!0),s(function(e,t){return Io(e,t,jo.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+t.fullPath+'" via a navigation guard.')}(r,e))):Do(t)?(a.ensureURL(!0),s(t)):"string"==typeof t||"object"==typeof t&&("string"==typeof t.path||"string"==typeof t.name)?(s(Ao(r,e)),"object"==typeof t&&t.replace?a.replace(t):a.push(t)):n(t)}))}catch(e){s(e)}};Eo(f,m,(function(){Eo(function(e){return Lo(e,"beforeRouteEnter",(function(e,t,n,a){return function(e,t,n){return function(a,r,i){return e(a,r,(function(e){"function"==typeof e&&(t.enteredCbs[n]||(t.enteredCbs[n]=[]),t.enteredCbs[n].push(e)),i(e)}))}}(e,n,a)}))}(h).concat(a.router.resolveHooks),m,(function(){if(a.pending!==e)return s(So(r,e));a.pending=null,t(e),a.router.app&&a.router.app.$nextTick((function(){Ai(e)}))}))}))},Mo.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},Mo.prototype.setupListeners=function(){},Mo.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=xi,this.pending=null};var No=function(e){function t(t,n){e.call(this,t,n),this._startLocation=$o(this.base)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router,n=t.options.scrollBehavior,a=ko&&n;a&&this.listeners.push(po());var r=function(){var n=e.current,r=$o(e.base);e.current===xi&&r===e._startLocation||e.transitionTo(r,(function(e){a&&ho(t,e,n,!0)}))};window.addEventListener("popstate",r),this.listeners.push((function(){window.removeEventListener("popstate",r)}))}},t.prototype.go=function(e){window.history.go(e)},t.prototype.push=function(e,t,n){var a=this,r=this.current;this.transitionTo(e,(function(e){To(Di(a.base+e.fullPath)),ho(a.router,e,r,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this,r=this.current;this.transitionTo(e,(function(e){_o(Di(a.base+e.fullPath)),ho(a.router,e,r,!1),t&&t(e)}),n)},t.prototype.ensureURL=function(e){if($o(this.base)!==this.current.fullPath){var t=Di(this.base+this.current.fullPath);e?To(t):_o(t)}},t.prototype.getCurrentLocation=function(){return $o(this.base)},t}(Mo);function $o(e){var t=window.location.pathname,n=t.toLowerCase(),a=e.toLowerCase();return!e||n!==a&&0!==n.indexOf(Di(a+"/"))||(t=t.slice(e.length)),(t||"/")+window.location.search+window.location.hash}var Wo=function(e){function t(t,n,a){e.call(this,t,n),a&&function(e){var t=$o(e);if(!/^\/#/.test(t))return window.location.replace(Di(e+"/#"+t)),!0}(this.base)||Vo()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router.options.scrollBehavior,n=ko&&t;n&&this.listeners.push(po());var a=function(){var t=e.current;Vo()&&e.transitionTo(Bo(),(function(a){n&&ho(e.router,a,t,!0),ko||Jo(a.fullPath)}))},r=ko?"popstate":"hashchange";window.addEventListener(r,a),this.listeners.push((function(){window.removeEventListener(r,a)}))}},t.prototype.push=function(e,t,n){var a=this,r=this.current;this.transitionTo(e,(function(e){Ho(e.fullPath),ho(a.router,e,r,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this,r=this.current;this.transitionTo(e,(function(e){Jo(e.fullPath),ho(a.router,e,r,!1),t&&t(e)}),n)},t.prototype.go=function(e){window.history.go(e)},t.prototype.ensureURL=function(e){var t=this.current.fullPath;Bo()!==t&&(e?Ho(t):Jo(t))},t.prototype.getCurrentLocation=function(){return Bo()},t}(Mo);function Vo(){var e=Bo();return"/"===e.charAt(0)||(Jo("/"+e),!1)}function Bo(){var e=window.location.href,t=e.indexOf("#");return t<0?"":e=e.slice(t+1)}function Go(e){var t=window.location.href,n=t.indexOf("#");return(n>=0?t.slice(0,n):t)+"#"+e}function Ho(e){ko?To(Go(e)):window.location.hash=e}function Jo(e){ko?_o(Go(e)):window.location.replace(Go(e))}var Ko=function(e){function t(t,n){e.call(this,t,n),this.stack=[],this.index=-1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.push=function(e,t,n){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index+1).concat(e),a.index++,t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index).concat(e),t&&t(e)}),n)},t.prototype.go=function(e){var t=this,n=this.index+e;if(!(n<0||n>=this.stack.length)){var a=this.stack[n];this.confirmTransition(a,(function(){var e=t.current;t.index=n,t.updateRoute(a),t.router.afterHooks.forEach((function(t){t&&t(a,e)}))}),(function(e){Fo(e,jo.duplicated)&&(t.index=n)}))}},t.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},t.prototype.ensureURL=function(){},t}(Mo),Yo=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=ao(e.routes||[],this);var t=e.mode||"hash";switch(this.fallback="history"===t&&!ko&&!1!==e.fallback,this.fallback&&(t="hash"),eo||(t="abstract"),this.mode=t,t){case"history":this.history=new No(this,e.base);break;case"hash":this.history=new Wo(this,e.base,this.fallback);break;case"abstract":this.history=new Ko(this,e.base);break;default:0}},Qo={currentRoute:{configurable:!0}};Yo.prototype.match=function(e,t,n){return this.matcher.match(e,t,n)},Qo.currentRoute.get=function(){return this.history&&this.history.current},Yo.prototype.init=function(e){var t=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var n=t.apps.indexOf(e);n>-1&&t.apps.splice(n,1),t.app===e&&(t.app=t.apps[0]||null),t.app||t.history.teardown()})),!this.app){this.app=e;var n=this.history;if(n instanceof No||n instanceof Wo){var a=function(e){n.setupListeners(),function(e){var a=n.current,r=t.options.scrollBehavior;ko&&r&&"fullPath"in e&&ho(t,e,a,!1)}(e)};n.transitionTo(n.getCurrentLocation(),a,a)}n.listen((function(e){t.apps.forEach((function(t){t._route=e}))}))}},Yo.prototype.beforeEach=function(e){return Xo(this.beforeHooks,e)},Yo.prototype.beforeResolve=function(e){return Xo(this.resolveHooks,e)},Yo.prototype.afterEach=function(e){return Xo(this.afterHooks,e)},Yo.prototype.onReady=function(e,t){this.history.onReady(e,t)},Yo.prototype.onError=function(e){this.history.onError(e)},Yo.prototype.push=function(e,t,n){var a=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){a.history.push(e,t,n)}));this.history.push(e,t,n)},Yo.prototype.replace=function(e,t,n){var a=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){a.history.replace(e,t,n)}));this.history.replace(e,t,n)},Yo.prototype.go=function(e){this.history.go(e)},Yo.prototype.back=function(){this.go(-1)},Yo.prototype.forward=function(){this.go(1)},Yo.prototype.getMatchedComponents=function(e){var t=e?e.matched?e:this.resolve(e).route:this.currentRoute;return t?[].concat.apply([],t.matched.map((function(e){return Object.keys(e.components).map((function(t){return e.components[t]}))}))):[]},Yo.prototype.resolve=function(e,t,n){var a=Ki(e,t=t||this.history.current,n,this),r=this.match(a,t),i=r.redirectedFrom||r.fullPath;return{location:a,route:r,href:function(e,t,n){var a="hash"===n?"#"+t:t;return e?Di(e+"/"+a):a}(this.history.base,i,this.mode),normalizedTo:a,resolved:r}},Yo.prototype.getRoutes=function(){return this.matcher.getRoutes()},Yo.prototype.addRoute=function(e,t){this.matcher.addRoute(e,t),this.history.current!==xi&&this.history.transitionTo(this.history.getCurrentLocation())},Yo.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==xi&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Yo.prototype,Qo);var Zo=Yo;function Xo(e,t){return e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}Yo.install=function e(t){if(!e.installed||Yi!==t){e.installed=!0,Yi=t;var n=function(e){return void 0!==e},a=function(e,t){var a=e.$options._parentVnode;n(a)&&n(a=a.data)&&n(a=a.registerRouteInstance)&&a(e,t)};t.mixin({beforeCreate:function(){n(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,a(this,this)},destroyed:function(){a(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",Si),t.component("RouterLink",Zi);var r=t.config.optionMergeStrategies;r.beforeRouteEnter=r.beforeRouteLeave=r.beforeRouteUpdate=r.created}},Yo.version="3.6.5",Yo.isNavigationFailure=Fo,Yo.NavigationFailureType=jo,Yo.START_LOCATION=xi,eo&&window.Vue&&window.Vue.use(Yo);n(102);n(91),n(129);var es={NotFound:()=>n.e(7).then(n.bind(null,300)),Layout:()=>Promise.all([n.e(0),n.e(3),n.e(2)]).then(n.bind(null,299))},ts={"v-5e1e685a":()=>n.e(8).then(n.bind(null,303)),"v-c97ca880":()=>n.e(9).then(n.bind(null,304)),"v-0d609624":()=>n.e(10).then(n.bind(null,305)),"v-4f037d1a":()=>n.e(11).then(n.bind(null,306)),"v-18d0587a":()=>n.e(12).then(n.bind(null,307)),"v-2f7f848c":()=>n.e(14).then(n.bind(null,308)),"v-3120da0c":()=>n.e(13).then(n.bind(null,309)),"v-2eaf1140":()=>n.e(15).then(n.bind(null,310)),"v-18c2b964":()=>n.e(16).then(n.bind(null,311)),"v-09d6f550":()=>n.e(17).then(n.bind(null,312)),"v-9356a30c":()=>n.e(18).then(n.bind(null,313)),"v-7cc0117c":()=>n.e(19).then(n.bind(null,314)),"v-690a4650":()=>n.e(20).then(n.bind(null,315)),"v-58f7366c":()=>n.e(21).then(n.bind(null,316)),"v-0877efcc":()=>n.e(22).then(n.bind(null,317)),"v-47c1f97a":()=>n.e(24).then(n.bind(null,318)),"v-4fad50ba":()=>n.e(25).then(n.bind(null,319)),"v-31657474":()=>n.e(27).then(n.bind(null,320)),"v-4fc0d1c8":()=>n.e(26).then(n.bind(null,321)),"v-950c4d48":()=>n.e(23).then(n.bind(null,322)),"v-0c3bd15a":()=>n.e(29).then(n.bind(null,323)),"v-e2784654":()=>n.e(28).then(n.bind(null,324)),"v-84e0b14c":()=>n.e(30).then(n.bind(null,325)),"v-0d650648":()=>n.e(32).then(n.bind(null,326)),"v-3e6ef1ac":()=>n.e(33).then(n.bind(null,327)),"v-6dd912ec":()=>n.e(34).then(n.bind(null,328)),"v-074d53cc":()=>n.e(31).then(n.bind(null,329)),"v-52bf2fcc":()=>n.e(35).then(n.bind(null,330)),"v-3258450c":()=>n.e(36).then(n.bind(null,331)),"v-a6e64848":()=>n.e(37).then(n.bind(null,332)),"v-35b0f3b1":()=>n.e(38).then(n.bind(null,333)),"v-e65ea9a4":()=>n.e(39).then(n.bind(null,334)),"v-57c590fa":()=>n.e(40).then(n.bind(null,335)),"v-d297eaa6":()=>n.e(42).then(n.bind(null,336)),"v-45095440":()=>n.e(41).then(n.bind(null,337)),"v-f81e553c":()=>n.e(43).then(n.bind(null,338)),"v-7cc2c9e4":()=>n.e(44).then(n.bind(null,339)),"v-5d3101c8":()=>n.e(45).then(n.bind(null,340)),"v-501d8193":()=>n.e(46).then(n.bind(null,341))};function ns(e){const t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}const as=/-(\w)/g,rs=ns(e=>e.replace(as,(e,t)=>t?t.toUpperCase():"")),is=/\B([A-Z])/g,os=ns(e=>e.replace(is,"-$1").toLowerCase()),ss=ns(e=>e.charAt(0).toUpperCase()+e.slice(1));function ls(e,t){if(!t)return;if(e(t))return e(t);return t.includes("-")?e(ss(rs(t))):e(ss(t))||e(os(t))}const ds=Object.assign({},es,ts),cs=e=>ds[e],us=e=>ts[e],ps=e=>es[e],hs=e=>ea.component(e);function fs(e){return ls(us,e)}function ms(e){return ls(ps,e)}function vs(e){return ls(cs,e)}function ys(e){return ls(hs,e)}function gs(...e){return Promise.all(e.filter(e=>e).map(async e=>{if(!ys(e)&&vs(e)){const t=await vs(e)();ea.component(e,t.default)}}))}function ws(e,t){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[e]=t)}var bs=n(88),xs=n.n(bs),ks=n(89),Ts=n.n(ks),_s={created(){if(this.siteMeta=this.$site.headTags.filter(([e])=>"meta"===e).map(([e,t])=>t),this.$ssrContext){const t=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=t)?e.map(e=>{let t="<meta";return Object.keys(e).forEach(n=>{t+=` ${n}="${Ts()(e[n])}"`}),t+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=As(this.$canonicalUrl)}var e},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const e=this.getMergedMetaTags();this.currentMetaTags=Ss(e,this.currentMetaTags)},getMergedMetaTags(){const e=this.$page.frontmatter.meta||[];return xs()([{name:"description",content:this.$description}],e,this.siteMeta,Is)},updateCanonicalLink(){js(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",As(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){Ss(null,this.currentMetaTags),js()}};function js(){const e=document.querySelector("link[rel='canonical']");e&&e.remove()}function As(e=""){return e?`<link href="${e}" rel="canonical" />`:""}function Ss(e,t){if(t&&[...t].filter(e=>e.parentNode===document.head).forEach(e=>document.head.removeChild(e)),e)return e.map(e=>{const t=document.createElement("meta");return Object.keys(e).forEach(n=>{t.setAttribute(n,e[n])}),document.head.appendChild(t),t})}function Is(e){for(const t of["name","property","itemprop"])if(e.hasOwnProperty(t))return e[t]+t;return JSON.stringify(e)}var Cs=n(90),Ds={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:n.n(Cs)()((function(){this.setActiveHash()}),300),setActiveHash(){const e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter(t=>e.some(e=>e.hash===t.hash)),n=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),r=window.innerHeight+n;for(let e=0;e<t.length;e++){const i=t[e],o=t[e+1],s=0===e&&0===n||n>=i.parentElement.offsetTop+10&&(!o||n<o.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(i.hash)){const n=i;if(r===a)for(let n=e+1;n<t.length;n++)if(l===decodeURIComponent(t[n].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(n.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},Fs=n(22),Es=n.n(Fs),Ps={mounted(){Es.a.configure({showSpinner:!1}),this.$router.beforeEach((e,t,n)=>{e.path===t.path||ea.component(e.name)||Es.a.start(),n()}),this.$router.afterEach(()=>{Es.a.done(),this.isSidebarOpen=!1})}},zs={props:{parent:Object,code:String,options:{align:String,color:String,backgroundTransition:Boolean,backgroundColor:String,successText:String,staticIcon:Boolean}},data:()=>({success:!1,originalBackground:null,originalTransition:null}),computed:{alignStyle(){let e={};return e[this.options.align]="7.5px",e},iconClass(){return this.options.staticIcon?"":"hover"}},mounted(){this.originalTransition=this.parent.style.transition,this.originalBackground=this.parent.style.background},beforeDestroy(){this.parent.style.transition=this.originalTransition,this.parent.style.background=this.originalBackground},methods:{hexToRgb(e){let t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16)}:null},copyToClipboard(e){if(navigator.clipboard)navigator.clipboard.writeText(this.code).then(()=>{this.setSuccessTransitions()},()=>{});else{let e=document.createElement("textarea");document.body.appendChild(e),e.value=this.code,e.select(),document.execCommand("Copy"),e.remove(),this.setSuccessTransitions()}},setSuccessTransitions(){if(clearTimeout(this.successTimeout),this.options.backgroundTransition){this.parent.style.transition="background 350ms";let e=this.hexToRgb(this.options.backgroundColor);this.parent.style.background=`rgba(${e.r}, ${e.g}, ${e.b}, 0.1)`}this.success=!0,this.successTimeout=setTimeout(()=>{this.options.backgroundTransition&&(this.parent.style.background=this.originalBackground,this.parent.style.transition=this.originalTransition),this.success=!1},500)}}},Os=(n(237),n(10)),qs=Object(Os.a)(zs,(function(){var e=this,t=e._self._c;return t("div",{staticClass:"code-copy"},[t("svg",{class:e.iconClass,style:e.alignStyle,attrs:{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24"},on:{click:e.copyToClipboard}},[t("path",{attrs:{fill:"none",d:"M0 0h24v24H0z"}}),e._v(" "),t("path",{attrs:{fill:e.options.color,d:"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4l6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h7zm-1 7h5.5L14 6.5V12z"}})]),e._v(" "),t("span",{class:e.success?"success":"",style:e.alignStyle},[e._v("\n        "+e._s(e.options.successText)+"\n    ")])])}),[],!1,null,"49140617",null).exports,Rs=(n(238),[_s,Ds,Ps,{updated(){this.update()},methods:{update(){setTimeout(()=>{document.querySelectorAll('div[class*="language-"] pre').forEach(e=>{if(e.classList.contains("code-copy-added"))return;let t=new(ea.extend(qs));t.options={align:"bottom",color:"#27b1ff",backgroundTransition:!0,backgroundColor:"#0075b8",successText:"Copied!",staticIcon:!1},t.code=e.innerText,t.parent=e,t.$mount(),e.classList.add("code-copy-added"),e.appendChild(t.$el)})},100)}}}]),Ms={name:"GlobalLayout",computed:{layout(){const e=this.getLayout();return ws("layout",e),ea.component(e)}},methods:{getLayout(){if(this.$page.path){const e=this.$page.frontmatter.layout;return e&&(this.$vuepress.getLayoutAsyncComponent(e)||this.$vuepress.getVueComponent(e))?e:"Layout"}return"NotFound"}}},Ls=Object(Os.a)(Ms,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(e,t,n){switch(t){case"components":e[t]||(e[t]={}),Object.assign(e[t],n);break;case"mixins":e[t]||(e[t]=[]),e[t].push(...n);break;default:throw new Error("Unknown option name.")}}(Ls,"mixins",Rs);const Us=[{name:"v-5e1e685a",path:"/docs/arfs/content-types.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-5e1e685a").then(n)}},{name:"v-c97ca880",path:"/docs/arfs/data-model.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-c97ca880").then(n)}},{name:"v-0d609624",path:"/docs/arfs/entity-types.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-0d609624").then(n)}},{name:"v-4f037d1a",path:"/docs/arfs/",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-4f037d1a").then(n)}},{path:"/docs/arfs/index.html",redirect:"/docs/arfs/"},{path:"/docs/arfs/overview.html",redirect:"/docs/arfs/"},{name:"v-18d0587a",path:"/docs/arfs/privacy.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-18d0587a").then(n)}},{name:"v-2f7f848c",path:"/docs/arfs/usage/change/drives.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-2f7f848c").then(n)}},{name:"v-3120da0c",path:"/docs/arfs/schema-diagrams.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-3120da0c").then(n)}},{name:"v-2eaf1140",path:"/docs/arfs/usage/change/files.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-2eaf1140").then(n)}},{name:"v-18c2b964",path:"/docs/arfs/usage/change/folders.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-18c2b964").then(n)}},{name:"v-09d6f550",path:"/docs/arfs/usage/change/snapshots.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-09d6f550").then(n)}},{name:"v-9356a30c",path:"/docs/arfs/usage/create/",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-9356a30c").then(n)}},{path:"/docs/arfs/usage/create/index.html",redirect:"/docs/arfs/usage/create/"},{path:"/docs/arfs/usage/create/create-drive.html",redirect:"/docs/arfs/usage/create/"},{name:"v-7cc0117c",path:"/docs/arfs/usage/create/create-file.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-7cc0117c").then(n)}},{name:"v-690a4650",path:"/docs/arfs/usage/create/create-folder.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-690a4650").then(n)}},{name:"v-58f7366c",path:"/docs/arfs/usage/create/create-snapshot.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-58f7366c").then(n)}},{name:"v-0877efcc",path:"/docs/arfs/usage/extending-schemas.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-0877efcc").then(n)}},{name:"v-47c1f97a",path:"/docs/cli/all-commands.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-47c1f97a").then(n)}},{name:"v-4fad50ba",path:"/docs/cli/getting-help.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-4fad50ba").then(n)}},{name:"v-31657474",path:"/docs/cli/",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-31657474").then(n)}},{path:"/docs/cli/index.html",redirect:"/docs/cli/"},{path:"/docs/cli/intro.html",redirect:"/docs/cli/"},{name:"v-4fc0d1c8",path:"/docs/cli/getting-started.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-4fc0d1c8").then(n)}},{name:"v-950c4d48",path:"/docs/arfs/usage/read/",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-950c4d48").then(n)}},{path:"/docs/arfs/usage/read/index.html",redirect:"/docs/arfs/usage/read/"},{path:"/docs/arfs/usage/read/read-operations.html",redirect:"/docs/arfs/usage/read/"},{name:"v-0c3bd15a",path:"/docs/core-sdk.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-0c3bd15a").then(n)}},{name:"v-e2784654",path:"/docs/cli/using-the-cli.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-e2784654").then(n)}},{name:"v-84e0b14c",path:"/docs/misc/deploy/deploy.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-84e0b14c").then(n)}},{name:"v-0d650648",path:"/docs/misc/deploy/paths.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-0d650648").then(n)}},{name:"v-3e6ef1ac",path:"/docs/misc/deploy/",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-3e6ef1ac").then(n)}},{path:"/docs/misc/deploy/index.html",redirect:"/docs/misc/deploy/"},{path:"/docs/misc/deploy/prepare.html",redirect:"/docs/misc/deploy/"},{name:"v-6dd912ec",path:"/docs/misc/deploy/routing.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-6dd912ec").then(n)}},{name:"v-074d53cc",path:"/docs/misc/deploy/examples.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-074d53cc").then(n)}},{name:"v-52bf2fcc",path:"/docs/misc/ethareum/",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-52bf2fcc").then(n)}},{path:"/docs/misc/ethareum/index.html",redirect:"/docs/misc/ethareum/"},{path:"/docs/misc/eth.html",redirect:"/docs/misc/ethareum/"},{name:"v-3258450c",path:"/docs/misc/permasite.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-3258450c").then(n)}},{name:"v-a6e64848",path:"/docs/misc/price-calculator.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-a6e64848").then(n)}},{name:"v-35b0f3b1",path:"/docs/",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-35b0f3b1").then(n)}},{path:"/docs/index.html",redirect:"/docs/"},{name:"v-e65ea9a4",path:"/docs/turbo/api/payment.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-e65ea9a4").then(n)}},{name:"v-57c590fa",path:"/docs/turbo/api/upload.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-57c590fa").then(n)}},{name:"v-d297eaa6",path:"/docs/turbo/turbo-sdk/",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-d297eaa6").then(n)}},{path:"/docs/turbo/turbo-sdk/index.html",redirect:"/docs/turbo/turbo-sdk/"},{name:"v-45095440",path:"/docs/turbo/migrating.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-45095440").then(n)}},{name:"v-f81e553c",path:"/docs/turbo/turbo-sdk/release-notes.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-f81e553c").then(n)}},{name:"v-7cc2c9e4",path:"/docs/turbo/turbo-sdk/turbo-web.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-7cc2c9e4").then(n)}},{name:"v-5d3101c8",path:"/docs/turbo/what-is-turbo.html",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-5d3101c8").then(n)}},{name:"v-501d8193",path:"/",component:Ls,beforeEnter:(e,t,n)=>{gs("Layout","v-501d8193").then(n)}},{path:"/index.html",redirect:"/"},{path:"*",component:Ls}],Ns={title:"ArDrive Docs",description:"ArDrive documentation",base:"/",headTags:[["meta",{property:"og:title",content:"ArDrive Docs Portal"}],["meta",{name:"twitter:title",content:"ArDrive Docs Portal"}],["meta",{name:"twitter:card",content:"summary_large_image"}],["meta",{name:"twitter:image",content:"https://docs.ardrive.io/images/card-image.png"}],["meta",{name:"twitter:site",content:"@ardriveapp"}],["meta",{property:"og:image",content:"https://docs.ardrive.io/images/card-image.png"}],["meta",{name:"theme-color",content:"#3eaf7c"}],["meta",{name:"apple-mobile-web-app-capable",content:"yes"}],["meta",{name:"apple-mobile-web-app-status-bar-style",content:"black"}],["script",{src:"https://plausible.io/js/script.js",defer:!0,"data-domain":"docs.ardrive.io"}]],pages:[{title:"Content Types",frontmatter:{},regularPath:"/docs/arfs/content-types.html",relativePath:"docs/arfs/content-types.md",key:"v-5e1e685a",path:"/docs/arfs/content-types.html",headers:[{level:2,title:"Other Tags",slug:"other-tags",normalizedTitle:"other tags",charIndex:1007}],headersStr:"Other Tags",content:"# Content Types\n\nAll transaction types in ArFS leverage a specific metadata tag for the Content-Type (also known as mime-type) of the data that is included in the transaction. ArFS clients must determine what the mime-type of the data is, in order for Arweave gateways and browsers to render this content appropriately.\n\nAll public drive, folder, and file (metadata only) entity transactions all use a JSON standard, therefore they must have the following content type tag:\n\nContent-Type: '<application/json>'\n\n\nHowever, a file's data transaction must have its mime-type determined. This is stored in the file's corresponding metadata transaction JSON's dataContentType as well as the content type tag in the data transaction itself.\n\nContent-Type: \"<file's mime-type>\"\n\n\nAll private drive, folder, and file entity transactions must have the following content type, since they are encrypted:\n\nContent-Type: '<application/octet-stream>'\n\n\nArDrive-Core includes methods to determine a file's content type\n\n\n# Other Tags\n\nArFS enabled clients should include the following tags on their transactions to identify their application\n\nApp-Name: \"<defined application name eg. ArDrive\"\nApp-Version: \"<defined version of the app eg. 0.5.0\"\nClient?: \"<if the application has multiple clients, they should be specified here eg. Web\" \n",normalizedContent:"# content types\n\nall transaction types in arfs leverage a specific metadata tag for the content-type (also known as mime-type) of the data that is included in the transaction. arfs clients must determine what the mime-type of the data is, in order for arweave gateways and browsers to render this content appropriately.\n\nall public drive, folder, and file (metadata only) entity transactions all use a json standard, therefore they must have the following content type tag:\n\ncontent-type: '<application/json>'\n\n\nhowever, a file's data transaction must have its mime-type determined. this is stored in the file's corresponding metadata transaction json's datacontenttype as well as the content type tag in the data transaction itself.\n\ncontent-type: \"<file's mime-type>\"\n\n\nall private drive, folder, and file entity transactions must have the following content type, since they are encrypted:\n\ncontent-type: '<application/octet-stream>'\n\n\nardrive-core includes methods to determine a file's content type\n\n\n# other tags\n\narfs enabled clients should include the following tags on their transactions to identify their application\n\napp-name: \"<defined application name eg. ardrive\"\napp-version: \"<defined version of the app eg. 0.5.0\"\nclient?: \"<if the application has multiple clients, they should be specified here eg. web\" \n",charsets:{}},{title:"Data Model",frontmatter:{},regularPath:"/docs/arfs/data-model.html",relativePath:"docs/arfs/data-model.md",key:"v-c97ca880",path:"/docs/arfs/data-model.html",headers:[{level:2,title:"Entity relationships",slug:"entity-relationships",normalizedTitle:"entity relationships",charIndex:1595},{level:2,title:"Metadata Format",slug:"metadata-format",normalizedTitle:"metadata format",charIndex:2118}],headersStr:"Entity relationships Metadata Format",content:'# Data Model\n\nBecause of Arweave\'s permanent and immutable nature, traditional file structure operations such as renaming and moving files or folders cannot be accomplished by simply updating on-chain data. ArFS works around this by defining an append-only transaction data model based on the metadata tags found in the Arweave Transaction Headers.\n\nThis model uses a bottom-up reference method, which avoids race conditions in file system updates. Each file contains metadata that refers to the parent folder, and each folder contains metadata that refers to its parent drive. A top-down data model would require the parent model (i.e. a folder) to store references to its children.\n\nThese defined entities allow the state of the drive to be constructed by a client to look and feel like a file system\n\n * Drive Entities contain folders and files\n\n * Folder Entities contain other folders or files\n\n * File Entities contain both the file data and metadata\n\n * Snapshot entities contain a state rollups of all files and folder metadata within a drive\n\n * Drive Entities contain folders and files\n\n * Folder Entities contain other folders or files\n\n * File Entities contain both the file data and metadata\n\n * Snapshot entities contain a state rollups of all files and folder metadata within a drive\n\n * Drive Entities contain folders and files\n\n * Folder Entities contain other folders or files\n\n * File Entities are composed by both the file data and metadata\n\n * Snapshot entities contain a state rollups of all entities\' (such as drive, folder, file and snapshot) metadata within a drive\n\n\n# Entity relationships\n\nThe following diagram shows the high level relationships between drive, folder, and file entities, and their associated data. More detailed information about each Entity Type can be found here.\n\nEntity Relationship Diagram\n\nAs you can see, each file and folder contains metadata which points to both the parent folder and the parent drive. The drive entity contains metadata about itself, but not the child contents. So clients must build drive states from the lowest level and work their way up.\n\n\n# Metadata Format\n\nMetadata stored in any Arweave transaction tag will be defined in the following manner:\n\n{ "name": "Example-Tag", "value": "example-data" }\n\n\nMetadata stored in the Transaction Data Payload will follow JSON formatting like below:\n\n{\n    "exampleField": "exampleData"\n}\n\n\nfields with a ? suffix are optional.\n\n{\n  "name": "My Project",\n  "description": "This is a sample project.",\n  "version?": "1.0.0",\n  "author?": "John Doe"\n}\n\n\nEnumerated field values (those which must adhere to certain values) are defined in the format "value 1 | value 2".\n\nAll UUIDs used for Entity-Ids are based on the Universally Unique Identifier standard.\n\nThere are no requirements to list ArFS tags in any specific order.',normalizedContent:'# data model\n\nbecause of arweave\'s permanent and immutable nature, traditional file structure operations such as renaming and moving files or folders cannot be accomplished by simply updating on-chain data. arfs works around this by defining an append-only transaction data model based on the metadata tags found in the arweave transaction headers.\n\nthis model uses a bottom-up reference method, which avoids race conditions in file system updates. each file contains metadata that refers to the parent folder, and each folder contains metadata that refers to its parent drive. a top-down data model would require the parent model (i.e. a folder) to store references to its children.\n\nthese defined entities allow the state of the drive to be constructed by a client to look and feel like a file system\n\n * drive entities contain folders and files\n\n * folder entities contain other folders or files\n\n * file entities contain both the file data and metadata\n\n * snapshot entities contain a state rollups of all files and folder metadata within a drive\n\n * drive entities contain folders and files\n\n * folder entities contain other folders or files\n\n * file entities contain both the file data and metadata\n\n * snapshot entities contain a state rollups of all files and folder metadata within a drive\n\n * drive entities contain folders and files\n\n * folder entities contain other folders or files\n\n * file entities are composed by both the file data and metadata\n\n * snapshot entities contain a state rollups of all entities\' (such as drive, folder, file and snapshot) metadata within a drive\n\n\n# entity relationships\n\nthe following diagram shows the high level relationships between drive, folder, and file entities, and their associated data. more detailed information about each entity type can be found here.\n\nentity relationship diagram\n\nas you can see, each file and folder contains metadata which points to both the parent folder and the parent drive. the drive entity contains metadata about itself, but not the child contents. so clients must build drive states from the lowest level and work their way up.\n\n\n# metadata format\n\nmetadata stored in any arweave transaction tag will be defined in the following manner:\n\n{ "name": "example-tag", "value": "example-data" }\n\n\nmetadata stored in the transaction data payload will follow json formatting like below:\n\n{\n    "examplefield": "exampledata"\n}\n\n\nfields with a ? suffix are optional.\n\n{\n  "name": "my project",\n  "description": "this is a sample project.",\n  "version?": "1.0.0",\n  "author?": "john doe"\n}\n\n\nenumerated field values (those which must adhere to certain values) are defined in the format "value 1 | value 2".\n\nall uuids used for entity-ids are based on the universally unique identifier standard.\n\nthere are no requirements to list arfs tags in any specific order.',charsets:{cjk:!0}},{title:"Entity Types",frontmatter:{tags:["pin","pins","pinnedDataOwner","hidden","hide"]},regularPath:"/docs/arfs/entity-types.html",relativePath:"docs/arfs/entity-types.md",key:"v-0d609624",path:"/docs/arfs/entity-types.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:19},{level:2,title:"Drive",slug:"drive",normalizedTitle:"drive",charIndex:414},{level:2,title:"Folder",slug:"folder",normalizedTitle:"folder",charIndex:539},{level:2,title:"File",slug:"file",normalizedTitle:"file",charIndex:669},{level:3,title:"Pinning Files",slug:"pinning-files",normalizedTitle:"pinning files",charIndex:4785},{level:3,title:"File Data Transaction Example",slug:"file-data-transaction-example",normalizedTitle:"file data transaction example",charIndex:5270},{level:3,title:"File Metadata Transaction Example",slug:"file-metadata-transaction-example",normalizedTitle:"file metadata transaction example",charIndex:5668},{level:2,title:"Snapshot",slug:"snapshot",normalizedTitle:"snapshot",charIndex:947},{level:3,title:"Snapshot Entity Tags",slug:"snapshot-entity-tags",normalizedTitle:"snapshot entity tags",charIndex:7636},{level:3,title:"Snapshot Entity Data",slug:"snapshot-entity-data",normalizedTitle:"snapshot entity data",charIndex:8558},{level:2,title:"Schema Diagrams",slug:"schema-diagrams",normalizedTitle:"schema diagrams",charIndex:11041},{level:3,title:"Public Drive",slug:"public-drive",normalizedTitle:"public drive",charIndex:11151},{level:3,title:"Private Drive",slug:"private-drive",normalizedTitle:"private drive",charIndex:11189}],headersStr:"Overview Drive Folder File Pinning Files File Data Transaction Example File Metadata Transaction Example Snapshot Snapshot Entity Tags Snapshot Entity Data Schema Diagrams Public Drive Private Drive",content:'# Entity Types\n\n\n# Overview\n\nArweave transactions are composed of transaction headers and data payloads.\n\nArFS entities, therefore, have their data split between being stored as tags on their transaction header and encoded as JSON and stored as the data of a transaction. In the case of private entities, JSON data and file data payloads are always encrypted according to the protocol processes defined below.\n\n * Drive entities require a single metadata transaction, with standard Drive tags and encoded JSON with secondary metadata.\n\n * Folder entities require a single metadata transaction, with standard Folder tags and an encoded JSON with secondary metadata.\n\n * File entities require a metadata transaction, with standard File tags and an encoded Data JSON with secondary metadata relating to the file.\n\n * File entities also require a second data transaction, which includes a limited set of File tags and the actual file data itself.\n\n * Snapshot entities require a single transaction. which contains a Data JSON with all of the Drive’s rolled up ArFS metadata and standard Snapshot GQL tags that identify the Snapshot.\n\nArFS v0.14 introduces the isHidden metadata property. isHidden is a boolean (true/false) that tells clients if they should display the file or folder. Hidden files still exist and will be included in snapshots, but should not be rendered by clients. If isHidden is not present, its value should be assumed false.\n\n\n# Drive\n\nA drive is the highest level logical grouping of folders and files. All folders and files must be part of a drive, and reference the Drive ID of that drive.\n\nWhen creating a Drive, a corresponding folder must be created as well. This will act as the root folder of the drive. This separation of drive and folder entity enables features such as folder view queries, renaming, and linking.\n\nArFS: "0.14"\nCipher?: "AES256-GCM"\nCipher-IV?: "<12 byte initialization vector as Base64>"\nContent-Type: "<application/json | application/octet-stream>"\nDrive-Id: "<uuid>"\nDrive-Privacy: "<public | private>"\nDrive-Auth-Mode?: "password"\nEntity-Type: "drive"\nUnix-Time: "<seconds since unix epoch>"\n\nMetadata JSON {\n    "name": "<user defined drive name>",\n    "rootFolderId": "<uuid of the drive root folder>"\n}\n\n\nDrive Entity Transaction Example\n\n\n# Folder\n\nA folder is a logical grouping of other folders and files. Folder entity metadata transactions without a parent folder id are considered the Drive Root Folder of their corresponding Drives. All other Folder entities must have a parent folder id. Since folders do not have underlying data, there is no Folder data transaction required.\n\nArFS: "0.14",\nCipher?: "AES256-GCM",\nCipher-IV?: "<12 byte initialization vector as Base64>",\nContent-Type: "<application/json | application/octet-stream>",\nDrive-Id: "<drive uuid>",\nEntity-Type: "folder",\nFolder-Id: "<uuid>",\nParent-Folder-Id?: "<parent folder uuid>",\nUnix-Time: "<seconds since unix epoch>"\n\nMetadata JSON {\n    "name": "<user defined folder name>",\n    "isHidden": false\n}\n\n\nFolder Entity Transaction Example\n\n\n# File\n\nA File contains uploaded data, like a photo, document, or movie.\n\nIn the Arweave File System, a single file is broken into 2 parts - its metadata and its data.\n\nIn the Arweave File System, a single file is broken into 2 parts - its metadata and its data.\n\nA File entity metadata transaction does not include the actual File data. Instead, the File data must be uploaded as a separate transaction, called the File Data Transaction. The File JSON metadata transaction contains a reference to the File Data Transaction ID so that it can retrieve the actual data. This separation allows for file metadata to be updated without requiring the file itself to be reuploaded. It also ensures that private files can have their JSON Metadata Transaction encrypted as well, ensuring that no one without authorization can see either the file or its metadata.\n\nArFS: "0.14",\nCipher?: "AES256-GCM",\nCipher-IV?: "<12 byte initialization vector as Base64>",\nContent-Type: "<application/json | application/octet-stream>",\nDrive-Id: "<drive uuid>",\nEntity-Type: "file",\nFile-Id: "<uuid>",\nParent-Folder-Id: "<parent folder uuid>",\nUnix-Time: "<seconds since unix epoch>"\n\n\nMetadata JSON {\n    "name": "<user defined file name with extension eg. happyBirthday.jpg>",\n    "size": <computed file size - int>,\n    "lastModifiedDate": <timestamp for OS reported time of file\'s last modified date represented as milliseconds since unix epoch - int>,\n    "dataTxId": "<transaction id of stored data>",\n    "dataContentType": "<the mime type of the data associated with this file entity>",\n    "isHidden": false,\n    "pinnedDataOwner": "<the address of the original owner of the data where the file is pointing to>", # Optional\n}\n\n\n\n# Pinning Files\n\nSince the version v0.13, ArFS suports Pins. Pins are files whose data may be any transaction uploaded to Arweave, that may or may not be owned by the wallet that created the pin.\n\nWhen a new File Pin is created, the only created transaction is the Metadata Transaction. The dataTxId field will point it to any transaction in Arweave, and the optional pinnedDataOwner field is gonna hold the address of the wallet that owns the original copy of the data transaction.\n\n\n# File Data Transaction Example\n\nThe File Data Transaction contains limited information about the file, such as the information required to decrypt it, or the Content-Type (mime-type) needed to view in the browser.\n\nCipher?: "AES256-GCM",\nCipher-IV?: "<12 byte initialization vector as Base64>",\nContent-Type: "<file mime-type | application/octet-stream>",\n { File Data - Encrypted if private }\n\n\n\n# File Metadata Transaction Example\n\nThe the File Metadata Transaction contains the GQL Tags necessary to identify the file within a drive and folder.\n\nIts data contains the JSON metadata for the file. This includes the file name, size, last modified date, data transaction id, and data content type.\n\nArFS: "0.14",\nCipher?: "AES256-GCM",\nCipher-IV?: "<12 byte initialization vector as Base64>",\nContent-Type: "<application/json | application/octet-stream>",\nDrive-Id: "<drive uuid>",\nEntity-Type: "file",\nFile-Id: "<uuid>",\nParent-Folder-Id: "<parent folder uuid>",\nUnix-Time: "<seconds since unix epoch>",\n { File JSON Metadata - Encrypted if private }\n\n\n\n# Snapshot\n\nArFS applications generate the latest state of a drive by querying for all ArFS transactions made relating to a user\'s particular Drive-Id. This includes both paged queries for indexed ArFS data via GQL, as well as the ArFS JSON metadata entries for each ArFS transaction.\n\nFor small drives (less than 1000 files), a few thousand requests for very small volumes of data can be achieved relatively quickly and reliably. For larger drives, however, this results in long sync times to pull every piece of ArFS metadata when the local database cache is empty. This can also potentially trigger rate-limiting related ArWeave Gateway delays.\n\nOnce a drive state has been completely, and accurately generated, in can be rolled up into a single snapshot and uploaded as an Arweave transaction. ArFS clients can use GQL to find and retrieve this snapshot in order to rapidly reconstitute the total state of the drive, or a large portion of it. They can then query individual transactions performed after the snapshot.\n\nThis optional method offers convenience and resource efficiency when building the drive state, at the cost of paying for uploading the snapshot data. Using this method means a client will only have to iterate through a few snapshots instead of every transaction performed on the drive.\n\n\n# Snapshot Entity Tags\n\nSnapshot entities require the following tags. These are queried by ArFS clients to find drive snapshots, organize them together with any other transactions not included within them, and build the latest state of the drive.\n\nArFS: "0.14",\nDrive-Id: "<drive uuid that this snapshot is associated with>",\nEntity-Type: "snapshot",\nSnapshot-Id: "<uuid of this snapshot entity>",\nContent-Type: "<application/json>",\nBlock-Start: "<the minimum block height from which transactions were searched for in this snapshot, eg. 0>",\nBlock-End: "<the maximum block height from which transactions were searched for in this snapshot, eg 1007568>",\nData-Start: "<the first block in which transaction data was found in this snapshot, eg 854300",\nData-End: "<the last block in which transaction was found in this snapshot, eg 1001671",\nUnix-Time: "<seconds since unix epoch>"\n\n\nSnapshot Transaction GQL tags example\n\n\n# Snapshot Entity Data\n\nA JSON data object must also be uploaded with every ArFS Snapshot entity. THis data contains all ArFS Drive, Folder, and File metadata changes within the associated drive, as well as any previous Snapshots. The Snapshot Data contains an array txSnapshots. Each item includes both the GQL and ArFS metadata details of each transaction made for the associated drive, within the snapshot\'s start and end period.\n\nA tsSnapshot contains a gqlNode object which uses the same GQL tags interface returned by the Arweave Gateway. It includes all of the important block, owner, tags, and bundledIn information needed by ArFS clients. It also contains a dataJson object which stores the correlated Data JSON for that ArFS entity.\n\nFor private drives, the dataJson object contains the JSON-string-escaped encrypted text of the associated file or folder. This encrypted text uses the file\'s existing Cipher and Cipher-IV. This ensures clients can decrypt this information quickly using the existing ArFS privacy protocols.\n\n{\n  "txSnapshots": [\n    {\n      "gqlNode": {\n        "id": "bWCvIc3cOzwVgquD349HUVsn5Dd1_GIri8Dglok41Vg",\n        "owner": {\n          "address": "hlWRbyJ6WUoErm3b0wqVgd1l3LTgaQeLBhB36v2HxgY"\n        },\n        "bundledIn": {\n          "id": "39n5evzP1Ip9MhGytuFm7F3TDaozwHuVUbS55My-MBk"\n        },\n        "block": {\n          "height": 1062005,\n          "timestamp": 1669053791\n        },\n        "tags": [\n          {\n            "name": "Content-Type",\n            "value": "application/json"\n          },\n          {\n            "name": "ArFS",\n            "value": "0.11"\n          },\n          {\n            "name": "Entity-Type",\n            "value": "drive"\n          },\n          {\n            "name": "Drive-Id",\n            "value": "f27abc4b-ed6f-4108-a9f5-e545fc4ff55b"\n          },\n          {\n            "name": "Drive-Privacy",\n            "value": "public"\n          },\n          {\n            "name": "App-Name",\n            "value": "ArDrive-App"\n          },\n          {\n            "name": "App-Platform",\n            "value": "Web"\n          },\n          {\n            "name": "App-Version",\n            "value": "1.39.0"\n          },\n          {\n            "name": "Unix-Time",\n            "value": "1669053323"\n          }\n        ]\n      },\n      "dataJson": "{\\"name\\":\\"november\\",\\"rootFolderId\\":\\"71dfc1cb-5368-4323-972a-e9dd0b1c63a0\\", \\"isHidden\\":false}"\n    }\n  ]\n}\n\n\nSnapshot Transaction JSON data example\n\n\n# Schema Diagrams\n\nThe following diagrams show complete examples of Drive, Folder, and File entity Schemas.\n\n\n# Public Drive\n\nPublic Drive Schema\n\n\n# Private Drive\n\nPrivate Drive Schema',normalizedContent:'# entity types\n\n\n# overview\n\narweave transactions are composed of transaction headers and data payloads.\n\narfs entities, therefore, have their data split between being stored as tags on their transaction header and encoded as json and stored as the data of a transaction. in the case of private entities, json data and file data payloads are always encrypted according to the protocol processes defined below.\n\n * drive entities require a single metadata transaction, with standard drive tags and encoded json with secondary metadata.\n\n * folder entities require a single metadata transaction, with standard folder tags and an encoded json with secondary metadata.\n\n * file entities require a metadata transaction, with standard file tags and an encoded data json with secondary metadata relating to the file.\n\n * file entities also require a second data transaction, which includes a limited set of file tags and the actual file data itself.\n\n * snapshot entities require a single transaction. which contains a data json with all of the drive’s rolled up arfs metadata and standard snapshot gql tags that identify the snapshot.\n\narfs v0.14 introduces the ishidden metadata property. ishidden is a boolean (true/false) that tells clients if they should display the file or folder. hidden files still exist and will be included in snapshots, but should not be rendered by clients. if ishidden is not present, its value should be assumed false.\n\n\n# drive\n\na drive is the highest level logical grouping of folders and files. all folders and files must be part of a drive, and reference the drive id of that drive.\n\nwhen creating a drive, a corresponding folder must be created as well. this will act as the root folder of the drive. this separation of drive and folder entity enables features such as folder view queries, renaming, and linking.\n\narfs: "0.14"\ncipher?: "aes256-gcm"\ncipher-iv?: "<12 byte initialization vector as base64>"\ncontent-type: "<application/json | application/octet-stream>"\ndrive-id: "<uuid>"\ndrive-privacy: "<public | private>"\ndrive-auth-mode?: "password"\nentity-type: "drive"\nunix-time: "<seconds since unix epoch>"\n\nmetadata json {\n    "name": "<user defined drive name>",\n    "rootfolderid": "<uuid of the drive root folder>"\n}\n\n\ndrive entity transaction example\n\n\n# folder\n\na folder is a logical grouping of other folders and files. folder entity metadata transactions without a parent folder id are considered the drive root folder of their corresponding drives. all other folder entities must have a parent folder id. since folders do not have underlying data, there is no folder data transaction required.\n\narfs: "0.14",\ncipher?: "aes256-gcm",\ncipher-iv?: "<12 byte initialization vector as base64>",\ncontent-type: "<application/json | application/octet-stream>",\ndrive-id: "<drive uuid>",\nentity-type: "folder",\nfolder-id: "<uuid>",\nparent-folder-id?: "<parent folder uuid>",\nunix-time: "<seconds since unix epoch>"\n\nmetadata json {\n    "name": "<user defined folder name>",\n    "ishidden": false\n}\n\n\nfolder entity transaction example\n\n\n# file\n\na file contains uploaded data, like a photo, document, or movie.\n\nin the arweave file system, a single file is broken into 2 parts - its metadata and its data.\n\nin the arweave file system, a single file is broken into 2 parts - its metadata and its data.\n\na file entity metadata transaction does not include the actual file data. instead, the file data must be uploaded as a separate transaction, called the file data transaction. the file json metadata transaction contains a reference to the file data transaction id so that it can retrieve the actual data. this separation allows for file metadata to be updated without requiring the file itself to be reuploaded. it also ensures that private files can have their json metadata transaction encrypted as well, ensuring that no one without authorization can see either the file or its metadata.\n\narfs: "0.14",\ncipher?: "aes256-gcm",\ncipher-iv?: "<12 byte initialization vector as base64>",\ncontent-type: "<application/json | application/octet-stream>",\ndrive-id: "<drive uuid>",\nentity-type: "file",\nfile-id: "<uuid>",\nparent-folder-id: "<parent folder uuid>",\nunix-time: "<seconds since unix epoch>"\n\n\nmetadata json {\n    "name": "<user defined file name with extension eg. happybirthday.jpg>",\n    "size": <computed file size - int>,\n    "lastmodifieddate": <timestamp for os reported time of file\'s last modified date represented as milliseconds since unix epoch - int>,\n    "datatxid": "<transaction id of stored data>",\n    "datacontenttype": "<the mime type of the data associated with this file entity>",\n    "ishidden": false,\n    "pinneddataowner": "<the address of the original owner of the data where the file is pointing to>", # optional\n}\n\n\n\n# pinning files\n\nsince the version v0.13, arfs suports pins. pins are files whose data may be any transaction uploaded to arweave, that may or may not be owned by the wallet that created the pin.\n\nwhen a new file pin is created, the only created transaction is the metadata transaction. the datatxid field will point it to any transaction in arweave, and the optional pinneddataowner field is gonna hold the address of the wallet that owns the original copy of the data transaction.\n\n\n# file data transaction example\n\nthe file data transaction contains limited information about the file, such as the information required to decrypt it, or the content-type (mime-type) needed to view in the browser.\n\ncipher?: "aes256-gcm",\ncipher-iv?: "<12 byte initialization vector as base64>",\ncontent-type: "<file mime-type | application/octet-stream>",\n { file data - encrypted if private }\n\n\n\n# file metadata transaction example\n\nthe the file metadata transaction contains the gql tags necessary to identify the file within a drive and folder.\n\nits data contains the json metadata for the file. this includes the file name, size, last modified date, data transaction id, and data content type.\n\narfs: "0.14",\ncipher?: "aes256-gcm",\ncipher-iv?: "<12 byte initialization vector as base64>",\ncontent-type: "<application/json | application/octet-stream>",\ndrive-id: "<drive uuid>",\nentity-type: "file",\nfile-id: "<uuid>",\nparent-folder-id: "<parent folder uuid>",\nunix-time: "<seconds since unix epoch>",\n { file json metadata - encrypted if private }\n\n\n\n# snapshot\n\narfs applications generate the latest state of a drive by querying for all arfs transactions made relating to a user\'s particular drive-id. this includes both paged queries for indexed arfs data via gql, as well as the arfs json metadata entries for each arfs transaction.\n\nfor small drives (less than 1000 files), a few thousand requests for very small volumes of data can be achieved relatively quickly and reliably. for larger drives, however, this results in long sync times to pull every piece of arfs metadata when the local database cache is empty. this can also potentially trigger rate-limiting related arweave gateway delays.\n\nonce a drive state has been completely, and accurately generated, in can be rolled up into a single snapshot and uploaded as an arweave transaction. arfs clients can use gql to find and retrieve this snapshot in order to rapidly reconstitute the total state of the drive, or a large portion of it. they can then query individual transactions performed after the snapshot.\n\nthis optional method offers convenience and resource efficiency when building the drive state, at the cost of paying for uploading the snapshot data. using this method means a client will only have to iterate through a few snapshots instead of every transaction performed on the drive.\n\n\n# snapshot entity tags\n\nsnapshot entities require the following tags. these are queried by arfs clients to find drive snapshots, organize them together with any other transactions not included within them, and build the latest state of the drive.\n\narfs: "0.14",\ndrive-id: "<drive uuid that this snapshot is associated with>",\nentity-type: "snapshot",\nsnapshot-id: "<uuid of this snapshot entity>",\ncontent-type: "<application/json>",\nblock-start: "<the minimum block height from which transactions were searched for in this snapshot, eg. 0>",\nblock-end: "<the maximum block height from which transactions were searched for in this snapshot, eg 1007568>",\ndata-start: "<the first block in which transaction data was found in this snapshot, eg 854300",\ndata-end: "<the last block in which transaction was found in this snapshot, eg 1001671",\nunix-time: "<seconds since unix epoch>"\n\n\nsnapshot transaction gql tags example\n\n\n# snapshot entity data\n\na json data object must also be uploaded with every arfs snapshot entity. this data contains all arfs drive, folder, and file metadata changes within the associated drive, as well as any previous snapshots. the snapshot data contains an array txsnapshots. each item includes both the gql and arfs metadata details of each transaction made for the associated drive, within the snapshot\'s start and end period.\n\na tssnapshot contains a gqlnode object which uses the same gql tags interface returned by the arweave gateway. it includes all of the important block, owner, tags, and bundledin information needed by arfs clients. it also contains a datajson object which stores the correlated data json for that arfs entity.\n\nfor private drives, the datajson object contains the json-string-escaped encrypted text of the associated file or folder. this encrypted text uses the file\'s existing cipher and cipher-iv. this ensures clients can decrypt this information quickly using the existing arfs privacy protocols.\n\n{\n  "txsnapshots": [\n    {\n      "gqlnode": {\n        "id": "bwcvic3cozwvgqud349huvsn5dd1_giri8dglok41vg",\n        "owner": {\n          "address": "hlwrbyj6wuoerm3b0wqvgd1l3ltgaqelbhb36v2hxgy"\n        },\n        "bundledin": {\n          "id": "39n5evzp1ip9mhgytufm7f3tdaozwhuvubs55my-mbk"\n        },\n        "block": {\n          "height": 1062005,\n          "timestamp": 1669053791\n        },\n        "tags": [\n          {\n            "name": "content-type",\n            "value": "application/json"\n          },\n          {\n            "name": "arfs",\n            "value": "0.11"\n          },\n          {\n            "name": "entity-type",\n            "value": "drive"\n          },\n          {\n            "name": "drive-id",\n            "value": "f27abc4b-ed6f-4108-a9f5-e545fc4ff55b"\n          },\n          {\n            "name": "drive-privacy",\n            "value": "public"\n          },\n          {\n            "name": "app-name",\n            "value": "ardrive-app"\n          },\n          {\n            "name": "app-platform",\n            "value": "web"\n          },\n          {\n            "name": "app-version",\n            "value": "1.39.0"\n          },\n          {\n            "name": "unix-time",\n            "value": "1669053323"\n          }\n        ]\n      },\n      "datajson": "{\\"name\\":\\"november\\",\\"rootfolderid\\":\\"71dfc1cb-5368-4323-972a-e9dd0b1c63a0\\", \\"ishidden\\":false}"\n    }\n  ]\n}\n\n\nsnapshot transaction json data example\n\n\n# schema diagrams\n\nthe following diagrams show complete examples of drive, folder, and file entity schemas.\n\n\n# public drive\n\npublic drive schema\n\n\n# private drive\n\nprivate drive schema',charsets:{cjk:!0}},{title:"ArFS Protocol: A Decentralized File System on Arweave",frontmatter:{permalink:"/docs/arfs/"},regularPath:"/docs/arfs/overview.html",relativePath:"docs/arfs/overview.md",key:"v-4f037d1a",path:"/docs/arfs/",headers:[{level:2,title:"Key Features",slug:"key-features",normalizedTitle:"key features",charIndex:716},{level:3,title:"File Structure",slug:"file-structure",normalizedTitle:"file structure",charIndex:733},{level:3,title:"Metadata",slug:"metadata",normalizedTitle:"metadata",charIndex:956},{level:3,title:"File Permissions",slug:"file-permissions",normalizedTitle:"file permissions",charIndex:1212},{level:3,title:"File Versioning",slug:"file-versioning",normalizedTitle:"file versioning",charIndex:1460},{level:3,title:"Data Deduplication",slug:"data-deduplication",normalizedTitle:"data deduplication",charIndex:1715},{level:3,title:"Search and Discovery",slug:"search-and-discovery",normalizedTitle:"search and discovery",charIndex:1999},{level:3,title:"Interoperability",slug:"interoperability",normalizedTitle:"interoperability",charIndex:2220},{level:2,title:"Getting Started",slug:"getting-started",normalizedTitle:"getting started",charIndex:2457},{level:2,title:"ArFS Version History",slug:"arfs-version-history",normalizedTitle:"arfs version history",charIndex:2683},{level:2,title:"Resources",slug:"resources",normalizedTitle:"resources",charIndex:3497}],headersStr:"Key Features File Structure Metadata File Permissions File Versioning Data Deduplication Search and Discovery Interoperability Getting Started ArFS Version History Resources",content:"# ArFS Protocol: A Decentralized File System on Arweave\n\nArweave File System, or “ArFS” is a data modeling, storage, and retrieval protocol designed to emulate common file system operations and to provide aspects of mutability to your data hierarchy on Arweave's otherwise permanent, immutable data storage blockweave.\n\nDue to Arweave's permanent, immutable and public nature traditional file system operations such as permissions, file/folder renaming and moving, and file updates cannot be done by simply updating the on-chain data model.\n\nArFS works around this by implementing a privacy and encryption pattern and defining an append-only transaction data model using tags within Arweave Transaction headers.\n\n\n# Key Features\n\n\n# File Structure\n\nArFS organizes files and folders using a hierarchical structure. Files are stored as individual transactions on the Arweave blockchain, while folders are metadata that reference these file transactions.\n\n\n# Metadata\n\nEach file and folder has associated metadata, such as the name, type, size, and modification timestamp. ArFS leverages Arweave's tagging system to store this metadata in a standardized format, which allows for easy querying and organization.\n\n\n# File Permissions\n\nArFS supports public and private file permissions. Public files can be accessed by anyone on the network, while private files are encrypted using the owner's private key, ensuring only they can decrypt and access the content.\n\n\n# File Versioning\n\nArFS supports versioning of files, allowing users to store multiple versions of a file and access previous versions at any time. This is achieved by linking new file transactions to previous versions through the use of metadata tags.\n\n\n# Data Deduplication\n\nTo minimize storage redundancy and costs, ArFS employs data deduplication techniques. If a user tries to store a file that already exists on the network, the protocol will simply create a new reference to the existing file instead of storing a duplicate copy.\n\n\n# Search and Discovery\n\nArFS enables users to search and discover files based on their metadata, such as file names, types, and tags. This is made possible by indexing the metadata stored within the Arweave blockchain.\n\n\n# Interoperability\n\nArFS is designed to be interoperable with other decentralized applications and services built on the Arweave network. This allows for seamless integration and collaboration between different applications and users.\n\n\n# Getting Started\n\nTo start using ArFS, you'll need to familiarize yourself with the Arweave ecosystem, acquire AR tokens to cover storage costs, and choose a compatible client or library to interact with the ArFS protocol.\n\n\n# ArFS Version History\n\nVERSION   DATE             RELEASE NOTES\n0.10      August 2020      The brief, beta version that was in use during initial\n                           testing of ArDrive across Web (Dart) and legacy CLI\n                           (Typescript).\n0.11      September 2020   Includes all of the major functionality supporting file\n                           systems on Arweave including new drives, folders, files,\n                           renames, moves and privacy.\n0.12      December 2022    Added Snapshot entities to support quick synchronization of\n                           drive state.\n0.13      August 2023      Added pins\n0.14      January 2024     Added isHidden property to file and folder metadata to\n                           enable clients to \"hide\" content from end users.\n\n\n# Resources\n\nFor more information, documentation, and community support, refer to the following resources:\n\n * Arweave Official Website\n * Arweave Developer Documentation\n * Arweave Community Forums",normalizedContent:"# arfs protocol: a decentralized file system on arweave\n\narweave file system, or “arfs” is a data modeling, storage, and retrieval protocol designed to emulate common file system operations and to provide aspects of mutability to your data hierarchy on arweave's otherwise permanent, immutable data storage blockweave.\n\ndue to arweave's permanent, immutable and public nature traditional file system operations such as permissions, file/folder renaming and moving, and file updates cannot be done by simply updating the on-chain data model.\n\narfs works around this by implementing a privacy and encryption pattern and defining an append-only transaction data model using tags within arweave transaction headers.\n\n\n# key features\n\n\n# file structure\n\narfs organizes files and folders using a hierarchical structure. files are stored as individual transactions on the arweave blockchain, while folders are metadata that reference these file transactions.\n\n\n# metadata\n\neach file and folder has associated metadata, such as the name, type, size, and modification timestamp. arfs leverages arweave's tagging system to store this metadata in a standardized format, which allows for easy querying and organization.\n\n\n# file permissions\n\narfs supports public and private file permissions. public files can be accessed by anyone on the network, while private files are encrypted using the owner's private key, ensuring only they can decrypt and access the content.\n\n\n# file versioning\n\narfs supports versioning of files, allowing users to store multiple versions of a file and access previous versions at any time. this is achieved by linking new file transactions to previous versions through the use of metadata tags.\n\n\n# data deduplication\n\nto minimize storage redundancy and costs, arfs employs data deduplication techniques. if a user tries to store a file that already exists on the network, the protocol will simply create a new reference to the existing file instead of storing a duplicate copy.\n\n\n# search and discovery\n\narfs enables users to search and discover files based on their metadata, such as file names, types, and tags. this is made possible by indexing the metadata stored within the arweave blockchain.\n\n\n# interoperability\n\narfs is designed to be interoperable with other decentralized applications and services built on the arweave network. this allows for seamless integration and collaboration between different applications and users.\n\n\n# getting started\n\nto start using arfs, you'll need to familiarize yourself with the arweave ecosystem, acquire ar tokens to cover storage costs, and choose a compatible client or library to interact with the arfs protocol.\n\n\n# arfs version history\n\nversion   date             release notes\n0.10      august 2020      the brief, beta version that was in use during initial\n                           testing of ardrive across web (dart) and legacy cli\n                           (typescript).\n0.11      september 2020   includes all of the major functionality supporting file\n                           systems on arweave including new drives, folders, files,\n                           renames, moves and privacy.\n0.12      december 2022    added snapshot entities to support quick synchronization of\n                           drive state.\n0.13      august 2023      added pins\n0.14      january 2024     added ishidden property to file and folder metadata to\n                           enable clients to \"hide\" content from end users.\n\n\n# resources\n\nfor more information, documentation, and community support, refer to the following resources:\n\n * arweave official website\n * arweave developer documentation\n * arweave community forums",charsets:{}},{title:"Privacy",frontmatter:{},regularPath:"/docs/arfs/privacy.html",relativePath:"docs/arfs/privacy.md",key:"v-18d0587a",path:"/docs/arfs/privacy.html",headers:[{level:2,title:"Deriving Keys",slug:"deriving-keys",normalizedTitle:"deriving keys",charIndex:1229},{level:2,title:"Private Drives",slug:"private-drives",normalizedTitle:"private drives",charIndex:2283},{level:2,title:"Private Files",slug:"private-files",normalizedTitle:"private files",charIndex:3776}],headersStr:"Deriving Keys Private Drives Private Files",content:'# Privacy\n\nThe Arweave blockweave is inherently public. But with apps that use ArFS, like ArDrive, your private data never leaves your computer without using military grade (and quantum resistant) encryption. This privacy layer is applied at the Drive level, and users determine whether a Drive is public or private when they first create it. Private drives must follow the ArFS privacy model.\n\nWith ArDrive specifically, every file within a Private Drive is symmetrically encrypted using AES-256-GCM (for small files and metadata transactions) or AES-256-CTR (for large files, over 100MiB). Every Private drive has a master "Drive Key" which uses a combination of the user\'s Arweave wallet signature, a user defined drive password, and a unique drive identifier (uuidv4). Each file has its own "File Key" derived from the "Drive Key". This allows for single files to be shared without exposing access to the other files within the Drive.\n\nOnce a file is encrypted and stored on Arweave, it is locked forever and can only be decrypted using its file key.\n\nNOTE: Usable encryption standards are not limited to AES-256-GCM or AES-256-CTR. Any Encryption method may be used so long as it is clearly indicated in the cipher tag.\n\n\n# Deriving Keys\n\nPrivate drives have a global drive key, D, and multiple file keys F, for encryption. This enables a drive to have as many uniquely encrypted files as needed. One key is used for all versions of a single file (since new file versions use the same File-Id)\n\nD is used for encrypting both Drive and Folder metadata, while F is used for encrypting File metadata and the actual stored data. Having these different keys, D and F, allows a user to share specific files without revealing the contents of their entire drive.\n\nD is derived using HKDF-SHA256 with an unsalted RSA-PSS signature of the drive\'s id and a user provided password.\n\nF is also derived using HKDF-SHA256 with the drive key and the file\'s id.\n\nOther wallets (like ArConnect) integrate with this Key Derivation protocol just exposing an API to collect a signature from a given Arweave Wallet in order to get the SHA-256 signature needed for the HKDF to derive the Drive Key.\n\nAn example implementation, using Dart, is available here, with a Typescript implementation here.\n\n\n# Private Drives\n\nDrives can store either public or private data. This is indicated by the Drive-Privacy tag in the Drive entity metadata.\n\nDrive-Privacy: "<public | private>"\n\n\nIf a Drive entity is private, an additional tag Drive-Auth-Mode must also be used to indicate how the Drive Key is derived. ArDrive clients currently leverage a secure password along with the Arweave Wallet private key signature to derive the global Drive Key.\n\nDrive-Auth-Mode?: \'password\'\n\n\nOn every encrypted Drive Entity, a Cipher tag must be specified, along with the public parameters for decrypting the data. This is done by specifying the parameter with a Cipher-* tag. eg. Cipher-IV. If the parameter is byte data, it must be encoded as Base64 in the tag.\n\nArDrive clients currently leverage AES256-GCM for all symmetric encryption, which requires a Cipher Initialization Vector consisting of 12 random bytes.\n\nCipher?: "AES256-GCM"\nCipher-IV?: "<12 byte initialization vector as Base64>"\n\n\nAdditionally, all encrypted transactions must have the Content-Type tag application/octet-stream as opposed to application/json\n\nPrivate Drive Entities and their corresponding Root Folder Entities will both use these keys and ciphers generated to symmetrically encrypt the JSON files that are included in the transaction. This ensures that only the Drive Owner (and whomever the keys have been shared with) can open the drive, discover the root folder, and continue to load the rest of the children in the drive.\n\n\n# Private Files\n\nWhen a file is uploaded to a private drive, it by default also becomes private and leverages the same drive keys used for its parent drive. Each unique file in a drive will get its own set of file keys based off of that file\'s unique FileId. If a single file gets a new version, its File-Id will be reused, effectively leveraging the same File Key for all versions in that file\'s history.\n\nThese file keys can be shared by the drive\'s owner as needed.\n\nPrivate File entities have both its metadata and data transactions encrypted using the same File Key, ensuring all facets of the data is truly private. As such, both the file\'s metadata and data transactions must both have a unique Cipher-IV and Cipher tag:\n\nCipher?: "AES256-GCM"\nCipher-IV?: "<12 byte initialization vector as Base64>"\n\n\nJust like drives, private files must have the Content-Type tag set as application/octet-stream in both its metadata and data transactions:\n\nContent-Type: "application/octet-stream"\n',normalizedContent:'# privacy\n\nthe arweave blockweave is inherently public. but with apps that use arfs, like ardrive, your private data never leaves your computer without using military grade (and quantum resistant) encryption. this privacy layer is applied at the drive level, and users determine whether a drive is public or private when they first create it. private drives must follow the arfs privacy model.\n\nwith ardrive specifically, every file within a private drive is symmetrically encrypted using aes-256-gcm (for small files and metadata transactions) or aes-256-ctr (for large files, over 100mib). every private drive has a master "drive key" which uses a combination of the user\'s arweave wallet signature, a user defined drive password, and a unique drive identifier (uuidv4). each file has its own "file key" derived from the "drive key". this allows for single files to be shared without exposing access to the other files within the drive.\n\nonce a file is encrypted and stored on arweave, it is locked forever and can only be decrypted using its file key.\n\nnote: usable encryption standards are not limited to aes-256-gcm or aes-256-ctr. any encryption method may be used so long as it is clearly indicated in the cipher tag.\n\n\n# deriving keys\n\nprivate drives have a global drive key, d, and multiple file keys f, for encryption. this enables a drive to have as many uniquely encrypted files as needed. one key is used for all versions of a single file (since new file versions use the same file-id)\n\nd is used for encrypting both drive and folder metadata, while f is used for encrypting file metadata and the actual stored data. having these different keys, d and f, allows a user to share specific files without revealing the contents of their entire drive.\n\nd is derived using hkdf-sha256 with an unsalted rsa-pss signature of the drive\'s id and a user provided password.\n\nf is also derived using hkdf-sha256 with the drive key and the file\'s id.\n\nother wallets (like arconnect) integrate with this key derivation protocol just exposing an api to collect a signature from a given arweave wallet in order to get the sha-256 signature needed for the hkdf to derive the drive key.\n\nan example implementation, using dart, is available here, with a typescript implementation here.\n\n\n# private drives\n\ndrives can store either public or private data. this is indicated by the drive-privacy tag in the drive entity metadata.\n\ndrive-privacy: "<public | private>"\n\n\nif a drive entity is private, an additional tag drive-auth-mode must also be used to indicate how the drive key is derived. ardrive clients currently leverage a secure password along with the arweave wallet private key signature to derive the global drive key.\n\ndrive-auth-mode?: \'password\'\n\n\non every encrypted drive entity, a cipher tag must be specified, along with the public parameters for decrypting the data. this is done by specifying the parameter with a cipher-* tag. eg. cipher-iv. if the parameter is byte data, it must be encoded as base64 in the tag.\n\nardrive clients currently leverage aes256-gcm for all symmetric encryption, which requires a cipher initialization vector consisting of 12 random bytes.\n\ncipher?: "aes256-gcm"\ncipher-iv?: "<12 byte initialization vector as base64>"\n\n\nadditionally, all encrypted transactions must have the content-type tag application/octet-stream as opposed to application/json\n\nprivate drive entities and their corresponding root folder entities will both use these keys and ciphers generated to symmetrically encrypt the json files that are included in the transaction. this ensures that only the drive owner (and whomever the keys have been shared with) can open the drive, discover the root folder, and continue to load the rest of the children in the drive.\n\n\n# private files\n\nwhen a file is uploaded to a private drive, it by default also becomes private and leverages the same drive keys used for its parent drive. each unique file in a drive will get its own set of file keys based off of that file\'s unique fileid. if a single file gets a new version, its file-id will be reused, effectively leveraging the same file key for all versions in that file\'s history.\n\nthese file keys can be shared by the drive\'s owner as needed.\n\nprivate file entities have both its metadata and data transactions encrypted using the same file key, ensuring all facets of the data is truly private. as such, both the file\'s metadata and data transactions must both have a unique cipher-iv and cipher tag:\n\ncipher?: "aes256-gcm"\ncipher-iv?: "<12 byte initialization vector as base64>"\n\n\njust like drives, private files must have the content-type tag set as application/octet-stream in both its metadata and data transactions:\n\ncontent-type: "application/octet-stream"\n',charsets:{cjk:!0}},{title:"Drive Write Operations",frontmatter:{},regularPath:"/docs/arfs/usage/change/drives.html",relativePath:"docs/arfs/usage/change/drives.md",key:"v-2f7f848c",path:"/docs/arfs/usage/change/drives.html",headers:[{level:2,title:"Rename Drives",slug:"rename-drives",normalizedTitle:"rename drives",charIndex:29}],headersStr:"Rename Drives",content:"# Drive Write Operations\n\n\n# Rename Drives\n\n * A new root folder metadata transaction is created when a user wants to rename an existing drive.\n * The new root folder metadata transaction reuses the existing drive's Drive-Id and Folder-Id, and copies all of its old metadata values, except the drive's and folder's name field must be updated in its data JSON to the new drive name.\n   * For private drives, new ciphers are generated for this new root folder metadata transaction.\n * The new root folder transaction must not have any Parent-Folder-Id since it is a root folder.",normalizedContent:"# drive write operations\n\n\n# rename drives\n\n * a new root folder metadata transaction is created when a user wants to rename an existing drive.\n * the new root folder metadata transaction reuses the existing drive's drive-id and folder-id, and copies all of its old metadata values, except the drive's and folder's name field must be updated in its data json to the new drive name.\n   * for private drives, new ciphers are generated for this new root folder metadata transaction.\n * the new root folder transaction must not have any parent-folder-id since it is a root folder.",charsets:{}},{title:"Schema Diagrams",frontmatter:{},regularPath:"/docs/arfs/schema-diagrams.html",relativePath:"docs/arfs/schema-diagrams.md",key:"v-3120da0c",path:"/docs/arfs/schema-diagrams.html",headers:[{level:2,title:"Schema Diagrams",slug:"schema-diagrams",normalizedTitle:"schema diagrams",charIndex:2},{level:3,title:"Public Drive",slug:"public-drive",normalizedTitle:"public drive",charIndex:112},{level:3,title:"Private Drive",slug:"private-drive",normalizedTitle:"private drive",charIndex:150}],headersStr:"Schema Diagrams Public Drive Private Drive",content:"# Schema Diagrams\n\nThe following diagrams show complete examples of Drive, Folder, and File entity Schemas.\n\n\n# Public Drive\n\nPublic Drive Schema\n\n\n# Private Drive\n\nPrivate Drive Schema\n\nArweave GQL Tag Byte Limit is restricted to 2048. There is no determined limit on Data JSON custom metadata, though more data results in a higher upload cost.",normalizedContent:"# schema diagrams\n\nthe following diagrams show complete examples of drive, folder, and file entity schemas.\n\n\n# public drive\n\npublic drive schema\n\n\n# private drive\n\nprivate drive schema\n\narweave gql tag byte limit is restricted to 2048. there is no determined limit on data json custom metadata, though more data results in a higher upload cost.",charsets:{}},{title:"File Write Operations",frontmatter:{},regularPath:"/docs/arfs/usage/change/files.html",relativePath:"docs/arfs/usage/change/files.md",key:"v-2eaf1140",path:"/docs/arfs/usage/change/files.html",headers:[{level:2,title:"Move File",slug:"move-file",normalizedTitle:"move file",charIndex:28},{level:2,title:"Rename File",slug:"rename-file",normalizedTitle:"rename file",charIndex:602},{level:2,title:"Update File Version",slug:"update-file-version",normalizedTitle:"update file version",charIndex:1171},{level:2,title:"Hide or Unhide File",slug:"hide-or-unhide-file",normalizedTitle:"hide or unhide file",charIndex:2050}],headersStr:"Move File Rename File Update File Version Hide or Unhide File",content:"# File Write Operations\n\n\n# Move File\n\nFiles can be moved from one folder to another within the same Drive.\n\n * A new file metadata transaction is created when a user wants to move a file into a different folder.\n * The new file metadata transaction copies all of the file’s old metadata values, but the file’s Parent-Folder-Id must be updated to the Folder-Id of the folder is was just moved to.\n   * For private files, a new Cipher-IV is generated for this new metadata transaction.\n * File’s must not be allowed to be moved into a folder if a file exists in that folder with the same file name.\n\n\n# Rename File\n\nFiles can be renamed from one name to another.\n\n * A new file metadata transaction is created when a user wants to rename an existing file.\n * The new file metadata transaction reuses the existing file’s File-Id and copies all of it’s old metadata values, but the file’s name field in its Data JSON must be updated to the new file name and extension.\n   * For private files, a new Cipher-IV is generated for this new metadata transaction.\n * File’s must not be allowed to be renamed to the name of another file with that same name in that same folder.\n\n\n# Update File Version\n\nWhen a user adds a new file to a folder, and there is a file in that folder with the same name, then a new file version is created.\n\n * A new file version uses the same File-Id of the file with the matching name and same Parent-Folder-Id.\n * The file upload process is followed and new File Metadata and Data transactions are created.\n * However a new UUID is not generated and the same File-Id and associated metadata is used for this new version\n * The new File Metadata Transaction points to the new Data transaction.\n   * Since the File-Id remains the same, the File Keys for private files can decrypt all versions of that file.\n   * For private files, new Cipher-IVs are generated for this new metadata and data transaction\n * ArFS clients can now iterate through the state of this file, since it will have multiple versions using the same File-Id.\n\n\n# Hide or Unhide File\n\nChanging the value of isHidden in a file's metadata will change whether or not a client should display that file.",normalizedContent:"# file write operations\n\n\n# move file\n\nfiles can be moved from one folder to another within the same drive.\n\n * a new file metadata transaction is created when a user wants to move a file into a different folder.\n * the new file metadata transaction copies all of the file’s old metadata values, but the file’s parent-folder-id must be updated to the folder-id of the folder is was just moved to.\n   * for private files, a new cipher-iv is generated for this new metadata transaction.\n * file’s must not be allowed to be moved into a folder if a file exists in that folder with the same file name.\n\n\n# rename file\n\nfiles can be renamed from one name to another.\n\n * a new file metadata transaction is created when a user wants to rename an existing file.\n * the new file metadata transaction reuses the existing file’s file-id and copies all of it’s old metadata values, but the file’s name field in its data json must be updated to the new file name and extension.\n   * for private files, a new cipher-iv is generated for this new metadata transaction.\n * file’s must not be allowed to be renamed to the name of another file with that same name in that same folder.\n\n\n# update file version\n\nwhen a user adds a new file to a folder, and there is a file in that folder with the same name, then a new file version is created.\n\n * a new file version uses the same file-id of the file with the matching name and same parent-folder-id.\n * the file upload process is followed and new file metadata and data transactions are created.\n * however a new uuid is not generated and the same file-id and associated metadata is used for this new version\n * the new file metadata transaction points to the new data transaction.\n   * since the file-id remains the same, the file keys for private files can decrypt all versions of that file.\n   * for private files, new cipher-ivs are generated for this new metadata and data transaction\n * arfs clients can now iterate through the state of this file, since it will have multiple versions using the same file-id.\n\n\n# hide or unhide file\n\nchanging the value of ishidden in a file's metadata will change whether or not a client should display that file.",charsets:{}},{title:"Folder Write Operations",frontmatter:{},regularPath:"/docs/arfs/usage/change/folders.html",relativePath:"docs/arfs/usage/change/folders.md",key:"v-18c2b964",path:"/docs/arfs/usage/change/folders.html",headers:[{level:2,title:"Move Folder",slug:"move-folder",normalizedTitle:"move folder",charIndex:30},{level:2,title:"Rename Folder",slug:"rename-folder",normalizedTitle:"rename folder",charIndex:658}],headersStr:"Move Folder Rename Folder",content:"# Folder Write Operations\n\n\n# Move Folder\n\nFolders can be moved from one folder to another within the same Drive.\n\n * A new file metadata transaction is created when a user wants to move a folder into a different folder.\n * The new file metadata transaction reuses the existing folder’s Folder-Id and copies all of it’s old metadata values, but the file’s Parent-Folder-Id must be updated to the Folder-Id of the folder is was just moved to.\n   * For private folders, new ciphers are generated for this new metadata transaction.\n * Folder’s must not be allowed to be moved into a folder if another folder exists in that folder with the same folder name.\n\n\n# Rename Folder\n\nFolders can be renamed from one name to another.\n\n * A new folder metadata transaction is created when a user wants to rename an existing folder.\n * The new folder metadata transaction reuses the existing folder’s Folder-Id and copies all of it’s old metadata values, but the folder’s name field in its Data JSON must be updated to the new folder name.\n   * For private folders, new ciphers are generated for this new metadata transaction.\n * Folders must not be allowed to be renamed to the name of another folder with that same name in that same folder.",normalizedContent:"# folder write operations\n\n\n# move folder\n\nfolders can be moved from one folder to another within the same drive.\n\n * a new file metadata transaction is created when a user wants to move a folder into a different folder.\n * the new file metadata transaction reuses the existing folder’s folder-id and copies all of it’s old metadata values, but the file’s parent-folder-id must be updated to the folder-id of the folder is was just moved to.\n   * for private folders, new ciphers are generated for this new metadata transaction.\n * folder’s must not be allowed to be moved into a folder if another folder exists in that folder with the same folder name.\n\n\n# rename folder\n\nfolders can be renamed from one name to another.\n\n * a new folder metadata transaction is created when a user wants to rename an existing folder.\n * the new folder metadata transaction reuses the existing folder’s folder-id and copies all of it’s old metadata values, but the folder’s name field in its data json must be updated to the new folder name.\n   * for private folders, new ciphers are generated for this new metadata transaction.\n * folders must not be allowed to be renamed to the name of another folder with that same name in that same folder.",charsets:{}},{frontmatter:{},regularPath:"/docs/arfs/usage/change/snapshots.html",relativePath:"docs/arfs/usage/change/snapshots.md",key:"v-09d6f550",path:"/docs/arfs/usage/change/snapshots.html",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Create Drive",frontmatter:{permalink:"/docs/arfs/usage/create/"},regularPath:"/docs/arfs/usage/create/create-drive.html",relativePath:"docs/arfs/usage/create/create-drive.md",key:"v-9356a30c",path:"/docs/arfs/usage/create/",headers:[{level:2,title:"New Drive Entity",slug:"new-drive-entity",normalizedTitle:"new drive entity",charIndex:175},{level:2,title:"New Root Folder Entity",slug:"new-root-folder-entity",normalizedTitle:"new root folder entity",charIndex:1313}],headersStr:"New Drive Entity New Root Folder Entity",content:"# Create Drive\n\nTo properly create a new drive, two new entities need to be created: a new Drive entity and a new Folder entity to serve as the root folder of that drive.\n\n\n# New Drive Entity\n\n * The user must specify a name of the drive which is stored within the Drive Entity's metadata JSON.\n * ArDrive generates a new unique uuidv4 for the drive entity's Drive-Id.\n * ArDrive also generates a new unique uuidv4 for the drive entity's rootFolderId, which will refer to the Folder-Id of the new folder entity that will be created.\n   * This rootFolderId is stored within the Drive Entity's metadata JSON.\n * Drive Entity Metadata transactions must have Entity-Type: \"drive\".\n * ArDrive will that the current local system time as seconds since Unix epoch for the Drive Entity's Unix-Time.\n * The Drive Entity's Drive-Privacy must also be set to public or private in order for its subfolders and files to have the correct security settings.\n * If the drive is private:\n   * Its Cipher tag must be filled out with the correct encryption algorithm (currently AES256-GCM).\n   * Its Cipher-IV tag must be filled out with the generated Initialization Vector for the private drive.\n   * The ArFS client must derive the Drive Key and encrypt the Drive Entity's metadata JSON using the assigned Cipher and Cipher-IV.\n\n\n# New Root Folder Entity\n\n * The name of the drive and folder entities must be the same.\n   * This name is stored within the Folder Entity's metadata JSON.\n * The Folder Entity's Folder-Id must match the rootFolderId previously created for the Drive Entity.\n * The Folder Entity's Drive-Id must match the Drive-Id previously created for the Drive Entity.\n * The Folder Entity must not include a Parent-Folder-Id tag.\n   * This is how it is determined to be the root folder for a drive.\n * Folder Entity metadata transactions must have Entity-Type: 'folder'.\n * The client gets the user's local time for the Unix-Time tag, represented as seconds since Unix Epoch.\n * Public folders must have the content type Content-Type: \"application/json\".\n * If the folder is private\n   * Its Cipher tag must be filled out with the correct encryption algorithm (currently AES256-GCM).\n   * Its Cipher-IV tag must be filled out with the generated Initialization Vector for the private folder.\n   * Its content type must be Content-Type: \"application/octet-stream\".\n   * The ArFS client must encrypt the Drive Entity's metadata JSON using the assigned Cipher and Cipher-IV.",normalizedContent:"# create drive\n\nto properly create a new drive, two new entities need to be created: a new drive entity and a new folder entity to serve as the root folder of that drive.\n\n\n# new drive entity\n\n * the user must specify a name of the drive which is stored within the drive entity's metadata json.\n * ardrive generates a new unique uuidv4 for the drive entity's drive-id.\n * ardrive also generates a new unique uuidv4 for the drive entity's rootfolderid, which will refer to the folder-id of the new folder entity that will be created.\n   * this rootfolderid is stored within the drive entity's metadata json.\n * drive entity metadata transactions must have entity-type: \"drive\".\n * ardrive will that the current local system time as seconds since unix epoch for the drive entity's unix-time.\n * the drive entity's drive-privacy must also be set to public or private in order for its subfolders and files to have the correct security settings.\n * if the drive is private:\n   * its cipher tag must be filled out with the correct encryption algorithm (currently aes256-gcm).\n   * its cipher-iv tag must be filled out with the generated initialization vector for the private drive.\n   * the arfs client must derive the drive key and encrypt the drive entity's metadata json using the assigned cipher and cipher-iv.\n\n\n# new root folder entity\n\n * the name of the drive and folder entities must be the same.\n   * this name is stored within the folder entity's metadata json.\n * the folder entity's folder-id must match the rootfolderid previously created for the drive entity.\n * the folder entity's drive-id must match the drive-id previously created for the drive entity.\n * the folder entity must not include a parent-folder-id tag.\n   * this is how it is determined to be the root folder for a drive.\n * folder entity metadata transactions must have entity-type: 'folder'.\n * the client gets the user's local time for the unix-time tag, represented as seconds since unix epoch.\n * public folders must have the content type content-type: \"application/json\".\n * if the folder is private\n   * its cipher tag must be filled out with the correct encryption algorithm (currently aes256-gcm).\n   * its cipher-iv tag must be filled out with the generated initialization vector for the private folder.\n   * its content type must be content-type: \"application/octet-stream\".\n   * the arfs client must encrypt the drive entity's metadata json using the assigned cipher and cipher-iv.",charsets:{}},{title:"Create File",frontmatter:{},regularPath:"/docs/arfs/usage/create/create-file.html",relativePath:"docs/arfs/usage/create/create-file.md",key:"v-7cc0117c",path:"/docs/arfs/usage/create/create-file.html",headers:[{level:2,title:"New File Entity",slug:"new-file-entity",normalizedTitle:"new file entity",charIndex:18}],headersStr:"New File Entity",content:'# Create File\n\n\n# New File Entity\n\n * A new file metadata transaction and a separate data transaction are created when a user wants to create a new file.\n * Files can only be created in existing drives, and must have a valid Drive-Id.\n * Files can only be created in existing parent folders, and must have a valid Parent-Folder-Id.\n * The new File Entity Data transaction must only specify the file’s mime type aka Content-Type.\n * The new file metadata transaction must generate a new UUIDv4 for the File-Id.\n * File metadata transactions must have Entity-Type: "file".\n * The client gets the user’s local time for the Unix-Time tag, represented as Seconds Since Unix Epoch.\n   * The client populates the File Entity Metadata Transaction Data JSON after creating the data transaction.\n   * name The name of the file including extension.\n   * size The size of the file on disk, in bytes as an integer.\n   * lastModifiedDate The file’s last time of modification as reported by the user’s operating system, in milliseconds since Unix epoch.\n   * dataTxId The Arweave transaction id of this File Entity’s Data Transaction.\n   * dataContentType The mime time of this File Entity’s data must be determined by the client.\n   * isHidden A boolean telling clients if they should display the file or not.\n * If the File is private:\n   * Its Cipher tag must be filled out with the respective encryption algorithm (currently AES256-GCM) for both the Metadata and Data transactions.\n   * Its Cipher-IV tag must be filled out with the generated Initialization Vector for both the Metadata and Data transactions. Each one has its own unique IV.\n   * It must have the content type Content-Type: "application/octet-stream" for both the Metadata and Data transactions.\n   * The ArFS client must encrypt the File Entity’s Data and Metadata JSON using their assigned Cipher and Cipher-IV',normalizedContent:'# create file\n\n\n# new file entity\n\n * a new file metadata transaction and a separate data transaction are created when a user wants to create a new file.\n * files can only be created in existing drives, and must have a valid drive-id.\n * files can only be created in existing parent folders, and must have a valid parent-folder-id.\n * the new file entity data transaction must only specify the file’s mime type aka content-type.\n * the new file metadata transaction must generate a new uuidv4 for the file-id.\n * file metadata transactions must have entity-type: "file".\n * the client gets the user’s local time for the unix-time tag, represented as seconds since unix epoch.\n   * the client populates the file entity metadata transaction data json after creating the data transaction.\n   * name the name of the file including extension.\n   * size the size of the file on disk, in bytes as an integer.\n   * lastmodifieddate the file’s last time of modification as reported by the user’s operating system, in milliseconds since unix epoch.\n   * datatxid the arweave transaction id of this file entity’s data transaction.\n   * datacontenttype the mime time of this file entity’s data must be determined by the client.\n   * ishidden a boolean telling clients if they should display the file or not.\n * if the file is private:\n   * its cipher tag must be filled out with the respective encryption algorithm (currently aes256-gcm) for both the metadata and data transactions.\n   * its cipher-iv tag must be filled out with the generated initialization vector for both the metadata and data transactions. each one has its own unique iv.\n   * it must have the content type content-type: "application/octet-stream" for both the metadata and data transactions.\n   * the arfs client must encrypt the file entity’s data and metadata json using their assigned cipher and cipher-iv',charsets:{}},{title:"Create Folder",frontmatter:{},regularPath:"/docs/arfs/usage/create/create-folder.html",relativePath:"docs/arfs/usage/create/create-folder.md",key:"v-690a4650",path:"/docs/arfs/usage/create/create-folder.html",headers:[{level:2,title:"New Folder Entity",slug:"new-folder-entity",normalizedTitle:"new folder entity",charIndex:20}],headersStr:"New Folder Entity",content:'# Create Folder\n\n\n# New Folder Entity\n\nFolders can be created to organize files.\n\n * A new Folder Entity Metadata is created when a user wants to create a new folder.\n * Folders can only be created in existing drives, and must have a valid Drive-Id.\n * Folders can only be created in existing parent folders, and must have a valid Parent-Folder-Id.\n * The new folder metadata transaction must generate a new UUIDv4 for the Folder-Id.\n * Folder Entity Metadata transactions must have Entity-Type: "folder".\n * The client gets the user’s local time for the Unix-Time tag, represented as Seconds Since Unix Epoch.\n * The user defined folder name is added to the name property in the folder’s metadata transaction Data JSON.\n * Public folders must have the content type Content-Type: "<application/json>".\n * If the folder is private:\n   * Its Cipher tag must be filled out with the respective encryption algorithm (currently AES256-GCM).\n   * Its Cipher-IV tag must be filled out with the generated Initialization Vector for the private folder.\n   * It must have the content type Content-Type: "application/octet-stream".\n   * The ArFS client must encrypt the Folder entity’s metadata JSON using the assigned Cipher and Cipher-IV.',normalizedContent:'# create folder\n\n\n# new folder entity\n\nfolders can be created to organize files.\n\n * a new folder entity metadata is created when a user wants to create a new folder.\n * folders can only be created in existing drives, and must have a valid drive-id.\n * folders can only be created in existing parent folders, and must have a valid parent-folder-id.\n * the new folder metadata transaction must generate a new uuidv4 for the folder-id.\n * folder entity metadata transactions must have entity-type: "folder".\n * the client gets the user’s local time for the unix-time tag, represented as seconds since unix epoch.\n * the user defined folder name is added to the name property in the folder’s metadata transaction data json.\n * public folders must have the content type content-type: "<application/json>".\n * if the folder is private:\n   * its cipher tag must be filled out with the respective encryption algorithm (currently aes256-gcm).\n   * its cipher-iv tag must be filled out with the generated initialization vector for the private folder.\n   * it must have the content type content-type: "application/octet-stream".\n   * the arfs client must encrypt the folder entity’s metadata json using the assigned cipher and cipher-iv.',charsets:{}},{frontmatter:{},regularPath:"/docs/arfs/usage/create/create-snapshot.html",relativePath:"docs/arfs/usage/create/create-snapshot.md",key:"v-58f7366c",path:"/docs/arfs/usage/create/create-snapshot.html",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Extending Schemas",frontmatter:{next:!1},regularPath:"/docs/arfs/usage/extending-schemas.html",relativePath:"docs/arfs/usage/extending-schemas.md",key:"v-0877efcc",path:"/docs/arfs/usage/extending-schemas.html",headers:[{level:2,title:"Extending Schemas",slug:"extending-schemas",normalizedTitle:"extending schemas",charIndex:2}],headersStr:"Extending Schemas",content:'# Extending Schemas\n\nWeb app and clients can extend the ArFS Schema as needed by adding additional tags into the File and Folder MetaData Transaction JSON. This gives Developers additional flexibility to support specific application needs, without breaking the overall data model or impacting privacy.\n\nFor example a Music Sharing App could use the following expanded File Metadata for specific music files.\n\n{\n    "name": "<user defined file name>",\n    "size": <computed file size - int>,\n    "lastModifiedDate": <timestamp for OS reported time of file\'s last modified date represented as milliseconds since unix epoch - int>\n    "dataTxId": "<transaction id of stored data>",\n    "dataContentType": "<the mime type of the data associated with this file entity>"\n    "bandName": "<the name of the band/artist>"\n    "bandAlbum": "<the album of the band/artist>"\n    "albumSong": "<the title of the song>"\n}\n\n\nAdditionally, the above extended Metadata fields could be added directly as a transaction tag as well, in order to support GraphQL queries.\n\n\nArweave Transaction Headers can only fit a maximum of 2048 bytes total, so this must be taken into account by clients writing custom GQL tags.',normalizedContent:'# extending schemas\n\nweb app and clients can extend the arfs schema as needed by adding additional tags into the file and folder metadata transaction json. this gives developers additional flexibility to support specific application needs, without breaking the overall data model or impacting privacy.\n\nfor example a music sharing app could use the following expanded file metadata for specific music files.\n\n{\n    "name": "<user defined file name>",\n    "size": <computed file size - int>,\n    "lastmodifieddate": <timestamp for os reported time of file\'s last modified date represented as milliseconds since unix epoch - int>\n    "datatxid": "<transaction id of stored data>",\n    "datacontenttype": "<the mime type of the data associated with this file entity>"\n    "bandname": "<the name of the band/artist>"\n    "bandalbum": "<the album of the band/artist>"\n    "albumsong": "<the title of the song>"\n}\n\n\nadditionally, the above extended metadata fields could be added directly as a transaction tag as well, in order to support graphql queries.\n\n\narweave transaction headers can only fit a maximum of 2048 bytes total, so this must be taken into account by clients writing custom gql tags.',charsets:{}},{title:"All ArDrive CLI Commands",frontmatter:{},regularPath:"/docs/cli/all-commands.html",relativePath:"docs/cli/all-commands.md",key:"v-47c1f97a",path:"/docs/cli/all-commands.html",headersStr:null,content:"# All ArDrive CLI Commands\n\n  █████╗ ██████╗ ██████╗ ██████╗ ██╗██╗   ██╗███████╗\n ██╔══██╗██╔══██╗██╔══██╗██╔══██╗██║██║   ██║██╔════╝\n ███████║██████╔╝██║  ██║██████╔╝██║██║   ██║█████╗\n ██╔══██║██╔══██╗██║  ██║██╔══██╗██║╚██╗ ██╔╝██╔══╝\n ██║  ██║██║  ██║██████╔╝██║  ██║██║ ╚████╔╝ ███████╗\n ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝  ╚══════╝\n                  ██████╗██╗     ██╗\n                 ██╔════╝██║     ██║\n                 ██║     ██║     ██║\n                 ██║     ██║     ██║\n                 ╚██████╗███████╗██║\n                  ╚═════╝╚══════╝╚═╝\n\n\nWrite ArFS\n===========\ncreate-drive\ncreate-folder\nupload-file\ncreate-manifest\n\nmove-file\nmove-folder\n\nretry-tx\n\n\nRead ArFS\n===========\nfile-info\nfolder-info\ndrive-info\n\nlist-folder\nlist-drive\nlist-all-drives\n\ndownload-file\ndownload-folder\ndownload-drive\n\nWallet Ops\n===========\ngenerate-seedphrase\ngenerate-wallet\n\nget-address\nget-balance\nsend-ar\n\nget-drive-key\nget-file-key\n\nlast-tx\n\n\nArweave Ops\n===========\nbase-reward\nget-mempool\ncreate-tx\nsend-tx\ntx-status\n\n# Learn more about a command:\nardrive <command> --help\n",normalizedContent:"# all ardrive cli commands\n\n  █████╗ ██████╗ ██████╗ ██████╗ ██╗██╗   ██╗███████╗\n ██╔══██╗██╔══██╗██╔══██╗██╔══██╗██║██║   ██║██╔════╝\n ███████║██████╔╝██║  ██║██████╔╝██║██║   ██║█████╗\n ██╔══██║██╔══██╗██║  ██║██╔══██╗██║╚██╗ ██╔╝██╔══╝\n ██║  ██║██║  ██║██████╔╝██║  ██║██║ ╚████╔╝ ███████╗\n ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝  ╚══════╝\n                  ██████╗██╗     ██╗\n                 ██╔════╝██║     ██║\n                 ██║     ██║     ██║\n                 ██║     ██║     ██║\n                 ╚██████╗███████╗██║\n                  ╚═════╝╚══════╝╚═╝\n\n\nwrite arfs\n===========\ncreate-drive\ncreate-folder\nupload-file\ncreate-manifest\n\nmove-file\nmove-folder\n\nretry-tx\n\n\nread arfs\n===========\nfile-info\nfolder-info\ndrive-info\n\nlist-folder\nlist-drive\nlist-all-drives\n\ndownload-file\ndownload-folder\ndownload-drive\n\nwallet ops\n===========\ngenerate-seedphrase\ngenerate-wallet\n\nget-address\nget-balance\nsend-ar\n\nget-drive-key\nget-file-key\n\nlast-tx\n\n\narweave ops\n===========\nbase-reward\nget-mempool\ncreate-tx\nsend-tx\ntx-status\n\n# learn more about a command:\nardrive <command> --help\n",charsets:{}},{title:"Getting Help",frontmatter:{},regularPath:"/docs/cli/getting-help.html",relativePath:"docs/cli/getting-help.md",key:"v-4fad50ba",path:"/docs/cli/getting-help.html",headersStr:null,content:"# Getting Help\n\nArDrive Community Discord",normalizedContent:"# getting help\n\nardrive community discord",charsets:{}},{title:"CLI",frontmatter:{homepage:!0,permalink:"/docs/cli/"},regularPath:"/docs/cli/intro.html",relativePath:"docs/cli/intro.md",key:"v-31657474",path:"/docs/cli/",headers:[{level:2,title:"ArFS",slug:"arfs",normalizedTitle:"arfs",charIndex:2864},{level:2,title:"Data Portability",slug:"data-portability",normalizedTitle:"data portability",charIndex:3130},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:3511}],headersStr:"ArFS Data Portability Intended Audience",content:'# CLI\n\nThe ArDrive Command Line Interface (CLI) is a Node.js application for terminal-based ArDrive workflows. It also offers utility operations for securely interacting with Arweave wallets and inspecting various Arweave blockchain conditions.\n\nCreate your first drive and permanently store your first file on the permaweb with a series of simple CLI commands like so:\n\nardrive create-drive --wallet-file /path/to/my/wallet.json --drive-name "Teenage Love Poetry"\n{\n    "created": [\n        {\n            "type": "drive",\n            "metadataTxId": "giv2R8Xj0bbe6l5taBTQJk_38zwIrMH_g1-knSCisjU",\n            "entityId": "898687ea-b678-4f86-b4e7-49560b190356",\n            "bundledIn": "Vj2x4IBEAezBvhj5RgtA247W_q3S10suI6l0E30GPoE",\n            "entityName": "Teenage Love Poetry"\n        },\n        {\n            "type": "folder",\n            "metadataTxId": "VljnttwUxRStnVuPYakF9e2whjhYJVWB0nSxD5dVyJ8",\n            "entityId": "f0c58c11-430c-4383-8e54-4d864cc7e927",\n            "bundledIn": "Vj2x4IBEAezBvhj5RgtA247W_q3S10suI6l0E30GPoE",\n            "entityName": "Teenage Love Poetry"\n        },\n        {\n            "type": "bundle",\n            "bundleTxId": "Vj2x4IBEAezBvhj5RgtA247W_q3S10suI6l0E30GPoE"\n        }\n    ],\n    "tips": [],\n    "fees": {\n        "Vj2x4IBEAezBvhj5RgtA247W_q3S10suI6l0E30GPoE": "44579472"\n    }\n}\n\nardrive upload-file --wallet-file /path/to/my/wallet.json --parent-folder-id "f0c58c11-430c-4383-8e54-4d864cc7e927" --local-path ./helloworld.txt --dest-file-name "ode_to_ardrive.txt"\n{\n    "created": [\n        {\n            "type": "file",\n            "entityName": "ode_to_ardrive.txt",\n            "entityId": "bd2ce978-6ede-4b0d-8f79-2d7bc235a0e0",\n            "dataTxId": "tSMcfvAQu_tKLUkdvRRbqdX93oAf3h6c9eJsSj8mXL4",\n            "metadataTxId": "EvE06MmE9IKeUzFMnxSgY1M5tJX4uHU64-n8Pf_lZfU",\n            "bundledIn": "qjdHiQoWlSjCvhj5RgtA247W_q3S10suI6l0E30GPoE",\n            "sourceUri": "file://Users/BestArDriver/Uploads/helloworld.txt"\n        },\n        {\n            "type": "bundle",\n            "bundleTxId": "qjdHiQoWlSjCvhj5RgtA247W_q3S10suI6l0E30GPoE"\n        }\n    ],\n    "tips": [\n        {\n            "txId": "qjdHiQoWlSjCvhj5RgtA247W_q3S10suI6l0E30GPoE",\n            "recipient": {\n                "address": "i325n3L2UvgcavEM8UnFfY0OWBiyf2RrbNsLStPI73o"\n            },\n            "winston": "10000000"\n        }\n    ],\n    "fees": {\n        "qjdHiQoWlSjCvhj5RgtA247W_q3S10suI6l0E30GPoE": 44579472\n    }\n}\n\n\nThis project is in a state of active development. Use at your own risk!\n\n\n# ArDrive\n\nArDrive is a permanent storage platform whose applications and core libraries offer hierarchical organization, privacy via complete end-to-end encryption, flexibility, extensibility, and access control over your most valuable data, all made possible by its innovative core technology, the Arweave File System (ArFS) Protocol.\n\n\n# ArFS\n\nArFS is a data modeling, storage, and retrieval protocol designed to emulate common file system operations and to provide aspects of mutability to your data hierarchy on Arweave\'s otherwise permanent, immutable data storage blockweave.\n\n\n# Data Portability\n\nData uploaded via the ArDrive CLI, once indexed by Arweave\'s Gateways and sufficiently seeded across enough nodes on the network, can be accessed via all other ArDrive applications including the ArDrive Web application at https://app.ardrive.io.\n\nAll transactions successfully executed by ArDrive can always be inspected in the Viewblock blockchain explorer.\n\n\n# Intended Audience\n\nThis tool is intended for use by:\n\n * ArDrive power users with advanced workflows and resource efficiency in mind: bulk uploaders, those with larger storage demand, game developers, nft creators, storage/db admins, etc.\n * Automation tools\n * Services\n * Terminal aficionados\n * Extant and aspiring cypherpunks\n\nFor deeper integrations with the ArDrive platform, consider using the ArDrive Core (Node) library\'s configurable and intuitive class interfaces directly within your application.',normalizedContent:'# cli\n\nthe ardrive command line interface (cli) is a node.js application for terminal-based ardrive workflows. it also offers utility operations for securely interacting with arweave wallets and inspecting various arweave blockchain conditions.\n\ncreate your first drive and permanently store your first file on the permaweb with a series of simple cli commands like so:\n\nardrive create-drive --wallet-file /path/to/my/wallet.json --drive-name "teenage love poetry"\n{\n    "created": [\n        {\n            "type": "drive",\n            "metadatatxid": "giv2r8xj0bbe6l5tabtqjk_38zwirmh_g1-knscisju",\n            "entityid": "898687ea-b678-4f86-b4e7-49560b190356",\n            "bundledin": "vj2x4ibeaezbvhj5rgta247w_q3s10sui6l0e30gpoe",\n            "entityname": "teenage love poetry"\n        },\n        {\n            "type": "folder",\n            "metadatatxid": "vljnttwuxrstnvupyakf9e2whjhyjvwb0nsxd5dvyj8",\n            "entityid": "f0c58c11-430c-4383-8e54-4d864cc7e927",\n            "bundledin": "vj2x4ibeaezbvhj5rgta247w_q3s10sui6l0e30gpoe",\n            "entityname": "teenage love poetry"\n        },\n        {\n            "type": "bundle",\n            "bundletxid": "vj2x4ibeaezbvhj5rgta247w_q3s10sui6l0e30gpoe"\n        }\n    ],\n    "tips": [],\n    "fees": {\n        "vj2x4ibeaezbvhj5rgta247w_q3s10sui6l0e30gpoe": "44579472"\n    }\n}\n\nardrive upload-file --wallet-file /path/to/my/wallet.json --parent-folder-id "f0c58c11-430c-4383-8e54-4d864cc7e927" --local-path ./helloworld.txt --dest-file-name "ode_to_ardrive.txt"\n{\n    "created": [\n        {\n            "type": "file",\n            "entityname": "ode_to_ardrive.txt",\n            "entityid": "bd2ce978-6ede-4b0d-8f79-2d7bc235a0e0",\n            "datatxid": "tsmcfvaqu_tklukdvrrbqdx93oaf3h6c9ejssj8mxl4",\n            "metadatatxid": "eve06mme9ikeuzfmnxsgy1m5tjx4uhu64-n8pf_lzfu",\n            "bundledin": "qjdhiqowlsjcvhj5rgta247w_q3s10sui6l0e30gpoe",\n            "sourceuri": "file://users/bestardriver/uploads/helloworld.txt"\n        },\n        {\n            "type": "bundle",\n            "bundletxid": "qjdhiqowlsjcvhj5rgta247w_q3s10sui6l0e30gpoe"\n        }\n    ],\n    "tips": [\n        {\n            "txid": "qjdhiqowlsjcvhj5rgta247w_q3s10sui6l0e30gpoe",\n            "recipient": {\n                "address": "i325n3l2uvgcavem8unffy0owbiyf2rrbnslstpi73o"\n            },\n            "winston": "10000000"\n        }\n    ],\n    "fees": {\n        "qjdhiqowlsjcvhj5rgta247w_q3s10sui6l0e30gpoe": 44579472\n    }\n}\n\n\nthis project is in a state of active development. use at your own risk!\n\n\n# ardrive\n\nardrive is a permanent storage platform whose applications and core libraries offer hierarchical organization, privacy via complete end-to-end encryption, flexibility, extensibility, and access control over your most valuable data, all made possible by its innovative core technology, the arweave file system (arfs) protocol.\n\n\n# arfs\n\narfs is a data modeling, storage, and retrieval protocol designed to emulate common file system operations and to provide aspects of mutability to your data hierarchy on arweave\'s otherwise permanent, immutable data storage blockweave.\n\n\n# data portability\n\ndata uploaded via the ardrive cli, once indexed by arweave\'s gateways and sufficiently seeded across enough nodes on the network, can be accessed via all other ardrive applications including the ardrive web application at https://app.ardrive.io.\n\nall transactions successfully executed by ardrive can always be inspected in the viewblock blockchain explorer.\n\n\n# intended audience\n\nthis tool is intended for use by:\n\n * ardrive power users with advanced workflows and resource efficiency in mind: bulk uploaders, those with larger storage demand, game developers, nft creators, storage/db admins, etc.\n * automation tools\n * services\n * terminal aficionados\n * extant and aspiring cypherpunks\n\nfor deeper integrations with the ardrive platform, consider using the ardrive core (node) library\'s configurable and intuitive class interfaces directly within your application.',charsets:{}},{title:"Getting Started",frontmatter:{},regularPath:"/docs/cli/getting-started.html",relativePath:"docs/cli/getting-started.md",key:"v-4fc0d1c8",path:"/docs/cli/getting-started.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:297},{level:3,title:"Git",slug:"git",normalizedTitle:"git",charIndex:439},{level:3,title:"NVM (Optional - Recommended)",slug:"nvm-optional-recommended",normalizedTitle:"nvm (optional - recommended)",charIndex:620},{level:2,title:"Quick Start",slug:"quick-start",normalizedTitle:"quick start",charIndex:116},{level:3,title:"Installing and Starting the CLI From NPM Package",slug:"installing-and-starting-the-cli-from-npm-package",normalizedTitle:"installing and starting the cli from npm package",charIndex:1575},{level:3,title:"Upgrading to the Latest Version",slug:"upgrading-to-the-latest-version",normalizedTitle:"upgrading to the latest version",charIndex:1718},{level:2,title:"Build and Run from Source",slug:"build-and-run-from-source",normalizedTitle:"build and run from source",charIndex:198},{level:3,title:"Install Yarn 3",slug:"install-yarn-3",normalizedTitle:"install yarn 3",charIndex:1913},{level:3,title:"Husky (Developers Only)",slug:"husky-developers-only",normalizedTitle:"husky (developers only)",charIndex:2224},{level:3,title:"Using a custom ArDrive-Core-JS (Optional)",slug:"using-a-custom-ardrive-core-js-optional",normalizedTitle:"using a custom ardrive-core-js (optional)",charIndex:2505},{level:3,title:"Installing and Starting the CLI From Source",slug:"installing-and-starting-the-cli-from-source",normalizedTitle:"installing and starting the cli from source",charIndex:2809},{level:3,title:"Recommended Visual Studio Code extensions (Developers Only)",slug:"recommended-visual-studio-code-extensions-developers-only",normalizedTitle:"recommended visual studio code extensions (developers only)",charIndex:3359},{level:2,title:"Limitations",slug:"limitations",normalizedTitle:"limitations",charIndex:3567}],headersStr:"Prerequisites Git NVM (Optional - Recommended) Quick Start Installing and Starting the CLI From NPM Package Upgrading to the Latest Version Build and Run from Source Install Yarn 3 Husky (Developers Only) Using a custom ArDrive-Core-JS (Optional) Installing and Starting the CLI From Source Recommended Visual Studio Code extensions (Developers Only) Limitations",content:'# Getting Started\n\nTo simply install the latest version of the CLI to your local system and get started, follow the Quick Start instructions. To build and/or develop the CLI from source, follow the Build and Run from Source instructions. In either case, be sure to satisfy the requirements in the Prerequisites section.\n\n\n# Prerequisites\n\nThe following tools must be installed whether performing a Quick Start or Building from Source:\n\n\n# Git\n\nSome of ArDrive\'s dependencies are transitively installed via Git. Install it, if necessary, and ensure that it\'s available within your terminal environment:\n\nDownload Git\n\n\n# NVM (Optional - Recommended)\n\nThis project uses the Node Version Manager (NVM) and an .nvmrc file to lock the recommended Node version used by the latest version of ardrive-core-js.\n\nNote for Windows: We recommend using WSL for setting up NVM on Windows using the instructions described here\n\nFollow these steps to get NVM up and running on your system:\n\n 1. Install NVM using these installation instructions.\n 2. Navigate to this project\'s root directory\n 3. Ensure that the correct version of Node is installed by performing: nvm install\n 4. Use the correct version of Node, by performing: nvm use\n\nIT IS STRONGLY RECOMMENDED THAT YOU AVOID GENERATING WALLETS VIA SEED PHRASE WITH THE CLI USING ANY NODE VERSION OTHER THAN THE ONE SPECIFIED IN .nvmrc.\n\n\n# Quick Start\n\nOnce you\'ve satisfied any necessary prerequisites, the fastest way to get up and running is to globally install the latest version of the ArDrive CLI to your local system via NPM:\n\n\n# Installing and Starting the CLI From NPM Package\n\nnpm install -g ardrive-cli\n\n# then invoke the CLI from anywhere on your system:\nardrive\n\n\n\n# Upgrading to the Latest Version\n\nIf you globally installed the CLI via NPM, then upgrade to the latest version by simply performing:\n\nnpm update -g ardrive-cli\n\n\n\n# Build and Run from Source\n\n\n# Install Yarn 3\n\nBoth the ArDrive CLI and ArDrive Core JS use Yarn 3 to manage dependencies and initiate workflows, so follow the yarn installation instructions in order to get the latest version. In most cases:\n\n# Brew (OSX):\nbrew install yarn\n\n# Or with NPM (all supported platforms):\nnpm install -g yarn\n\n\n\n# Husky (Developers Only)\n\nWe use husky 6.x to manage the git commit hooks that help to improve the quality of our commits. Please run:\n\nyarn husky install\n\n\nto enable git hooks for your local checkout. Without doing so, you risk committing non-compliant code to the repository.\n\n\n# Using a custom ArDrive-Core-JS (Optional)\n\nTo test a with a custom version of the ardrive-core-js library on your local system, change the "ardrive-core-js" line in package.json to the root of your local ardrive-core-js repo:\n\n- "ardrive-core-js": "1.0.0"\n+ "ardrive-core-js": "../ardrive-core-js/"\n\n\n\n# Installing and Starting the CLI From Source\n\nNow that your runtime and/or development environment is set up, to install the package simply run:\n\nyarn && yarn build\n\n\nAnd then start the CLI (always from the root of this repository):\n\nyarn ardrive\n\n\nFor convenience in the non-developer case, you can install the CLI globally on your system by performing the following step:\n\nyarn pack\n\n# then using the path generated by yarn from the step above:\nnpm install i -g /path/to/package.tgz\n\n# then invoke the CLI from anywhere on your system:\nardrive\n\n\n\n# Recommended Visual Studio Code extensions (Developers Only)\n\nTo ensure your environment is compatible, we also recommend the following VSCode extensions:\n\n * ES-Lint\n * Editor-Config\n * Prettier\n * ZipFS\n\n\n# Limitations\n\nNumber of files in a bulk upload: Theoretically unlimited\nMax individual file size: 2GB (Node.js limitation)\nMax file name length: 255 bytes\nMax ANS-104 bundled transaction size: 500 MiB per bundle. App will handle creating multiple bundles.\nMax ANS-104 data item counts per bundled transaction: 250 Files per bundle (500 Data Items).',normalizedContent:'# getting started\n\nto simply install the latest version of the cli to your local system and get started, follow the quick start instructions. to build and/or develop the cli from source, follow the build and run from source instructions. in either case, be sure to satisfy the requirements in the prerequisites section.\n\n\n# prerequisites\n\nthe following tools must be installed whether performing a quick start or building from source:\n\n\n# git\n\nsome of ardrive\'s dependencies are transitively installed via git. install it, if necessary, and ensure that it\'s available within your terminal environment:\n\ndownload git\n\n\n# nvm (optional - recommended)\n\nthis project uses the node version manager (nvm) and an .nvmrc file to lock the recommended node version used by the latest version of ardrive-core-js.\n\nnote for windows: we recommend using wsl for setting up nvm on windows using the instructions described here\n\nfollow these steps to get nvm up and running on your system:\n\n 1. install nvm using these installation instructions.\n 2. navigate to this project\'s root directory\n 3. ensure that the correct version of node is installed by performing: nvm install\n 4. use the correct version of node, by performing: nvm use\n\nit is strongly recommended that you avoid generating wallets via seed phrase with the cli using any node version other than the one specified in .nvmrc.\n\n\n# quick start\n\nonce you\'ve satisfied any necessary prerequisites, the fastest way to get up and running is to globally install the latest version of the ardrive cli to your local system via npm:\n\n\n# installing and starting the cli from npm package\n\nnpm install -g ardrive-cli\n\n# then invoke the cli from anywhere on your system:\nardrive\n\n\n\n# upgrading to the latest version\n\nif you globally installed the cli via npm, then upgrade to the latest version by simply performing:\n\nnpm update -g ardrive-cli\n\n\n\n# build and run from source\n\n\n# install yarn 3\n\nboth the ardrive cli and ardrive core js use yarn 3 to manage dependencies and initiate workflows, so follow the yarn installation instructions in order to get the latest version. in most cases:\n\n# brew (osx):\nbrew install yarn\n\n# or with npm (all supported platforms):\nnpm install -g yarn\n\n\n\n# husky (developers only)\n\nwe use husky 6.x to manage the git commit hooks that help to improve the quality of our commits. please run:\n\nyarn husky install\n\n\nto enable git hooks for your local checkout. without doing so, you risk committing non-compliant code to the repository.\n\n\n# using a custom ardrive-core-js (optional)\n\nto test a with a custom version of the ardrive-core-js library on your local system, change the "ardrive-core-js" line in package.json to the root of your local ardrive-core-js repo:\n\n- "ardrive-core-js": "1.0.0"\n+ "ardrive-core-js": "../ardrive-core-js/"\n\n\n\n# installing and starting the cli from source\n\nnow that your runtime and/or development environment is set up, to install the package simply run:\n\nyarn && yarn build\n\n\nand then start the cli (always from the root of this repository):\n\nyarn ardrive\n\n\nfor convenience in the non-developer case, you can install the cli globally on your system by performing the following step:\n\nyarn pack\n\n# then using the path generated by yarn from the step above:\nnpm install i -g /path/to/package.tgz\n\n# then invoke the cli from anywhere on your system:\nardrive\n\n\n\n# recommended visual studio code extensions (developers only)\n\nto ensure your environment is compatible, we also recommend the following vscode extensions:\n\n * es-lint\n * editor-config\n * prettier\n * zipfs\n\n\n# limitations\n\nnumber of files in a bulk upload: theoretically unlimited\nmax individual file size: 2gb (node.js limitation)\nmax file name length: 255 bytes\nmax ans-104 bundled transaction size: 500 mib per bundle. app will handle creating multiple bundles.\nmax ans-104 data item counts per bundled transaction: 250 files per bundle (500 data items).',charsets:{}},{title:"Read ArFS Data",frontmatter:{permalink:"/docs/arfs/usage/read/"},regularPath:"/docs/arfs/usage/read/read-operations.html",relativePath:"docs/arfs/usage/read/read-operations.md",key:"v-950c4d48",path:"/docs/arfs/usage/read/",headers:[{level:2,title:"Folder/File Paths",slug:"folder-file-paths",normalizedTitle:"folder/file paths",charIndex:1915},{level:2,title:"Folder View Queries",slug:"folder-view-queries",normalizedTitle:"folder view queries",charIndex:2237}],headersStr:"Folder/File Paths Folder View Queries",content:"# Read ArFS Data\n\nClients can perform read operations to create a timeline of entity write transactions which can then be replayed to construct the Drive state. This is done by querying an Arweave GraphQL index for the user’s respective transactions. Arweave GraphQL Guide can provide more information on how to use Arweave GraphQL. If no GraphQL index is available, drive state can only be generated by downloading and inspecting all transactions made by the user’s wallet\n\nThis timeline of transactions should be grouped by the block number of each transaction. At every step of the timeline, the client can check if the entity was written by an authorized user. This also conveniently enables the client to surface a trusted entity version history to the user.\n\nTo determine the owner of a Drive, clients must check for who created the first Drive Entity transaction using that Drive-Id. Until a trusted permissions or ACL system is put in place, any transaction in a drive created by any wallet other than the one who created the first Drive Entity transaction could be considered spam.\n\nThe Unix-Time defined on each transaction should be reserved for tie-breaking same entity updates in the same block and should not be trusted as the source of truth for entity write ordering. This is unimportant for single owner drives but is crucial for multi-owner drives with updateable permissions (currently undefined in this spec) as a malicious user could fake the Unix-Time to modify the drive timeline for other users.\n\n * Drives that have been updated many times can have a long entity timeline which can be a performance bottleneck. To avoid this, clients can cache the drive state locally and sync updates to the file system by only querying for entities in blocks higher than the last time they checked.\n * Not checking for Drive Ownership could result in seeing incorrect drive state and GraphQL queries.\n\n\n# Folder/File Paths\n\nArweaveFS does not store folder or file paths along with entities as these paths will need to be updated whenever the parent folder name changes which can require many updates for deeply nested file systems. Instead, folder/file paths are left for the client to generate from the folder/file names.\n\n\n# Folder View Queries\n\nClients that want to provide users with a quick view of a single folder can simply query for an entity timeline for a particular folder by its id. Clients with multi-owner permissions will additionally have to query for the folder's parent drive entity for permission based filtering of the timeline.",normalizedContent:"# read arfs data\n\nclients can perform read operations to create a timeline of entity write transactions which can then be replayed to construct the drive state. this is done by querying an arweave graphql index for the user’s respective transactions. arweave graphql guide can provide more information on how to use arweave graphql. if no graphql index is available, drive state can only be generated by downloading and inspecting all transactions made by the user’s wallet\n\nthis timeline of transactions should be grouped by the block number of each transaction. at every step of the timeline, the client can check if the entity was written by an authorized user. this also conveniently enables the client to surface a trusted entity version history to the user.\n\nto determine the owner of a drive, clients must check for who created the first drive entity transaction using that drive-id. until a trusted permissions or acl system is put in place, any transaction in a drive created by any wallet other than the one who created the first drive entity transaction could be considered spam.\n\nthe unix-time defined on each transaction should be reserved for tie-breaking same entity updates in the same block and should not be trusted as the source of truth for entity write ordering. this is unimportant for single owner drives but is crucial for multi-owner drives with updateable permissions (currently undefined in this spec) as a malicious user could fake the unix-time to modify the drive timeline for other users.\n\n * drives that have been updated many times can have a long entity timeline which can be a performance bottleneck. to avoid this, clients can cache the drive state locally and sync updates to the file system by only querying for entities in blocks higher than the last time they checked.\n * not checking for drive ownership could result in seeing incorrect drive state and graphql queries.\n\n\n# folder/file paths\n\narweavefs does not store folder or file paths along with entities as these paths will need to be updated whenever the parent folder name changes which can require many updates for deeply nested file systems. instead, folder/file paths are left for the client to generate from the folder/file names.\n\n\n# folder view queries\n\nclients that want to provide users with a quick view of a single folder can simply query for an entity timeline for a particular folder by its id. clients with multi-owner permissions will additionally have to query for the folder's parent drive entity for permission based filtering of the timeline.",charsets:{}},{title:"Overview",frontmatter:{},regularPath:"/docs/core-sdk.html",relativePath:"docs/core-sdk.md",key:"v-0c3bd15a",path:"/docs/core-sdk.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:2},{level:2,title:"Integrating with ArDrive Core",slug:"integrating-with-ardrive-core",normalizedTitle:"integrating with ardrive core",charIndex:314},{level:2,title:"Development Environment Setup",slug:"development-environment-setup",normalizedTitle:"development environment setup",charIndex:3188},{level:3,title:"Recommended Visual Studio Code extensions",slug:"recommended-visual-studio-code-extensions",normalizedTitle:"recommended visual studio code extensions",charIndex:4072},{level:2,title:"Building the Library",slug:"building-the-library",normalizedTitle:"building the library",charIndex:4262},{level:2,title:"Testing the Library",slug:"testing-the-library",normalizedTitle:"testing the library",charIndex:4375},{level:3,title:"Coverage",slug:"coverage",normalizedTitle:"coverage",charIndex:5005},{level:3,title:"Adding tests",slug:"adding-tests",normalizedTitle:"adding tests",charIndex:5485},{level:3,title:"Using Sinon",slug:"using-sinon",normalizedTitle:"using sinon",charIndex:6113},{level:3,title:"Debugging with Power-Assert",slug:"debugging-with-power-assert",normalizedTitle:"debugging with power-assert",charIndex:6373},{level:3,title:"Progress Logging of Transaction Uploads",slug:"progress-logging-of-transaction-uploads",normalizedTitle:"progress logging of transaction uploads",charIndex:7004},{level:3,title:"Persistent Caching of ArFS Entity Metadata",slug:"persistent-caching-of-arfs-entity-metadata",normalizedTitle:"persistent caching of arfs entity metadata",charIndex:8215},{level:3,title:"Applying Custom MetaData to ArFS File Transactions",slug:"applying-custom-metadata-to-arfs-file-transactions",normalizedTitle:"applying custom metadata to arfs file transactions",charIndex:8964}],headersStr:"Overview Integrating with ArDrive Core Development Environment Setup Recommended Visual Studio Code extensions Building the Library Testing the Library Coverage Adding tests Using Sinon Debugging with Power-Assert Progress Logging of Transaction Uploads Persistent Caching of ArFS Entity Metadata Applying Custom MetaData to ArFS File Transactions",content:"# Overview\n\nArDrive Core is a TypeScript library that contains the essential back end application features to support the ArDrive CLI and Desktop apps, such as file management, Permaweb upload/download, wallet management, and other common functions.\n\nEngage with the community in Discord for more information.\n\n\n# Integrating with ArDrive Core\n\nTo add the ArDrive Core library to your project, simply add it as a dependency:\n\nyarn add ardrive-core-js\n\n\nThe recommended approach for integrating with ArDrive Core as a dependency in your project is to construct and use the methods provided on the ArDrive class. Developers can use the convenience function arDriveFactory to construct the ArDrive class.\n\nBelow are a few common examples of interacting with Core:\n\nimport { readJWKFile, arDriveFactory } from 'ardrive-core-js';\n\n// Read wallet from file\nconst myWallet = readJWKFile('/path/to/wallet');\n\n// Construct ArDrive class\nconst arDrive = arDriveFactory({ wallet: myWallet });\n\n// Create a public drive and its root folder\nconst createDriveResult = await arDrive.createPublicDrive({ driveName: 'My-Drive' });\n\n\nimport { wrapFileOrFolder, EID } from 'ardrive-core-js';\n\n// Wrap file for upload\nconst wrappedEntity = wrapFileOrFolder('path/to/file');\n\n// Construct a safe Entity ID Type\nconst destFolderId = EID('10108b54a-eb5e-4134-8ae2-a3946a428ec7');\n\n// Upload a public file to destination folder\nconst uploadFileResult = await arDrive.uploadAllEntities({\n    entitiesToUpload: [{ wrappedEntity, destFolderId }]\n});\n\n\nimport { deriveDriveKey } from 'ardrive-core-js';\n\n// Derive a private drive key from password, wallet, and drive ID\nconst driveKey = await deriveDriveKey(\n    'mySecretPassWord',\n    '12345674a-eb5e-4134-8ae2-a3946a428ec7',\n    JSON.stringify((myWallet as JWKWallet).getPrivateKey())\n);\n\n// Create a private folder\nconst createFolderResult = await arDrive.createPrivateFolder({\n    folderName: 'My New Private Folder',\n    driveKey,\n    parentFolderId: EID('47162534a-eb5e-4134-8ae2-a3946a428ec7')\n});\n\n\nimport { wrapFileOrFolder, EntityKey, EID } from 'ardrive-core-js';\n\n// Derive a private drive key from raw drive key string\nconst driveKey = new EntityKey(Buffer.from('MyAwesomeDriveKeyZZZZZZZZZZZZZZZZZZZZFAKE/s', 'base64'));\n\n// Wrap folder and all of its contents for upload\nconst wrappedFolder = wrapFileOrFolder('path/to/folder');\n\n// Upload a private folder and all its contents\nconst uploadFileResult = await arDrive.uploadAllEntities({\n    entitiesToUpload: [\n        {\n            wrappedEntity: wrappedFolder,\n            destFolderId: EID('76543214a-eb5e-4134-8ae2-a3946a428ec7'),\n            driveKey\n        },\n        // And some other public file to a different destination 🤯\n        {\n          wrappedEntity: someOtherWrappedFile\n          destFolderId: EID('675489321-eb5e-4134-8ae2-a3946a428ec7')\n        }\n    ]\n});\n\n\n// Upload ArFS Entities To Turbo (BETA)\n// The presence of `turboSettings` in `arDriveFactory` enables sending to Turbo\nconst arDrive = arDriveFactory({ wallet: myWallet, turboSettings: {} });\n\nconst uploadFileResult = await arDrive.uploadAllEntities({\n    entitiesToUpload: [{ wrappedEntity, destFolderId }],\n});\n\n\n\n# Development Environment Setup\n\nWe use nvm to manage our Node engine version and, if necessary, to install an npm version that we can then use to install Yarn.\n\nNote for Windows: We recommend using WSL for setting up NVM on Windows using the instructions described here then continue the steps below.\n\n 1. Install nvm using their instructions.\n\n 2. We use Node 18.x -- ensure that the correct Node version is installed and activated by performing nvm install and then nvm use\n\n 3. We use Yarn 3.x please follow the installation guidelines here\n\n 4. We use husky 6.x to manage the git commit hooks that help to improve the quality of our commits. Please run: yarn husky install to enable git hooks for this local repository. Without doing so, you risk committing non-compliant code to the repository.\n\n 5. Install all node package dependencies by running yarn install --check-cache\n\n\n# Recommended Visual Studio Code extensions\n\nTo ensure your environment is compatible, we also recommend the following VSCode extensions:\n\n * ES-Lint\n * Editor-Config\n * Prettier\n * ZipFS\n\n\n# Building the Library\n\nSimply run yarn build. This will clean the project and compile the TypeScript library.\n\n\n# Testing the Library\n\nThis library is setup for Mocha testing with Chai and Sinon. Configuration for Mocha can be found in .mocharc.js\n\nTo run all of the tests use:\n\nyarn test\n\n\nTo run a specific test, use Mocha's grep command. This will cause Mocha to only run the tests that contain the provided RegExp.\n\nThe -g command will only match the characters used in the describe() and it() title arguments. It will not match files names or folders.\n\nFor example:\n\nyarn test -g 'My specific unit test'\n\n\nWill run this test:\n\ndescribe('My specific unit test', () => {\n    it('functions correctly', () => {\n        // ...\n    });\n});\n\n\n\n# Coverage\n\nIstanbul.js (nyc) has been added for code coverage reporting. Configuration for the nyc package can be found in nyc.config.js\n\nOn each yarn test command, nyc will output a code coverage summary in the terminal. In addition, a more detailed HTML version will output to the /coverage directory. Simply run /coverage/index.html in your browser to view the HTML version.\n\nAlternatively, you can view a verbose coverage output in the terminal by running:\n\nyarn coverage\n\n\n\n# Adding tests\n\nThere are many different syntax options available with the Chai library, which can be found in their documentation. For examples on unit testing, visit src/example.test.ts, and for integration testing: tests/example.test.ts.\n\nUnit tests should be located adjacent (or right next to) the file they are referencing. They should also be named the same with the .test.ts extension. In contrast, integration tests will live in the /tests directory.\n\nFor example:\n\nardrive-core-js/\n├── src\n│   ├── fileToTest.ts\n│   └── fileToTest.test.ts   <-- Unit test\n└── tests\n    └── bestApi.test.ts   <----- Integration test\n\n\n\n# Using Sinon\n\nSinon can be used to create spies, mocks, fakes, stubs, and more. There are some basic examples of using the library shown in the example test files shared above.\n\nFor more information on what you can do with Sinon, visit their documentation.\n\n\n# Debugging with Power-Assert\n\nPower-Assert is setup as another testing tool. The library can be used to provide a very detailed output of your failing test cases. This can become super useful while debugging a test.\n\nTo use this tool, it must be imported using this syntax:\n\nimport assert = require('assert');\n\n\nThen use assert in your error throwing test case. Commenting out the Chai assertion will produce a cleaner output:\n\n// expect(failingOutput).to.equal(expectedOutput);\nassert(failingOutput === expectedOutput);\n\n\nAnd finally, to view the detailed error messages in your terminal:\n\nyarn power-assert -g 'My test case'\n\n\n\n# Progress Logging of Transaction Uploads\n\nProgress logging of transaction uploads to stderr can be enabled by setting the ARDRIVE_PROGRESS_LOG environment variable to 1:\n\nUploading file transaction 1 of total 2 transactions...\nTransaction _GKQasQX194a364Hph8Oe-oku1AdfHwxWOw9_JC1yjc Upload Progress: 0%\nTransaction _GKQasQX194a364Hph8Oe-oku1AdfHwxWOw9_JC1yjc Upload Progress: 35%\nTransaction _GKQasQX194a364Hph8Oe-oku1AdfHwxWOw9_JC1yjc Upload Progress: 66%\nTransaction _GKQasQX194a364Hph8Oe-oku1AdfHwxWOw9_JC1yjc Upload Progress: 100%\nUploading file transaction 2 of total 2 transactions...\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 0%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 13%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 28%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 42%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 60%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 76%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 91%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 100%\n\n\n\n# Persistent Caching of ArFS Entity Metadata\n\nTo avoid redundant requests to the Arweave network for immutable ArFS entity metadata, a persistent file cache is created and maintained at:\n\nWindows: <os.homedir()>/ardrive-caches/metadata\nNon-Windows: <os.homedir()>/.ardrive/caches/metadata\n\n\nThe XDG_CACHE_HOME environment variable is honored, where applicable, and will be used in place of os.homedir() in the scenarios described above.\n\nMetadata cache logging to stderr can be enabled by setting the ARDRIVE_CACHE_LOG environment variable to 1.\n\nCache performance is UNDEFINED for multi-process scenarios, but is presumed to be generally usable.\n\nThe cache can be manually cleared safely at any time that any integrating app is not in operation.\n\n\n# Applying Custom MetaData to ArFS File Transactions\n\nCustom metadata can be attached to ArFS File Transactions. Metadata can be applied to either the GQL tags on the MetaData Transaction, the MetaData Transaction's Data JSON, or both.\n\nAll custom tags can be accessed by using by using ArDrive class read methods such as getPublicFile, getPrivateFile, listPrivateFolder, etc.\n\nconst arDrive = arDriveAnonymousFactory({});\nconst fileInfo = await arDrive.getPublicFile({ fileId });\nconst myMetaDataGqlTags = fileInfo.customMetaDataGqlTags;\nconst myMetaDataJsonFields = fileInfo.customMetaDataJson;\n\n\nWhen the custom metadata is attached to the MetaData Transaction's GQL tags, they will become visible on any Arweave GQL gateway and also third party tools that read GQL data.\n\nWhen these tags are added to the MetaData Transaction's Data JSON they can be read by downloading the JSON data directly from https://arweave.net/<metadata tx id>.\n\nTo add this custom metadata to your file metadata transactions, users can pass an object containing custom tags when wrapping content to upload:\n\nconst fileToUpload = wrapFileOrFolder(\n    'path/to/file/on/system', // File or Folder Path\n    'application/custom-content-type', // Custom Content Type\n    customMetaData: { // Custom MetaData\n        metaDataJson: { ['My-Custom-Tag-Name']: 'Single-Custom-Value' },\n        metaDataGqlTags: {\n            ['Another-Custom-Tag']: ['First-Custom-Value', 'Second-Custom-Value', 'Third-Custom-Value']\n        }\n    }\n);\n",normalizedContent:"# overview\n\nardrive core is a typescript library that contains the essential back end application features to support the ardrive cli and desktop apps, such as file management, permaweb upload/download, wallet management, and other common functions.\n\nengage with the community in discord for more information.\n\n\n# integrating with ardrive core\n\nto add the ardrive core library to your project, simply add it as a dependency:\n\nyarn add ardrive-core-js\n\n\nthe recommended approach for integrating with ardrive core as a dependency in your project is to construct and use the methods provided on the ardrive class. developers can use the convenience function ardrivefactory to construct the ardrive class.\n\nbelow are a few common examples of interacting with core:\n\nimport { readjwkfile, ardrivefactory } from 'ardrive-core-js';\n\n// read wallet from file\nconst mywallet = readjwkfile('/path/to/wallet');\n\n// construct ardrive class\nconst ardrive = ardrivefactory({ wallet: mywallet });\n\n// create a public drive and its root folder\nconst createdriveresult = await ardrive.createpublicdrive({ drivename: 'my-drive' });\n\n\nimport { wrapfileorfolder, eid } from 'ardrive-core-js';\n\n// wrap file for upload\nconst wrappedentity = wrapfileorfolder('path/to/file');\n\n// construct a safe entity id type\nconst destfolderid = eid('10108b54a-eb5e-4134-8ae2-a3946a428ec7');\n\n// upload a public file to destination folder\nconst uploadfileresult = await ardrive.uploadallentities({\n    entitiestoupload: [{ wrappedentity, destfolderid }]\n});\n\n\nimport { derivedrivekey } from 'ardrive-core-js';\n\n// derive a private drive key from password, wallet, and drive id\nconst drivekey = await derivedrivekey(\n    'mysecretpassword',\n    '12345674a-eb5e-4134-8ae2-a3946a428ec7',\n    json.stringify((mywallet as jwkwallet).getprivatekey())\n);\n\n// create a private folder\nconst createfolderresult = await ardrive.createprivatefolder({\n    foldername: 'my new private folder',\n    drivekey,\n    parentfolderid: eid('47162534a-eb5e-4134-8ae2-a3946a428ec7')\n});\n\n\nimport { wrapfileorfolder, entitykey, eid } from 'ardrive-core-js';\n\n// derive a private drive key from raw drive key string\nconst drivekey = new entitykey(buffer.from('myawesomedrivekeyzzzzzzzzzzzzzzzzzzzzfake/s', 'base64'));\n\n// wrap folder and all of its contents for upload\nconst wrappedfolder = wrapfileorfolder('path/to/folder');\n\n// upload a private folder and all its contents\nconst uploadfileresult = await ardrive.uploadallentities({\n    entitiestoupload: [\n        {\n            wrappedentity: wrappedfolder,\n            destfolderid: eid('76543214a-eb5e-4134-8ae2-a3946a428ec7'),\n            drivekey\n        },\n        // and some other public file to a different destination 🤯\n        {\n          wrappedentity: someotherwrappedfile\n          destfolderid: eid('675489321-eb5e-4134-8ae2-a3946a428ec7')\n        }\n    ]\n});\n\n\n// upload arfs entities to turbo (beta)\n// the presence of `turbosettings` in `ardrivefactory` enables sending to turbo\nconst ardrive = ardrivefactory({ wallet: mywallet, turbosettings: {} });\n\nconst uploadfileresult = await ardrive.uploadallentities({\n    entitiestoupload: [{ wrappedentity, destfolderid }],\n});\n\n\n\n# development environment setup\n\nwe use nvm to manage our node engine version and, if necessary, to install an npm version that we can then use to install yarn.\n\nnote for windows: we recommend using wsl for setting up nvm on windows using the instructions described here then continue the steps below.\n\n 1. install nvm using their instructions.\n\n 2. we use node 18.x -- ensure that the correct node version is installed and activated by performing nvm install and then nvm use\n\n 3. we use yarn 3.x please follow the installation guidelines here\n\n 4. we use husky 6.x to manage the git commit hooks that help to improve the quality of our commits. please run: yarn husky install to enable git hooks for this local repository. without doing so, you risk committing non-compliant code to the repository.\n\n 5. install all node package dependencies by running yarn install --check-cache\n\n\n# recommended visual studio code extensions\n\nto ensure your environment is compatible, we also recommend the following vscode extensions:\n\n * es-lint\n * editor-config\n * prettier\n * zipfs\n\n\n# building the library\n\nsimply run yarn build. this will clean the project and compile the typescript library.\n\n\n# testing the library\n\nthis library is setup for mocha testing with chai and sinon. configuration for mocha can be found in .mocharc.js\n\nto run all of the tests use:\n\nyarn test\n\n\nto run a specific test, use mocha's grep command. this will cause mocha to only run the tests that contain the provided regexp.\n\nthe -g command will only match the characters used in the describe() and it() title arguments. it will not match files names or folders.\n\nfor example:\n\nyarn test -g 'my specific unit test'\n\n\nwill run this test:\n\ndescribe('my specific unit test', () => {\n    it('functions correctly', () => {\n        // ...\n    });\n});\n\n\n\n# coverage\n\nistanbul.js (nyc) has been added for code coverage reporting. configuration for the nyc package can be found in nyc.config.js\n\non each yarn test command, nyc will output a code coverage summary in the terminal. in addition, a more detailed html version will output to the /coverage directory. simply run /coverage/index.html in your browser to view the html version.\n\nalternatively, you can view a verbose coverage output in the terminal by running:\n\nyarn coverage\n\n\n\n# adding tests\n\nthere are many different syntax options available with the chai library, which can be found in their documentation. for examples on unit testing, visit src/example.test.ts, and for integration testing: tests/example.test.ts.\n\nunit tests should be located adjacent (or right next to) the file they are referencing. they should also be named the same with the .test.ts extension. in contrast, integration tests will live in the /tests directory.\n\nfor example:\n\nardrive-core-js/\n├── src\n│   ├── filetotest.ts\n│   └── filetotest.test.ts   <-- unit test\n└── tests\n    └── bestapi.test.ts   <----- integration test\n\n\n\n# using sinon\n\nsinon can be used to create spies, mocks, fakes, stubs, and more. there are some basic examples of using the library shown in the example test files shared above.\n\nfor more information on what you can do with sinon, visit their documentation.\n\n\n# debugging with power-assert\n\npower-assert is setup as another testing tool. the library can be used to provide a very detailed output of your failing test cases. this can become super useful while debugging a test.\n\nto use this tool, it must be imported using this syntax:\n\nimport assert = require('assert');\n\n\nthen use assert in your error throwing test case. commenting out the chai assertion will produce a cleaner output:\n\n// expect(failingoutput).to.equal(expectedoutput);\nassert(failingoutput === expectedoutput);\n\n\nand finally, to view the detailed error messages in your terminal:\n\nyarn power-assert -g 'my test case'\n\n\n\n# progress logging of transaction uploads\n\nprogress logging of transaction uploads to stderr can be enabled by setting the ardrive_progress_log environment variable to 1:\n\nuploading file transaction 1 of total 2 transactions...\ntransaction _gkqasqx194a364hph8oe-oku1adfhwxwow9_jc1yjc upload progress: 0%\ntransaction _gkqasqx194a364hph8oe-oku1adfhwxwow9_jc1yjc upload progress: 35%\ntransaction _gkqasqx194a364hph8oe-oku1adfhwxwow9_jc1yjc upload progress: 66%\ntransaction _gkqasqx194a364hph8oe-oku1adfhwxwow9_jc1yjc upload progress: 100%\nuploading file transaction 2 of total 2 transactions...\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 0%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 13%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 28%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 42%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 60%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 76%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 91%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 100%\n\n\n\n# persistent caching of arfs entity metadata\n\nto avoid redundant requests to the arweave network for immutable arfs entity metadata, a persistent file cache is created and maintained at:\n\nwindows: <os.homedir()>/ardrive-caches/metadata\nnon-windows: <os.homedir()>/.ardrive/caches/metadata\n\n\nthe xdg_cache_home environment variable is honored, where applicable, and will be used in place of os.homedir() in the scenarios described above.\n\nmetadata cache logging to stderr can be enabled by setting the ardrive_cache_log environment variable to 1.\n\ncache performance is undefined for multi-process scenarios, but is presumed to be generally usable.\n\nthe cache can be manually cleared safely at any time that any integrating app is not in operation.\n\n\n# applying custom metadata to arfs file transactions\n\ncustom metadata can be attached to arfs file transactions. metadata can be applied to either the gql tags on the metadata transaction, the metadata transaction's data json, or both.\n\nall custom tags can be accessed by using by using ardrive class read methods such as getpublicfile, getprivatefile, listprivatefolder, etc.\n\nconst ardrive = ardriveanonymousfactory({});\nconst fileinfo = await ardrive.getpublicfile({ fileid });\nconst mymetadatagqltags = fileinfo.custommetadatagqltags;\nconst mymetadatajsonfields = fileinfo.custommetadatajson;\n\n\nwhen the custom metadata is attached to the metadata transaction's gql tags, they will become visible on any arweave gql gateway and also third party tools that read gql data.\n\nwhen these tags are added to the metadata transaction's data json they can be read by downloading the json data directly from https://arweave.net/<metadata tx id>.\n\nto add this custom metadata to your file metadata transactions, users can pass an object containing custom tags when wrapping content to upload:\n\nconst filetoupload = wrapfileorfolder(\n    'path/to/file/on/system', // file or folder path\n    'application/custom-content-type', // custom content type\n    custommetadata: { // custom metadata\n        metadatajson: { ['my-custom-tag-name']: 'single-custom-value' },\n        metadatagqltags: {\n            ['another-custom-tag']: ['first-custom-value', 'second-custom-value', 'third-custom-value']\n        }\n    }\n);\n",charsets:{}},{title:"Using the CLI",frontmatter:{sidebarDepth:1},regularPath:"/docs/cli/using-the-cli.html",relativePath:"docs/cli/using-the-cli.md",key:"v-e2784654",path:"/docs/cli/using-the-cli.html",headers:[{level:2,title:"CLI Help",slug:"cli-help",normalizedTitle:"cli help",charIndex:20},{level:2,title:"CLI Version",slug:"cli-version",normalizedTitle:"cli version",charIndex:77},{level:2,title:"Wallet Operations",slug:"wallet-operations",normalizedTitle:"wallet operations",charIndex:174},{level:2,title:"Working With Entities",slug:"working-with-entities",normalizedTitle:"working with entities",charIndex:2351},{level:3,title:"Dry Run",slug:"dry-run",normalizedTitle:"dry run",charIndex:3310},{level:3,title:"Uploading to Turbo (BETA)",slug:"uploading-to-turbo-beta",normalizedTitle:"uploading to turbo (beta)",charIndex:3807},{level:2,title:"Working With Drives",slug:"working-with-drives",normalizedTitle:"working with drives",charIndex:4412},{level:3,title:"Understanding Drive Hierarchies",slug:"understanding-drive-hierarchies",normalizedTitle:"understanding drive hierarchies",charIndex:4436},{level:3,title:"Understanding Drive and File Keys",slug:"understanding-drive-and-file-keys",normalizedTitle:"understanding drive and file keys",charIndex:3257},{level:3,title:"Managing Drive Passwords",slug:"managing-drive-passwords",normalizedTitle:"managing drive passwords",charIndex:7051},{level:3,title:"Creating Drives",slug:"creating-drives",normalizedTitle:"creating drives",charIndex:8438},{level:3,title:"Listing Drives for an Address",slug:"listing-drives-for-an-address",normalizedTitle:"listing drives for an address",charIndex:8681},{level:3,title:"Listing Every Entity in a Drive",slug:"listing-every-entity-in-a-drive",normalizedTitle:"listing every entity in a drive",charIndex:9095},{level:3,title:"List Drive Pipeline Examples",slug:"list-drive-pipeline-examples",normalizedTitle:"list drive pipeline examples",charIndex:9937},{level:2,title:"Working With Folders",slug:"working-with-folders",normalizedTitle:"working with folders",charIndex:11260},{level:3,title:"Creating Folders",slug:"creating-folders",normalizedTitle:"creating folders",charIndex:11503},{level:3,title:"Moving Folders",slug:"moving-folders",normalizedTitle:"moving folders",charIndex:12394},{level:3,title:"Renaming Folders",slug:"renaming-folders",normalizedTitle:"renaming folders",charIndex:12711},{level:3,title:"Viewing Folder Metadata",slug:"viewing-folder-metadata",normalizedTitle:"viewing folder metadata",charIndex:13017},{level:3,title:"Listing Contents of a Folder",slug:"listing-contents-of-a-folder",normalizedTitle:"listing contents of a folder",charIndex:13192},{level:2,title:"Working With Files",slug:"working-with-files",normalizedTitle:"working with files",charIndex:17699},{level:3,title:"Uploading a Single File",slug:"uploading-a-single-file",normalizedTitle:"uploading a single file",charIndex:18490},{level:3,title:"IPFS CID Tagging",slug:"ipfs-cid-tagging",normalizedTitle:"ipfs cid tagging",charIndex:19976},{level:3,title:"Progress Logging of Transaction Uploads",slug:"progress-logging-of-transaction-uploads",normalizedTitle:"progress logging of transaction uploads",charIndex:20528},{level:3,title:"Download a Single file (BETA)",slug:"download-a-single-file-beta",normalizedTitle:"download a single file (beta)",charIndex:21739},{level:3,title:"Rename a Single File",slug:"rename-a-single-file",normalizedTitle:"rename a single file",charIndex:22353},{level:3,title:"Uploading a Folder with Files (Bulk Upload)",slug:"uploading-a-folder-with-files-bulk-upload",normalizedTitle:"uploading a folder with files (bulk upload)",charIndex:22690},{level:3,title:"Downloading a Folder with Files",slug:"downloading-a-folder-with-files",normalizedTitle:"downloading a folder with files",charIndex:23108},{level:3,title:"Downloading a Drive",slug:"downloading-a-drive",normalizedTitle:"downloading a drive",charIndex:25070},{level:3,title:"Uploading Multiple Files",slug:"uploading-multiple-files",normalizedTitle:"uploading multiple files",charIndex:25327},{level:3,title:"Name Conflict Resolution on Upload",slug:"name-conflict-resolution-on-upload",normalizedTitle:"name conflict resolution on upload",charIndex:25829},{level:3,title:"Understanding Bundled Transactions",slug:"understanding-bundled-transactions",normalizedTitle:"understanding bundled transactions",charIndex:28281},{level:3,title:"Uploading a Non-Bundled Transaction (NOT RECOMMENDED)",slug:"uploading-a-non-bundled-transaction-not-recommended",normalizedTitle:"uploading a non-bundled transaction (not recommended)",charIndex:29726},{level:3,title:"Fetching the Metadata of a File Entity",slug:"fetching-the-metadata-of-a-file-entity",normalizedTitle:"fetching the metadata of a file entity",charIndex:30178},{level:3,title:"Retrying a Failed File Data Transaction (Public Unbundled Files Only)",slug:"retrying-a-failed-file-data-transaction-public-unbundled-files-only",normalizedTitle:"retrying a failed file data transaction (public unbundled files only)",charIndex:31026},{level:3,title:"Moving Files",slug:"moving-files",normalizedTitle:"moving files",charIndex:33172},{level:3,title:"Uploading Manifests",slug:"uploading-manifests",normalizedTitle:"uploading manifests",charIndex:33643},{level:3,title:"Uploading With a Custom Content Type",slug:"uploading-with-a-custom-content-type",normalizedTitle:"uploading with a custom content type",charIndex:38417},{level:3,title:"Uploading From a Remote URL",slug:"uploading-from-a-remote-url",normalizedTitle:"uploading from a remote url",charIndex:39648},{level:3,title:"Uploading a Custom Manifest",slug:"uploading-a-custom-manifest",normalizedTitle:"uploading a custom manifest",charIndex:40151},{level:3,title:"Uploading Files with Custom MetaData",slug:"uploading-files-with-custom-metadata",normalizedTitle:"uploading files with custom metadata",charIndex:41476},{level:2,title:"Other Utility Operations",slug:"other-utility-operations",normalizedTitle:"other utility operations",charIndex:45503},{level:3,title:"Monitoring Transactions",slug:"monitoring-transactions",normalizedTitle:"monitoring transactions",charIndex:45532},{level:3,title:"Dealing With Network Congestion",slug:"dealing-with-network-congestion",normalizedTitle:"dealing with network congestion",charIndex:46815},{level:3,title:"Using a Custom Arweave Gateway",slug:"using-a-custom-arweave-gateway",normalizedTitle:"using a custom arweave gateway",charIndex:50374},{level:3,title:"Persistent Caching of ArFS Entity Metadata",slug:"persistent-caching-of-arfs-entity-metadata",normalizedTitle:"persistent caching of arfs entity metadata",charIndex:51621}],headersStr:"CLI Help CLI Version Wallet Operations Working With Entities Dry Run Uploading to Turbo (BETA) Working With Drives Understanding Drive Hierarchies Understanding Drive and File Keys Managing Drive Passwords Creating Drives Listing Drives for an Address Listing Every Entity in a Drive List Drive Pipeline Examples Working With Folders Creating Folders Moving Folders Renaming Folders Viewing Folder Metadata Listing Contents of a Folder Working With Files Uploading a Single File IPFS CID Tagging Progress Logging of Transaction Uploads Download a Single file (BETA) Rename a Single File Uploading a Folder with Files (Bulk Upload) Downloading a Folder with Files Downloading a Drive Uploading Multiple Files Name Conflict Resolution on Upload Understanding Bundled Transactions Uploading a Non-Bundled Transaction (NOT RECOMMENDED) Fetching the Metadata of a File Entity Retrying a Failed File Data Transaction (Public Unbundled Files Only) Moving Files Uploading Manifests Uploading With a Custom Content Type Uploading From a Remote URL Uploading a Custom Manifest Uploading Files with Custom MetaData Other Utility Operations Monitoring Transactions Dealing With Network Congestion Using a Custom Arweave Gateway Persistent Caching of ArFS Entity Metadata",content:'# Using the CLI\n\n\n# CLI Help\n\nLearn to use any command:\n\nardrive --help\n\n\n\n# CLI Version\n\nYou can print out the version by running any of:\n\nardrive --version\nardrive -V\n\n\n\n# Wallet Operations\n\nBrowsing of ArDrive public data is possible without the need for an Arweave wallet. However, for all write operations, or read operations without encryption/decryption keys, you\'ll need a wallet.\n\nAs you utilize the CLI, you can use either your wallet file or your seed phrase interchangeably. Consider the security implications of each approach for your particular use case carefully. If at any time you\'d like to generate a new wallet altogether, start by generating a new seed phase. And if you\'d like to use that seed phrase in the form of a wallet file, or if you\'d like to recover an existing wallet via its seed phrase, use either or both of the following commands:\n\n# Generate seed-phrase\nardrive generate-seedphrase\n"this is an example twelve word seed phrase that you could use"\n\n# Generate/recover wallet file (with example output file path)\nardrive generate-wallet -s "this is an example twelve word seed phrase that you could use" > /path/to/wallet/file.json\n\n\nPublic attributes of Arweave wallets can be retrieved via their 43-character Arweave wallet address. You can retrieve the wallet address associated with your wallet file or 12-word seed phrase (e.g. wallets generated by ArConnect) like so:\n\n# Wallet file\nardrive get-address -w /path/to/wallet/file.json\n\n# Seed Phrase (with sample output)\nardrive get-address -s "this is an example twelve word seed phrase that you could use"\nHTTn8F92tR32N8wuo-NIDkjmqPknrbl10JWo5MZ9x2k\n\n\nYou\'ll need AR in your wallet for any write operations you perform in ArDrive. You can always check your wallet balance (in both AR and Winston units) by performing:\n\n# Getting the balance for your own wallet\nardrive get-balance -w /path/to/wallet/file.json\n\n# Getting the balance for ANY wallet (with sample output)\nardrive get-balance -a "HTTn8F92tR32N8wuo-NIDkjmqPknrbl10JWo5MZ9x2k"\n1500000000000 Winston\n1.5 AR\n\n\nIf, at any time, you need to send AR out of your wallet to another wallet address, you may perform:\n\n# Using our previously generated wallet as the destination...\nardrive send-ar -w /path/to/wallet/file.json --dest-address "HTTn8F92tR32N8wuo-NIDkjmqPknrbl10JWo5MZ9x2k" --ar-amount 2.12345\n\n\n\n# Working With Entities\n\nArDrive\'s ArFS integration provides for hierarchical organization of your file and folder data on Arweave.\n\nThe fundamental entity types specified by ArFS are:\n\n * Drives\n * Folders\n * Files\n\nEach instance of these entities have a Version 4 UUID entity ID that is commonly referred to by its entity type, i.e. drive ID, folder ID, and file ID.\n\nWhen you execute write functions with the CLI, the JSON output will contain information about the Arweave Transaction IDs that were registered when writing your entities to the blockweave, any miner rewards or ArDrive Community tips that were disbursed from your wallet, and any new entity IDs and, when applicable, encryption keys that were generated in the process of creating the entities. Typically, you\'ll want to keep track of those and get proficient with retrieving them in order to build your drive hierarchy to your liking. See Understanding Drive and File Keys for more info.\n\n\n# Dry Run\n\nAn important feature of the ArDrive CLI is the --dry-run flag. On each command that would write an ArFS entity, there is the option to run it as a "dry run". This will run all of the steps and print the outputs of a regular ArFS write, but will skip sending the actual transaction:\n\nardrive <my-command> <other-options> --dry-run\n\n\nThis can be very useful for gathering price estimations or to confirm that you\'ve copy-pasted your entity IDs correctly before committing to an upload.\n\n\n# Uploading to Turbo (BETA)\n\nUsers can optionally choose to send each ArFS entities created to ArDrive Turbo using the --turbo flag. Instead of using AR from an Arweave wallet, you can use Turbo Credits or take advantage of free/discounted upload promotions.\n\nardrive <my-command> <other-options> --turbo\n\n\nThis flag will skip any balance check on the CLI side. Turbo will check a user\'s balance and accept/reject a data item at the time of upload. The --turbo flag by default will send your files to upload.ardrive.io to be bundled. To change the Turbo destination, users can use the --turbo-url flag.\n\n\n# Working With Drives\n\n\n# Understanding Drive Hierarchies\n\nAt the root of every data tree is a "Drive" entity. When a drive is created, a Root Folder is also created for it. The entity IDs for both are generated and returned when you create a new drive:\n\n# Use `tee` to keep a receipt of the full set of transactions info and `jq` to focus on the data of interest\nardrive create-drive --wallet-file /path/to/my/wallet.json --drive-name "Teenage Love Poetry" |\ntee created_drive.json |\njq \'[.created[] | del(.metadataTxId, .entityName, .bundledIn)]\'\n[\n    {\n        "type": "drive",\n        "entityId": "6939b9e0-cc98-42cb-bae0-5888eca78885"\n    }\n    {\n        "type": "folder",\n        "entityId": "d1535126-fded-4990-809f-83a06f2a1118"\n    }\n]\n\n\nThe relationship between the drive and its root folder is clearly visible when retrieving the drive\'s info:\n\nardrive drive-info -d "6939b9e0-cc98-42cb-bae0-5888eca78885"\n| jq \'{driveId, rootFolderId}\'\n{\n    "driveId": "6939b9e0-cc98-42cb-bae0-5888eca78885",\n    "rootFolderId": "d1535126-fded-4990-809f-83a06f2a1118"\n}\n\n\n\nAll file and folder entities in the drive will be anchored to it by a "Drive-ID" GQL Tag. And they\'ll each be anchored to a parent folder ID, tracked via the "Parent-Folder-ID" GQL tag, forming a tree structure whose base terminates at the Root Folder.\n\n\n# Understanding Drive and File Keys\n\nPrivate Drives achieve privacy via end-to-end encryption facilitated by hash-derived "Keys". Drive Keys encrypt/decrypt Drive and Folder data, and File Keys encrypt/decrypt File Data.\n\nThe relationships among your data and their keys is as follows:\n\n * Drive Key = functionOf(Wallet Signature, Randomly Generated Drive ID, User-specified Drive Password)\n * File Key = functionOf(Randomly Generated File ID, Drive Key)\n\nWhen you create private entities, the returned JSON data from the ArDrive CLI will contain the keys needed to decrypt the encrypted representation of your entity that is now securely and permanently stored on the blockweave.\n\nTo derive the drive key again for a drive, perform the following:\n\n# Will throw an error if the wallet or password specified can\'t be used to decrypt the on-chain drive\nardrive get-drive-key -w /path/to/my/wallet.json -d "6939b9e0-cc98-42cb-bae0-5888eca78885" -P\n\n\nTo derive the file key again for a file, perform the following:\n\n# Will throw an error if the drive key or drive-key-derivation data specified can\'t be used to decrypt the on-chain file\nardrive get-file-key --file-id "bd2ce978-6ede-4b0d-8f79-2d7bc235a0e0" --drive-id "6939b9e0-cc98-42cb-bae0-5888eca78885" --drive-key "yHdCjpCK3EcuhQcKNx2d/NN5ReEjoKfZVqKunlCnPEo"\n\n\n\n# Managing Drive Passwords\n\nThe ArDrive CLI\'s private drive and folder functions all require either a drive password OR a drive key. Private file functions require either the drive password or the file key. Keys and passwords are sensitive data, so manage the entry, display, storage, and transmission of them very carefully.\n\nDrive passwords are the most portable, and fundamental, encryption facet, so a few options are available during private drive operations for supplying them:\n\n * Environment Variable\n * STDIN\n * Secure Prompt\n\n# Supplying Your Password: Environment Variable\n\n# Securely type your password into a read prompt, store it to TMP_ARDRIVE_PW, and export it for the shell session\nread -rs TMP_ARDRIVE_PW\nexport ARDRIVE_DRIVE_PW=$(TMP_ARDRIVE_PW)\nardrive <some private command> -w /path/to/wallet.json -P\n\n\n# Supplying Your Password: STDIN\n\n# Pipe your drive password to the ArDrive CLI\ncat /path/to/my/drive/password.txt | ardrive <some private command> -w /path/to/wallet.json -P\n\n# Redirect your drive password to the ArDrive CLI\nardrive <some private command> -w /path/to/wallet.json -P < /path/to/my/drive/password.txt\n\n\n# Supplying Your Password: Prompt\n\n# When all other options fail, the CLI will prompt for your password (NOT COMPATIBLE WITH PIPES AND REDIRECTS!)\nardrive <some private command> -w /path/to/wallet.json -P\n? Enter drive password: › ********\n\n\n\n# Creating Drives\n\n# Public drive\nardrive create-drive --wallet-file /path/to/my/wallet.json --drive-name "My Public Archive"\n\n# Private drive\nardrive create-drive --wallet-file /path/to/my/wallet.json --drive-name "Teenage Love Poetry" -P\n\n\n\n# Listing Drives for an Address\n\nYou can list all the drives associated with any Arweave wallet address, though the details of private drives will be obfuscated from you unless you provide the necessary decryption data.\n\n# List all your own drives\nardrive list-all-drives -w /path/to/my/wallet.json -P\n\n# List any address\'s drives\nardrive list-all-drives --address "HTTn8F92tR32N8wuo-NIDkjmqPknrbl10JWo5MZ9x2k"\n\n\n\n# Listing Every Entity in a Drive\n\nUseful notes on listing the contents of drives:\n\n * Listing a drive is effectively the same as listing its root folder.\n * You can control the tree depth of the data returned.\n * path, txPath, and entityIdPath properties on entities can provide useful handholds for other forms of data navigation\n\n# List everything in a private drive\nardrive list-drive -d "c7f87712-b54e-4491-bc96-1c5fa7b1da50" -w /path/to/my/wallet.json -P\n\n# List a private drive including the `fileKey` and/or `driveKey` of all listed entitites\nardrive list-drive -d "c7f87712-b54e-4491-bc96-1c5fa7b1da50" -w /path/to/my/wallet.json -P --with-keys\n\n# List the contents of a public drive up to and including those in the grandchild folders of the root folder\nardrive list-drive -d "c7f87712-b54e-4491-bc96-1c5fa7b1da50" --max-depth 2\n\n\n\n# List Drive Pipeline Examples\n\nYou can utilize jq and the list commands to reshape the commands\' output data into useful forms and stats for many use cases. Here are a few examples:\n\n\n\n# Get share links for a PUBLIC drive\nardrive list-drive -d a44482fd-592e-45fa-a08a-e526c31b87f1 | jq \'.[] | select(.entityType == "file") | "https://app.ardrive.io/#/file/" + .entityId + "/view"\'\n\n\nExample output:\n\n"https://app.ardrive.io/#/file/1337babe-f000-dead-beef-ffffffffffff/view"\n"https://app.ardrive.io/#/file/cdbc9ddd-1cab-41d9-acbd-fd4328929de3/view"\n"https://app.ardrive.io/#/file/f19bc712-b57a-4e0d-8e5c-b7f1786b34a1/view"\n"https://app.ardrive.io/#/file/4f8e081b-42f2-442d-be41-57f6f906e1c8/view"\n"https://app.ardrive.io/#/file/0e02d254-c853-4ff0-9b6e-c4d23d2a95f5/view"\n"https://app.ardrive.io/#/file/c098b869-29d1-4a86-960f-a9e10433f0b0/view"\n"https://app.ardrive.io/#/file/4afc8cdf-4d27-408a-bfb9-0a2ec21eebf8/view"\n"https://app.ardrive.io/#/file/85fe488d-fcf7-48ca-9df8-2b39958bbf15/view"\n...\n\n\n\n\n# Get total size of all files within drive\nardrive list-drive -d 13c3c232-6687-4d11-8ac1-35284102c7db | jq \' map(select(.entityType == "file") | .size) | add\'\n\n\n\n\n# Get total number of files within drive\nardrive list-drive -d 01ea6ba3-9e58-42e7-899d-622fd110211c | jq \'[ .[] | select(.entityType == "file") ] | length\'\n\n\n\n# Working With Folders\n\nAs discussed previously, all folders in a drive are linked by way of parent folder references back to the root folder of a drive. Folders can be moved into any folder in the hierarchy that\'s not in their own subtree.\n\n\n# Creating Folders\n\nCreating folders manually is straightforward:\n\nardrive create-folder --parent-folder-id "63153bb3-2ca9-4d42-9106-0ce82e793321" --folder-name "My Awesome Folder" -w /path/to/wallet.json\n\n\nExample output:\n\n{\n    "created": [\n        {\n            "type": "folder",\n            "metadataTxId": "AYFMBVmwqhbg9y5Fbj3Iasy5oxUqhauOW7PcS1sl4Dk",\n            "entityId": "d1b7c514-fb12-4603-aad8-002cf63015d3",\n            "key": "yHdCjpCKD2cuhQcKNx2d/XF5ReEjoKfZVqKunlCnPEk",\n            "entityName": "My Awesome Folder"\n        }\n    ],\n    "tips": [],\n    "fees": {\n        "AYFMBVmwqhbg9y5Fbj3Iasy5oxUqhauOW7PcS1sl4Dk": 1378052\n    }\n}\n\n\nNote: Folders can also be created by supplying a folder as the --local-path of an upload-file command. In this case, the folder hierarchy on the local disk will be reconstructed on chain during the course of the recursive bulk upload.\n\n\n# Moving Folders\n\nMoving a folder is as simple as supplying a new parent folder ID. Note that naming collisions among entities within a folder are not allowed.\n\nardrive move-folder --folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" --parent-folder-id "29850ab7-56d4-4e1f-a5be-cb86d5513921" -w /path/to/wallet.json\n\n\n\n# Renaming Folders\n\nIn order to rename a folder you must provide a name different from its current one, and it must not create naming conflicts with its sibling entities.\n\nardrive rename-folder --folder-id "568d5eba-dbf3-4a49-8129-1c58f7fd35bc" --folder-name "Folder with cool stuff" -w "./wallet.json"\n\n\n\n# Viewing Folder Metadata\n\nTo view the metadata of a folder, users can use the folder-info command:\n\nardrive folder-info --folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0"\n\n\n\n# Listing Contents of a Folder\n\nSimilar to drives, the list-folder command can be used to fetch the metadata of each entity within a folder. But by default, the command will fetch only the immediate children of that folder (--max-depth 0):\n\n# List immediate children of folder "My Public Folder"\nardrive list-folder --parent-folder-id "29850ab7-56d4-4e1f-a5be-cb86d5513940"\n\n\nExample output:\n\n[\n    {\n        "appName": "ArDrive-CLI",\n        "appVersion": "2.0",\n        "arFS": "0.11",\n        "contentType": "application/json",\n        "driveId": "01ea6ba3-9e58-42e7-899d-622fd110211a",\n        "entityType": "folder",\n        "name": "mytestfolder",\n        "txId": "HYiKyfLwY7PT9NleTQoTiM_-qPVUwf4ClDhx1sjUAEU",\n        "unixTime": 1635102772,\n        "parentFolderId": "29850ab7-56d4-4e1f-a5be-cb86d5513940",\n        "entityId": "03df2929-1440-4ab4-bbf0-9dc776e1ed96",\n        "path": "/My Public Folder/mytestfolder",\n        "txIdPath": "/09_x0X2eZ3flXXLS72WdTDq6uaa5g2LjsT-QH1m0zhU/HYiKyfLwY7PT9NleTQoTiM_-qPVUwf4ClDhx1sjUAEU",\n        "entityIdPath": "/29850ab7-56d4-4e1f-a5be-cb86d5513940/03df2929-1440-4ab4-bbf0-9dc776e1ed96"\n    },\n    {\n        "appName": "ArDrive-CLI",\n        "appVersion": "2.0",\n        "arFS": "0.11",\n        "contentType": "application/json",\n        "driveId": "01ea6ba3-9e58-42e7-899d-622fd110211a",\n        "entityType": "folder",\n        "name": "Super sonic public folder",\n        "txId": "VUk1B_vo1va2-EHLtqjsotzy0Rdn6lU4hQo3RD2xoTI",\n        "unixTime": 1631283259,\n        "parentFolderId": "29850ab7-56d4-4e1f-a5be-cb86d5513940",\n        "entityId": "452c6aec-43dc-4015-9abd-20083068d432",\n        "path": "/My Public Folder/Super sonic sub folder",\n        "txIdPath": "/09_x0X2eZ3flXXLS72WdTDq6uaa5g2LjsT-QH1m0zhU/VUk1B_vo1va2-EHLtqjsotzy0Rdn6lU4hQo3RD2xoTI",\n        "entityIdPath": "/29850ab7-56d4-4e1f-a5be-cb86d5513940/452c6aec-43dc-4015-9abd-20083068d432"\n    },\n    {\n        "appName": "ArDrive-CLI",\n        "appVersion": "2.0",\n        "arFS": "0.11",\n        "contentType": "application/json",\n        "driveId": "01ea6ba3-9e58-42e7-899d-622fd110211a",\n        "entityType": "file",\n        "name": "test-number-twelve.txt",\n        "txId": "429zBqnd7ZBNzgukaix26RYz3g5SeXCCo_oIY6CPZLg",\n        "unixTime": 1631722234,\n        "size": 47,\n        "lastModifiedDate": 1631722217028,\n        "dataTxId": "vA-BxAS7I6n90cH4Fzsk4cWS3EOPb1KOhj8yeI88dj0",\n        "dataContentType": "text/plain",\n        "parentFolderId": "29850ab7-56d4-4e1f-a5be-cb86d5513940",\n        "entityId": "e5948327-d6de-4acf-a6fe-e091ecf78d71",\n        "path": "/My Public Folder/test-number-twelve.txt",\n        "txIdPath": "/09_x0X2eZ3flXXLS72WdTDq6uaa5g2LjsT-QH1m0zhU/429zBqnd7ZBNzgukaix26RYz3g5SeXCCo_oIY6CPZLg",\n        "entityIdPath": "/29850ab7-56d4-4e1f-a5be-cb86d5513940/e5948327-d6de-4acf-a6fe-e091ecf78d71"\n    },\n    {\n        "appName": "ArDrive-CLI",\n        "appVersion": "2.0",\n        "arFS": "0.11",\n        "contentType": "application/json",\n        "driveId": "01ea6ba3-9e58-42e7-899d-622fd110211a",\n        "entityType": "file",\n        "name": "wonderful-test-file.txt",\n        "txId": "6CokwlzB81Fx7dq-lB654VM0XQykdU6eYohDmEJ2gk4",\n        "unixTime": 1631671275,\n        "size": 23,\n        "lastModifiedDate": 1631283389232,\n        "dataTxId": "UP8THwA_1gvyRqNRqYmTpWvU4-UzNWBN7SiX_AIihg4",\n        "dataContentType": "text/plain",\n        "parentFolderId": "29850ab7-56d4-4e1f-a5be-cb86d5513940",\n        "entityId": "3274dae9-3487-41eb-94d5-8d5d3d8bc343",\n        "path": "/My Public Folder/wonderful-test-file.txt",\n        "txIdPath": "/09_x0X2eZ3flXXLS72WdTDq6uaa5g2LjsT-QH1m0zhU/6CokwlzB81Fx7dq-lB654VM0XQykdU6eYohDmEJ2gk4",\n        "entityIdPath": "/29850ab7-56d4-4e1f-a5be-cb86d5513940/3274dae9-3487-41eb-94d5-8d5d3d8bc343"\n    }\n]\n\n\nTo list further than the immediate children, you can make use of the flags: --all and --max-depth.\n\n# List all contents of a public folder\nardrive list-folder --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" --all\n\n# List the contents of a public folder with custom depth\nardrive list-folder --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" --max-depth 2\n\n\nIn the case of private entitites, the --with-keys flag will make the command to include the keys in the output.\n\n# List all contents of a private folder including the `fileKey` and/or `driveKey` of all listed entitites\nardrive list-folder --parent-folder-id "1b027047-4cfc-4eee-88a8-9af694f660c0" -w /my/wallet.json --with-keys\n\n\n\n# Working With Files\n\nSimilar to folders, files are linked to a parent folder which ultimately chains the file back to the root folder of its parent drive. As such, a parent folder ID is required in order to upload files. Files can be freely moved to other folders within their original drive.\n\nThe important difference for file entities is that they also hold a reference to their data transaction ID, which is the dataTxId as returned by the file-info command. This is where your uploaded data lives on the permaweb.\n\nNOTE: The CLI currently (v1.0.0) has progress logging on uploads DISABLED for producing clean JSON outputs that can be piped in the terminal. On larger uploads, remember to be patient. You can check your system\'s node process to confirm the process is still uploading.\n\n\n# Uploading a Single File\n\nTo upload a file, you\'ll need a parent folder id, the file to upload\'s file path, and the path to your wallet:\n\n# Supply the parent folder ID to upload-file\nardrive upload-file --local-path /path/to/file.txt  --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\nExample output:\n\n{\n    "created": [\n        {\n            "type": "file",\n            "entityName": "file.txt"\n            "entityId": "6613395a-cf19-4420-846a-f88b7b765c05"\n            "dataTxId": "l4iNWyBapfAIj7OU-nB8z9XrBhawyqzs5O9qhk-3EnI",\n            "metadataTxId": "YfdDXUyerPCpBbGTm_gv_x5hR3tu5fnz8bM-jPL__JE",\n            "bundledIn": "1zwdfZAIV8E26YjBs2ZQ4xjjP_1ewalvRgD_GyYw7f8",\n            "sourceUri": "file:///path/to/file.txt"\n        },\n        {\n            "type": "bundle",\n            "bundleTxId": "1zwdfZAIV8E26YjBs2ZQ4xjjP_1ewalvRgD_GyYw7f8"\n        }\n    ],\n    "tips": [\n        {\n            "txId": "1zwdfZAIV8E26YjBs2ZQ4xjjP_1ewalvRgD_GyYw7f8",\n            "recipient": {\n                "address": "3mxGJ4xLcQQNv6_TiKx0F0d5XVE0mNvONQI5GZXJXkt"\n            },\n            "winston": "10000000"\n        }\n    ],\n    "fees": {\n        "1zwdfZAIV8E26YjBs2ZQ4xjjP_1ewalvRgD_GyYw7f8": 42819829\n    }\n}\n\n\nNOTE: To upload to the root of a drive, specify its root folder ID as the parent folder ID for the upload destination. You can retrieve it like so:\n\nardrive drive-info -d "c7f87712-b54e-4491-bc96-1c5fa7b1da50" | jq -r \'.rootFolderId\'\n\n\n\n# IPFS CID Tagging\n\nCertain nodes on the Arweave network may be running the IPFS+Arweave bridge. Tagging your file upload transaction with its IPFS v1 CID value in the \'IPFS-Add\' tag may allow you to take advantage of this system. It can also be helpful for finding data on Arweave via GQL based on its CID. To include the CID tag on your PUBLIC file uploads, you may use the \'--add-ipfs-tag\' flag:\n\nardrive upload-file --add-ipfs-tag --local-path /path/to/file.txt  --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\n\n# Progress Logging of Transaction Uploads\n\nProgress logging of transaction uploads to stderr can be enabled by setting the ARDRIVE_PROGRESS_LOG environment variable to 1:\n\nUploading file transaction 1 of total 2 transactions...\nTransaction _GKQasQX194a364Hph8Oe-oku1AdfHwxWOw9_JC1yjc Upload Progress: 0%\nTransaction _GKQasQX194a364Hph8Oe-oku1AdfHwxWOw9_JC1yjc Upload Progress: 35%\nTransaction _GKQasQX194a364Hph8Oe-oku1AdfHwxWOw9_JC1yjc Upload Progress: 66%\nTransaction _GKQasQX194a364Hph8Oe-oku1AdfHwxWOw9_JC1yjc Upload Progress: 100%\nUploading file transaction 2 of total 2 transactions...\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 0%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 13%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 28%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 42%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 60%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 76%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 91%\nTransaction nA1stCdTkuf290k0qsqvmJ78isEC0bwgrAi3D8Cl1LU Upload Progress: 100%\n\n\n\n# Download a Single file (BETA)\n\nBy using the download-file command you can download a file on chain to a folder in your local storage specified by --local-path (or to your current working directory if not specified):\n\nardrive download-file -w /path/to/wallet.json --file-id "ff450770-a9cb-46a5-9234-89cbd9796610" --local-path /my_ardrive_downloads/\n\n\nSpecify a filename in the --local-path if you\'d like to use a different name than the one that\'s used in your drive:\n\nardrive download-file -w /path/to/wallet.json --file-id "ff450770-a9cb-46a5-9234-89cbd9796610" --local-path /my_ardrive_downloads/my_pic.png\n\n\n\n# Rename a Single File\n\nTo rename an on-chain file you can make use of the rename-file command. The required parameters are the file ID and the new name, as well as the owner wallet or seed phrase.\n\nardrive rename-file --file-id "290a3f9a-37b2-4f0f-a899-6fac983833b3" --file-name "My custom file name.txt" --wallet-file "wallet.json"\n\n\n\n# Uploading a Folder with Files (Bulk Upload)\n\nUsers can perform a bulk upload by using the upload-file command on a target folder. The command will reconstruct the folder hierarchy on local disk as ArFS folders on the permaweb and upload each file into their corresponding folders:\n\nardrive upload-file --local-path /path/to/folder --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\n\n# Downloading a Folder with Files\n\nYou can download a folder from ArDrive to your local machine with the download-folder command. In the following examples, assume that a folder with ID "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" exists in your drive and is named "MyArDriveFolder".\n\n# Downloads "MyArDriveFolder" into the current working directory, i.e. ./MyArDriveFolder/\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6"\n\n\nBy specifying the --local-path option, you can choose the local parent folder into which the on-chain folder will be downloaded. When the parameter is omitted, its value defaults to the current working directory (i.e. ./).\n\n# Downloads "MyArDriveFolder" into /my_ardrive_downloads/MyArDriveFolder\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --local-path /my_ardrive_downloads/\n\n\nThe --max-depth parameter lets you to choose a custom folder depth to download. When omitted, the entire subtree of the folder will be downloaded. In the following example, only the immediate children of the folder will be downloaded:\n\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --max-depth 0\n\n\nThe behaviors of --local-path are similar to those of cp and mv in Unix systems, e.g.:\n\n# folder downloaded to "/existing_folder/MyArDriveFolder"\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --local-path "/existing_folder"\n\n# folder downloaded to "/existing_folder/MyArDriveFolder/MyArDriveFolder" as "/existing_folder/MyArDriveFolder" already exists\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --local-path "/existing_folder/MyArDriveFolder"\n\n# folder downloaded to "/existing_folder/non_existent_folder"\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --local-path "/existing_folder/non_existent_folder"\n\n# ERROR!\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --local-path "/non_existent_folder_1/non_existent_folder_2"\n\n\n\n# Downloading a Drive\n\nTo download the whole drive you can use the download-drive command.\n\nardrive download-drive -d "c0c8ba1c-efc5-420d-a07c-a755dc67f6b2"\n\n\nThis is equivalent to running the download-folder command against the root folder of the drive.\n\n\n# Uploading Multiple Files\n\nTo upload an arbitrary number of files or folders, pass a space-separated list of paths to --local-paths:\n\n# Specifying a mixed set of file and folder paths\nardrive upload-file -w wallet.json -F "6939b9e0-cc98-42cb-bae0-5888eca78885" --local-paths ./image.png ~/backups/ ../another_file.txt\n\n# Example using glob expansion to upload all .json files in the current folder\nardrive upload-file -w wallet.json -F "6939b9e0-cc98-42cb-bae0-5888eca78885" --local-paths ./*.json\n\n\n\n# Name Conflict Resolution on Upload\n\nBy default, the upload-file command will use the upsert behavior if existing entities are encountered in the destination folder tree that would cause naming conflicts.\n\nExpect the behaviors from the following table for each of these resolution settings:\n\nSOURCE TYPE   CONFLICT AT DEST   `SKIP`   `REPLACE`   `UPSERT` (DEFAULT)\nFile          None               Insert   Insert      Insert\nFile          Matching File      Skip     Update      Skip\nFile          Different File     Skip     Update      Update\nFile          Folder             Skip     Fail        Fail\nFolder        None               Insert   Insert      Insert\nFolder        File               Skip     Fail        Fail\nFolder        Folder             Re-use   Re-use      Re-use\n\nThe default upsert behavior will check the destination folder for a file with a conflicting name. If no conflicts are found, it will insert (upload) the file.\n\nIn the case that there is a FILE to FILE name conflict found, it will only update it if necessary. To determine if an update is necessary, upsert will compare the last modified dates of conflicting file and the file being uploaded. When they are matching, the upload will be skipped. Otherwise the file will be updated as a new revision.\n\nTo override the upsert behavior, use the --replace option to always make new revisions of a file or the --skip option to always skip the upload on name conflicts:\n\nardrive upload-file --replace --local-path /path/to/file.txt  --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\nardrive upload-file --skip --local-path /path/to/file.txt  --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\nAlternatively, the upload-file commands now also supports the --ask conflict resolution option. This setting will always provide an interactive prompt on name conflicts that allows users to decide how to resolve each conflict found:\n\nardrive upload-file --ask --local-file-path /path/to/file.txt  --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\nDestination folder has a file to file name conflict!\n\nFile name: 2.png\nFile ID: efbc0370-b69f-44d9-812c-0d272b019027\nThis file has a DIFFERENT last modified date\n\nPlease select how to proceed:\n › - Use arrow-keys. Return to submit.\n❯   Replace as new file revision\n    Upload with a different file name\n    Skip this file upload\n\n\n\n# Understanding Bundled Transactions\n\nThe ArDrive CLI currently uses two different methods for uploading transactions to the Arweave network: standard transactions and Direct to Network (D2N) bundled transactions. By default, the CLI will send a D2N bundled transaction for any action that would result in multiple transactions. This bundling functionality is currently used on the upload-file and create-drive commands.\n\nD2N bundled transactions come with several benefits and implications:\n\n * Bundling saves AR and enhances ArFS reliability by sending associated ArFS transactions up as one atomic bundle.\n * Bundled transactions are treated as a single data transaction by the Arweave network, but can be presented as separate transactions by the Arweave Gateway once they have been "unbundled".\n * Un-bundling can take anywhere from a few minutes up to an hour. During that time, the files in the bundle will neither appear in list- commands nor be downloadable. Similarly, they will not appear in the web app after syncs until un-bundling is complete. This can negatively affect the accuracy of upsert operations, so it\'s best to wait before retrying bulk uploads.\n * Bundling reliability on the gateway side degrades once bundles reach either 500 data items (or ~250 files) or 500 MiB, so the CLI will create and upload multiple bundles as necessary, or will send files that are simply too large for reliable bundling as unbundled txs.\n\n\n# Uploading a Non-Bundled Transaction (NOT RECOMMENDED)\n\nWhile not recommended, the CLI does provide the option to forcibly send all transactions as standard transactions rather than attempting to bundle them together. To do this, simply add the --no-bundle flag to the upload-file or create-drive command:\n\nardrive upload-file --no-bundle --local-path /path/to/file --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\n\n# Fetching the Metadata of a File Entity\n\nSimply perform the file-info command to retrieve the metadata of a file:\n\nardrive file-info --file-id "e5ebc14c-5b2d-4462-8f59-7f4a62e7770f"\n\n\nExample output:\n\n{\n    "appName": "ArDrive-Web",\n    "appVersion": "0.1.0",\n    "arFS": "0.11",\n    "contentType": "application/json",\n    "driveId": "51062487-2e8b-4af7-bd81-4345dc28ea5d",\n    "entityType": "file",\n    "name": "2_depth.png",\n    "txId": "CZKdjqwnmxbWchGA1hjSO5ZH--4OYodIGWzI-FmX28U",\n    "unixTime": 1633625081,\n    "size": 41946,\n    "lastModifiedDate": 1605157729000,\n    "parentFolderId": "a2c8a0cb-0ca7-4dbb-8bf8-93f75f308e63",\n    "entityId": "e5ebc14c-5b2d-4462-8f59-7f4a62e7770f",\n    "fileId": "e5ebc14c-5b2d-4462-8f59-7f4a62e7770f",\n    "dataTxId": "Jz0WsWyAGVc0aE3UzACo-YJqG8OPrN3UucmDdt8Fbjc",\n    "dataContentType": "image/png"\n}\n\n\n\n# Retrying a Failed File Data Transaction (Public Unbundled Files Only)\n\nArweave data upload transactions are split into two phases: transaction posting and chunks uploading. Once the transaction post phase has been completed, you\'ve effectively "paid" the network for storage of the data chunks that you\'ll send in the next stage.\n\nIf your system encounters an error while posting the transaction, you can retry posting the transaction for as long as your tx_anchor is valid (learn more about tx_anchors here). You may retry and/or resume posting chunks at any time after your transaction has posted. The ArDrive CLI allows you to take advantage of this Arweave protocol capability.\n\nUsing the CLI, when the transaction post has succeeded but the chunk upload step fails, the data transaction\'s ID could be lost. There are a few options to recover this ID. If the failed transaction is the most recent one sent from a wallet, the transaction ID can be recovered with the ardrive last-tx -w /path/to/wallet command AFTER the transaction\'s headers have been mined (It can take 5-10 minutes for the tx-id to become available with the last-tx approach). Other options for finding the partially uploaded transaction\'s ID include:\n\n * Using an Arweave gateway GQL http endpoint to search for transactions that belong to the wallet. See this Arweave GQL Guide for more info.\n * Browse the recent transactions associated with the wallet via a block explorer tool like ViewBlock.\n\nIn order to re-seed the chunks for an unbundled ArFS data transaction, a user must have the data transaction ID, the original file data, and either a destination folder ID or a valid file ID for the file. Supply that information to the retry-tx command like so:\n\nardrive retry-tx --tx-id { Data Transaction ID } --parent-folder-id { Destination Folder ID }  --local-path /path/to/file  --wallet-file /path/to/wallet\n\n\nNote: Retry feature is currently only available for PUBLIC unbundled file transactions. It is also perfectly safe to mistakenly re-seed the chunks of a healthy transaction, the transaction will remain stable and the wallet balance will not be affected.\n\n\n# Moving Files\n\nFiles can be moved from one folder to another within the same drive. Moving a file is simply the process of uploading a new file metadata revision with an updated File ID <> Parent Folder ID relationship. The following command will move a file from its current location in a public drive to a new parent folder in that drive:\n\nardrive move-file --file-id "e5ebc14c-5b2d-4462-8f59-7f4a62e7770f" --parent-folder-id "a2c8a0cb-0ca7-4dbb-8bf8-93f75f308e63"\n\n\n\n# Uploading Manifests\n\nArweave Path Manifests are are special .json files that instruct Arweave Gateways to map file data associated with specific, unique transaction IDs to customized, hosted paths relative to that of the manifest file itself. So if, for example, your manifest file had an arweave.net URL like:\n\nhttps://arweave.net/{manifest tx id}\n\n\nThen, all the mapped transactions and paths in the manifest file would be addressable at URLs like:\n\nhttps://arweave.net/{manifest tx id}/foo.txt\nhttps://arweave.net/{manifest tx id}/bar/baz.png\n\n\nArDrive supports the creation of these Arweave manifests using any of your PUBLIC folders. The generated manifest paths will be links to each of the file entities within the specified folder. The manifest file entity will be created at the root of the folder.\n\nTo create a manifest of an entire public drive, specify the root folder of that drive:\n\nardrive create-manifest -f "bc9af866-6421-40f1-ac89-202bddb5c487" -w "/path/to/wallet"\n\n\nYou can also create a manifest of a folder\'s file entities at a custom depth by using the --max-depth option:\n\n# Create manifest of a folder\'s local file contents, excluding all sub-folders\nardrive create-manifest --max-depth 0  -f "867228d8-4413-4c0e-a499-e1decbf2ea38" -w "/path/to/wallet"\n\n\nCreating a .json file of your manifest links output can be accomplished here with some jq parsing and piping to a file:\n\nardrive create-manifest -w /path/to/wallet -f "6c312b3e-4778-4a18-8243-f2b346f5e7cb"  | jq \'{links}\' > links.json\n\n\nIf you\'d like to preview the contents of your manifest before uploading, you can perform a dry run and do some lightweight post processing to isolate the data:\n\nardrive create-manifest -w /path/to/wallet -f "6c312b3e-4778-4a18-8243-f2b346f5e7cb"  --dry-run | jq \'{manifest}.manifest\'\n\n\n\n\n{\n  "manifest": "arweave/paths",\n  "version": "0.1.0",\n  "index": {\n    "path": "index.html"\n  },\n  "paths": {\n    "hello_world.txt": {\n      "id": "Y7GFF8r9y0MEU_oi1aZeD87vrmai97JdRQ2L0cbGJ68"\n    },\n    "index.html": {\n      "id": "pELonjVebHyBsdxVymvxbGTmHD96v9PuuUXj8GUHGoY"\n    }\n  }\n}\n\n\nThe manifest data transaction is tagged with a unique content-type, application/x.arweave-manifest+json, which tells the gateway to treat this file as a manifest. The manifest file itself is a .json file that holds the paths (the data transaction ids) to each file within the specified folder.\n\nWhen your folder is later changed by adding files or updating them with new revisions, the original manifest will NOT be updated on its own. A manifest is a permanent record of your files in their current state.\n\nHowever, creating a subsequent manifest with the same manifest name will create a new revision of that manifest in its new current state. Manifests follow the same name conflict resolution as outlined for files above (upsert by default).\n\n# Hosting a Webpage with Manifest\n\nWhen creating a manifest, it is possible to host a webpage or web app. You can do this by creating a manifest on a folder that has an index.html file in its root.\n\nUsing generated build folders from popular frameworks works as well. One requirement here to note is that the href= paths from your generated index.html file must not have leading a /. This means that the manifest will not resolve a path of /dist/index.js but it will resolve dist/index.js or ./dist/index.js.\n\nAs an example, here is a flow of creating a React app and hosting it with an ArDrive Manifest. First, generate a React app:\n\nyarn create react-app my-app\n\n\nNext, add this field to the generated package.json so that the paths will resolve correctly:\n\n"homepage": ".",\n\n\nThen, create an optimized production build from within the app\'s directory:\n\nyarn build\n\n\nNow, we can create and upload that produced build folder on ArDrive to any of your existing ArFS folder entities:\n\nardrive upload-file -l "/build" -w "/path/to/wallet" --parent-folder-id "bc9af866-6421-40f1-ac89-202bddb5c487"\n\n\nAnd finally, create the manifest using the generated Folder ID from the build folder creation:\n\n# Create manifest using the Folder ID of the `/build` folder\nardrive create-manifest -f "41759f05-614d-45ad-846b-63f3767504a4" -w "/path/to/wallet"\n\n\nIn the return output, the top link will be a link to the deployed web app:\n\n    "links": [\n        "https://arweave.net/0MK68J8TqGhaaOpPe713Zn0jdpczMt2NGS2CtRYiuAg",\n        "https://arweave.net/0MK68J8TqGhaaOpPe713Zn0jdpczMt2NGS2CtRYiuAg/asset-manifest.json",\n        "https://arweave.net/0MK68J8TqGhaaOpPe713Zn0jdpczMt2NGS2CtRYiuAg/favicon.ico",\n        "https://arweave.net/0MK68J8TqGhaaOpPe713Zn0jdpczMt2NGS2CtRYiuAg/index.html",\n        # ...\n\n\nThis is effectively hosting a web app with ArDrive. Check out the ArDrive Price Calculator React App hosted as an ArDrive Manifest.\n\n\n# Uploading With a Custom Content Type\n\nEach file uploaded to the Arweave network receives a "Content-Type" GraphQL tag that contains the MIME type for the file. The gateway will use this content type to determine how to serve that file\'s data transaction at the arweave.net/{data tx id} endpoint.\n\nBy default, the CLI will attempt to derive this content type from the file extension of the provided file. In most cases, the content type that is derived will be correct and the gateway will properly serve the file.\n\nThe CLI also provides the option for users to upload files with a custom content type using the --content-type flag:\n\nardrive upload-file --content-type "application/json"  --local-path /path/to/file --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\nIt is currently possible to set this value to any given string, but the gateway will still only serve valid content types. Check out this list of commonly used MIME types to ensure you\'re providing a valid content type: Common MIME types.\n\nNote: In the case of multi-file uploads or recursive folder uploads, setting this --content-type flag will set the provided custom content type on EVERY file entity within a given upload.\n\n\n# Uploading From a Remote URL\n\nYou can upload a file from an existing url using the --remote-path flag. This must be used in conjunction with --dest-file-name.\n\nYou can use a custom content type using the --content-type flag, but if this isn\'t used the app will use the content type from the response header of the request for the remote data.\n\nardrive upload-file --remote-path "https://url/to/file" --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -d "example.jpg" -w /path/to/wallet.json\n\n\n\n# Uploading a Custom Manifest\n\nUsing the custom content type feature, it is possible for users to upload their own custom manifests. The Arweave gateways use this special content type in order to identify an uploaded file as a manifest:\n\napplication/x.arweave-manifest+json\n\n\nIn addition to this content type, the manifest must also adhere to the correct JSON structure of an Arweave manifest. A user can create their own manifest from scratch, or start by piping a generated manifest to a JSON file and editing it to their specifications:\n\nardrive create-manifest -w /path/to/wallet -f "6c312b3e-4778-4a18-8243-f2b346f5e7cb"  --dry-run | jq \'{manifest}.manifest\' > my-custom-manifest.json\n\n\nAfter editing the generated manifest, simply perform an upload-file command with the custom Arweave manifest content type to any PUBLIC folder:\n\nardrive upload-file --content-type "application/x.arweave-manifest+json" --local-path my-custom-manifest.json --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\nThe returned dataTxId field on the created file entity will be the endpoint that the manifest can be found on Arweave, just as explained in the manifest sections above:\n\nhttps://arweave.net/{dataTxId}\nhttps://arweave.net/{dataTxId}/custom-file-1\nhttps://arweave.net/{dataTxId}/custom-file-2\n\n\n\n# Uploading Files with Custom MetaData\n\nArDrive CLI has the capability of attaching custom metadata to ArFS File and Folder MetaData Transactions during the upload-file command. This metadata can be applied to either the GQL tags on the MetaData Transaction and/or into the MetaData Transaction\'s Data JSON.\n\nAll custom metadata applied must ultimately adhere to the following JSON shapes:\n\n// GQL Tags\ntype CustomMetaDataGqlTags = Record<string, string | string[]>;\n\n// Data JSON Fields\ntype CustomMetaDataJsonFields = Record<string, JsonSerializable>;\n\nexport type JsonSerializable =\n  | string\n  | number\n  | boolean\n  | null\n  | { [member: string]: JsonSerializable }\n  | JsonSerializable[];\n\n\ne.g:\n\n{ IPFS-Add: \'MY_HASH\' }\n# or\n{ \'Custom Name\': [\'Val 1\', \'Val 2\'] }\n\n\nWhen the custom metadata is attached to the MetaData Transaction\'s GQL tags, they will become visible on any Arweave GQL gateway and also third party tools that read GQL data.\n\nWhen these tags are added to the MetaData Transaction\'s Data JSON they can be read by downloading the JSON data directly from https://arweave.net/METADATA_TX_ID.\n\nTo add this custom metadata to your file metadata transactions, CLI users can pass custom metadata these parameters:\n\n * --metadata-file path/to/json/schema\n * --metadata-json \'{"key": "val", "key-2": true, "key-3": 420, "key-4": ["more", 1337]}\'\n * --metadata-gql-tags "Tag-Name" "Tag Val"\n\nThe --metadata-file will accept a file path to JSON file containing custom metadata:\n\nardrive upload-file --metadata-file path/to/metadata/json # ...\n\n\nThis JSON schema object must contain instructions on where to put this metadata with the metaDataJson and metaDataGqlTags keys. e.g:\n\n{\n  "metaDataJson": {\n    "Tag-Name": ["Value-1", "Value-2"]\n  },\n  "metaDataGqlTags": {\n    "GQL Tag Name": "Tag Value"\n  }\n}\n\n\nThe --metadata-gql-tags parameter accepts an array of string values to be applied to the MetaData Tx GQL Tags. This method of CLI input does not support multiple tag values for a given tag name and the input must be an EVEN number of string values. (Known bug: String values starting with the "-" character are currently not supported. Use --metadata-file parameter instead.) e.g:\n\nupload-file --metadata-gql-tags "Custom Tag Name" "Custom Value" # ...\n\n\nAnd the --metadata-json parameter will accept a stringified JSON input. It will apply all declared JSON fields directly to the MetaData Tx\'s Data JSON. e.g:\n\n upload-file --metadata-json \' { "json field": "value", "another fields": false } \' # ...\n\n\nCustom metadata applied to files and/or folders during the upload-file command will be read back through all existing read commands. e.g:\n\nardrive file-info -f 067c4008-9cbe-422e-b697-05442f73da2b\n{\n    "appName": "ArDrive-CLI",\n    "appVersion": "1.17.0",\n    "arFS": "0.11",\n    "contentType": "application/json",\n    "driveId": "967215ca-a489-494b-97ec-0dd428d7be34",\n    "entityType": "file",\n    "name": "unique-name-9718",\n    "txId": "sxg8bNu6_bbaHkJTxAINVVoz_F-LiFe6s7OnxzoJJk4",\n    "unixTime": 1657655070,\n    "size": 262148,\n    "lastModifiedDate": 1655409872705,\n    "dataTxId": "ublZcIff77ejl3m0uEA8lXEfnTWmSBOFoz-HibqKeyk",\n    "dataContentType": "text/plain",\n    "parentFolderId": "97bc4fb5-aca4-4ffe-938f-1285153d98ca",\n    "entityId": "067c4008-9cbe-422e-b697-05442f73da2b",\n    "fileId": "067c4008-9cbe-422e-b697-05442f73da2b",\n    "IPFS-Add": "MY_HASH",\n    "Tag-1": "Val",\n    "Tag-2": "Val",\n    "Tag-3": "Val",\n    "Boost": "1.05"\n}\n\n\n# Applying Unique Custom MetaData During Bulk Workflows\n\nWith some custom scripting and the --metadata-file parameter, the ArDrive CLI can be used to apply custom metadata to each file individually in a bulk workflow. For example, if you choose a numbered file naming pattern you can make use of a for loop:\n\nfor i in {1..5}\ndo\nardrive upload-file -F f0c58c11-430c-4383-8e54-4d864cc7e927 --local-path "../uploads/test-file-$i.txt" -w "/path/to/wallet.json" --metadata-file "../custom/metadata-$i.json" --dry-run > "file-result-$i.json"\ndone\n\n\n\n# Other Utility Operations\n\n\n# Monitoring Transactions\n\nBlock time on Arweave is typically between 2-3 minutes in duration, so transactions can be mined within that time frame when network congestion is low. Transactions, in the general case, proceed through the following set of states:\n\n * Pending: the transaction is waiting the "mempool" to be mined\n * Confirming: the transaction was mined on an Arweave Node, but has not yet been confirmed by at least 15 total nodes on the network\n * Confirmed: the transaction was mined on an Arweave Node and confirmed by at least 15 total nodes on the network\n * Not Found: the transaction is not available for any of the following reasons:\n   * Insufficient reward to join the mempool\n   * Insufficient reward to be mined within 50 blocks during a period of network congestion\n   * Transaction is transitioning between states\n   * Transaction ID is invalid\n\nMonitor any Arweave transaction\'s status via its transaction ID by performing:\n\n# Peek at the status:\nardrive tx-status -t "ekSMckikdRJ8RGIkFa-X3xq3427tvM7J9adv8HP3Bzs"\n\n\nExample output:\n\nekSMckikdRJ8RGIkFa-X3xq3427tvM7J9adv8HP3Bzs: Mined at block height 775810 with 22439 confirmations\n\n\n# Reprint the status every 10 seconds:\nwatch -n 10 ardrive tx-status -t "ekSMckikdRJ8RGIkFa-X3xq3427tvM7J9adv8HP3Bzs"\n\n\n\n# Dealing With Network Congestion\n\nCurrently, Arweave blocks hold up to 1000 transactions per block. The "mempool", where pending transactions reside until they\'ve been included into a block, will only hold a transaction for 50 blocks (~100-150 minutes) before it\'s discarded by the network resulting in no fees or data being transacted. During periods of network congestion (i.e. those where the mempool contains 1000 or more pending transactions), it may make sense to either:\n\na) wait for congestion to dissipate before attempting your transactions.\n\nb) apply the fee boost multiplier to your transactions rewards with the --boost parameter during write operations in order to front-run some of the congestion.\n\n# Check for network congestion before uploading\n\n# See all the transactions in the mempool\nardrive get-mempool\n\n# Return the count of the transactions in the mempool\nardrive get-mempool | jq \'length\'\n\n\n# Front-run Congestion By Boosting Miner Rewards\n\n# Increase the miner reward on your transactions by 50%\nardrive upload-file --wallet-file /path/to/my/wallet.json --parent-folder-id "f0c58c11-430c-4383-8e54-4d864cc7e927" --local-path ./helloworld.txt --boost 1.5\n\n\n# Send AR Transactions From a Cold Wallet\n\nThe best cold wallet storage never exposes your seed phrase and/or private keys to the Internet or a compromised system interface. You can use the ArDrive CLI to facilitate cold storage and transfer of AR.\n\nIf you need a new cold AR wallet, generate one from an air-gapped machine capable of running the ArDrive CLI by following the instructions in the Wallet Operations section. Fund your cold wallet from whatever external sources you\'d like. NOTE: Your cold wallet won\'t appear on chain until it has received AR.\n\nThe workflow to send the AR out from your cold wallet requires you to generate a signed transaction with your cold wallet on your air-gapped machine via the ArDrive CLI, and then to transfer the signed transaction (e.g. by a file on a clean thumb drive) to an Internet-connected machine and send the transaction to the network via the ArDrive CLI. You\'ll need two inputs from the Internet-connected machine:\n\n * the last transaction sent OUT from the cold wallet (or an empty string if none has ever been sent out)\n * the base fee for an Arweave transaction (i.e. a zero bye transaction). Note that this value could change if a sufficient amount of time passes between the time you fetch this value, create the transaction, and send the transaction.\n\nTo get the last transaction sent from your cold wallet, use the last-tx command and specify your wallet address e.g.:\n\nardrive last-tx -a <Arweave address of cold wallet>\n\n\nTo get the base transaction reward required for an AR transaction, use the base-reward function, optionally applying a reward boost multiple if you\'re looking to front-run network congestion:\n\nardrive base-reward --boost 1.5\n\n\nWrite down or securely copy the values you derived from the Internet-connected machine and run the following commands on the airgapped machine, piping the outputted signed transaction data to a file in the process, e.g. sendme.json (if that\'s your signed transaction transfer medium preference):\n\nardrive create-tx -w /path/to/wallet/file.json -d <dest Arweave address> -a <AR amount to send> --last-tx <from previous steps> --reward "<from previous steps>" > sendme.json\n\n\nTransport your signed transaction to the Internet-connected machine and run the following command to send your transaction to the Arweave network:\n\nardrive send-tx -x /path/to/sendme.json\n\n\n\n# Using a Custom Arweave Gateway\n\nOn each command that uses a gateway, it is possible to supply your own custom Arweave gateway using the flag --gateway or by setting an environment variable named ARWEAVE_GATEWAY.\n\nFor example, you could test out that your ArFS transactions are working as expected on a local test network such as ArLocal with this flow:\n\n# Setup ArLocal instance on port 1984\nnpx arlocal\n\n# In another terminal, fund your wallet with AR\ncurl http://localhost:1984/mint/{ your public wallet address }/99999999999999\n\n# Create drive and root folder on ArLocal using `--gateway` flag\nardrive create-drive --gateway http://127.0.0.1:1984 -w /path/to/wallet -n \'my-test-drive\'\n\n# Setup ARWEAVE_GATEWAY as ENV variable\nexport ARWEAVE_GATEWAY="http://localhost:1984"\n\n# Mine block with drive + root folder transactions\ncurl "$ARWEAVE_GATEWAY/mine"\n\n# Upload file to ArLocal with ENV var\nardrive upload-file -F { root folder id from create drive } -l /path/to/file -w /path/to/wallet\n\n# Mine block with file transaction\ncurl "$ARWEAVE_GATEWAY/mine"\n\n# Inspect meta data of created entities\nardrive list-drive -d { drive id from create drive }\n\n# Download file to verify integrity\nardrive download-file -f { file id from upload file }\n\n\n\n# Persistent Caching of ArFS Entity Metadata\n\nTo avoid redundant requests to the Arweave network for immutable ArFS entity metadata, a persistent file cache is created and maintained at:\n\nWindows: <os.homedir()>/ardrive-caches/metadata\nNon-Windows: <os.homedir()>/.ardrive/caches/metadata\n\n\nThe XDG_CACHE_HOME environment variable is honored, where applicable, and will be used in place of os.homedir() in the scenarios described above.\n\nMetadata cache logging to stderr can be enabled by setting the ARDRIVE_CACHE_LOG environment variable to 1.\n\nCache performance is UNDEFINED for multi-process scenarios, but is presumed to be generally usable.\n\nThe cache can be manually cleared safely at any time that any integrating app is not in operation.',normalizedContent:'# using the cli\n\n\n# cli help\n\nlearn to use any command:\n\nardrive --help\n\n\n\n# cli version\n\nyou can print out the version by running any of:\n\nardrive --version\nardrive -v\n\n\n\n# wallet operations\n\nbrowsing of ardrive public data is possible without the need for an arweave wallet. however, for all write operations, or read operations without encryption/decryption keys, you\'ll need a wallet.\n\nas you utilize the cli, you can use either your wallet file or your seed phrase interchangeably. consider the security implications of each approach for your particular use case carefully. if at any time you\'d like to generate a new wallet altogether, start by generating a new seed phase. and if you\'d like to use that seed phrase in the form of a wallet file, or if you\'d like to recover an existing wallet via its seed phrase, use either or both of the following commands:\n\n# generate seed-phrase\nardrive generate-seedphrase\n"this is an example twelve word seed phrase that you could use"\n\n# generate/recover wallet file (with example output file path)\nardrive generate-wallet -s "this is an example twelve word seed phrase that you could use" > /path/to/wallet/file.json\n\n\npublic attributes of arweave wallets can be retrieved via their 43-character arweave wallet address. you can retrieve the wallet address associated with your wallet file or 12-word seed phrase (e.g. wallets generated by arconnect) like so:\n\n# wallet file\nardrive get-address -w /path/to/wallet/file.json\n\n# seed phrase (with sample output)\nardrive get-address -s "this is an example twelve word seed phrase that you could use"\nhttn8f92tr32n8wuo-nidkjmqpknrbl10jwo5mz9x2k\n\n\nyou\'ll need ar in your wallet for any write operations you perform in ardrive. you can always check your wallet balance (in both ar and winston units) by performing:\n\n# getting the balance for your own wallet\nardrive get-balance -w /path/to/wallet/file.json\n\n# getting the balance for any wallet (with sample output)\nardrive get-balance -a "httn8f92tr32n8wuo-nidkjmqpknrbl10jwo5mz9x2k"\n1500000000000 winston\n1.5 ar\n\n\nif, at any time, you need to send ar out of your wallet to another wallet address, you may perform:\n\n# using our previously generated wallet as the destination...\nardrive send-ar -w /path/to/wallet/file.json --dest-address "httn8f92tr32n8wuo-nidkjmqpknrbl10jwo5mz9x2k" --ar-amount 2.12345\n\n\n\n# working with entities\n\nardrive\'s arfs integration provides for hierarchical organization of your file and folder data on arweave.\n\nthe fundamental entity types specified by arfs are:\n\n * drives\n * folders\n * files\n\neach instance of these entities have a version 4 uuid entity id that is commonly referred to by its entity type, i.e. drive id, folder id, and file id.\n\nwhen you execute write functions with the cli, the json output will contain information about the arweave transaction ids that were registered when writing your entities to the blockweave, any miner rewards or ardrive community tips that were disbursed from your wallet, and any new entity ids and, when applicable, encryption keys that were generated in the process of creating the entities. typically, you\'ll want to keep track of those and get proficient with retrieving them in order to build your drive hierarchy to your liking. see understanding drive and file keys for more info.\n\n\n# dry run\n\nan important feature of the ardrive cli is the --dry-run flag. on each command that would write an arfs entity, there is the option to run it as a "dry run". this will run all of the steps and print the outputs of a regular arfs write, but will skip sending the actual transaction:\n\nardrive <my-command> <other-options> --dry-run\n\n\nthis can be very useful for gathering price estimations or to confirm that you\'ve copy-pasted your entity ids correctly before committing to an upload.\n\n\n# uploading to turbo (beta)\n\nusers can optionally choose to send each arfs entities created to ardrive turbo using the --turbo flag. instead of using ar from an arweave wallet, you can use turbo credits or take advantage of free/discounted upload promotions.\n\nardrive <my-command> <other-options> --turbo\n\n\nthis flag will skip any balance check on the cli side. turbo will check a user\'s balance and accept/reject a data item at the time of upload. the --turbo flag by default will send your files to upload.ardrive.io to be bundled. to change the turbo destination, users can use the --turbo-url flag.\n\n\n# working with drives\n\n\n# understanding drive hierarchies\n\nat the root of every data tree is a "drive" entity. when a drive is created, a root folder is also created for it. the entity ids for both are generated and returned when you create a new drive:\n\n# use `tee` to keep a receipt of the full set of transactions info and `jq` to focus on the data of interest\nardrive create-drive --wallet-file /path/to/my/wallet.json --drive-name "teenage love poetry" |\ntee created_drive.json |\njq \'[.created[] | del(.metadatatxid, .entityname, .bundledin)]\'\n[\n    {\n        "type": "drive",\n        "entityid": "6939b9e0-cc98-42cb-bae0-5888eca78885"\n    }\n    {\n        "type": "folder",\n        "entityid": "d1535126-fded-4990-809f-83a06f2a1118"\n    }\n]\n\n\nthe relationship between the drive and its root folder is clearly visible when retrieving the drive\'s info:\n\nardrive drive-info -d "6939b9e0-cc98-42cb-bae0-5888eca78885"\n| jq \'{driveid, rootfolderid}\'\n{\n    "driveid": "6939b9e0-cc98-42cb-bae0-5888eca78885",\n    "rootfolderid": "d1535126-fded-4990-809f-83a06f2a1118"\n}\n\n\n\nall file and folder entities in the drive will be anchored to it by a "drive-id" gql tag. and they\'ll each be anchored to a parent folder id, tracked via the "parent-folder-id" gql tag, forming a tree structure whose base terminates at the root folder.\n\n\n# understanding drive and file keys\n\nprivate drives achieve privacy via end-to-end encryption facilitated by hash-derived "keys". drive keys encrypt/decrypt drive and folder data, and file keys encrypt/decrypt file data.\n\nthe relationships among your data and their keys is as follows:\n\n * drive key = functionof(wallet signature, randomly generated drive id, user-specified drive password)\n * file key = functionof(randomly generated file id, drive key)\n\nwhen you create private entities, the returned json data from the ardrive cli will contain the keys needed to decrypt the encrypted representation of your entity that is now securely and permanently stored on the blockweave.\n\nto derive the drive key again for a drive, perform the following:\n\n# will throw an error if the wallet or password specified can\'t be used to decrypt the on-chain drive\nardrive get-drive-key -w /path/to/my/wallet.json -d "6939b9e0-cc98-42cb-bae0-5888eca78885" -p\n\n\nto derive the file key again for a file, perform the following:\n\n# will throw an error if the drive key or drive-key-derivation data specified can\'t be used to decrypt the on-chain file\nardrive get-file-key --file-id "bd2ce978-6ede-4b0d-8f79-2d7bc235a0e0" --drive-id "6939b9e0-cc98-42cb-bae0-5888eca78885" --drive-key "yhdcjpck3ecuhqcknx2d/nn5reejokfzvqkunlcnpeo"\n\n\n\n# managing drive passwords\n\nthe ardrive cli\'s private drive and folder functions all require either a drive password or a drive key. private file functions require either the drive password or the file key. keys and passwords are sensitive data, so manage the entry, display, storage, and transmission of them very carefully.\n\ndrive passwords are the most portable, and fundamental, encryption facet, so a few options are available during private drive operations for supplying them:\n\n * environment variable\n * stdin\n * secure prompt\n\n# supplying your password: environment variable\n\n# securely type your password into a read prompt, store it to tmp_ardrive_pw, and export it for the shell session\nread -rs tmp_ardrive_pw\nexport ardrive_drive_pw=$(tmp_ardrive_pw)\nardrive <some private command> -w /path/to/wallet.json -p\n\n\n# supplying your password: stdin\n\n# pipe your drive password to the ardrive cli\ncat /path/to/my/drive/password.txt | ardrive <some private command> -w /path/to/wallet.json -p\n\n# redirect your drive password to the ardrive cli\nardrive <some private command> -w /path/to/wallet.json -p < /path/to/my/drive/password.txt\n\n\n# supplying your password: prompt\n\n# when all other options fail, the cli will prompt for your password (not compatible with pipes and redirects!)\nardrive <some private command> -w /path/to/wallet.json -p\n? enter drive password: › ********\n\n\n\n# creating drives\n\n# public drive\nardrive create-drive --wallet-file /path/to/my/wallet.json --drive-name "my public archive"\n\n# private drive\nardrive create-drive --wallet-file /path/to/my/wallet.json --drive-name "teenage love poetry" -p\n\n\n\n# listing drives for an address\n\nyou can list all the drives associated with any arweave wallet address, though the details of private drives will be obfuscated from you unless you provide the necessary decryption data.\n\n# list all your own drives\nardrive list-all-drives -w /path/to/my/wallet.json -p\n\n# list any address\'s drives\nardrive list-all-drives --address "httn8f92tr32n8wuo-nidkjmqpknrbl10jwo5mz9x2k"\n\n\n\n# listing every entity in a drive\n\nuseful notes on listing the contents of drives:\n\n * listing a drive is effectively the same as listing its root folder.\n * you can control the tree depth of the data returned.\n * path, txpath, and entityidpath properties on entities can provide useful handholds for other forms of data navigation\n\n# list everything in a private drive\nardrive list-drive -d "c7f87712-b54e-4491-bc96-1c5fa7b1da50" -w /path/to/my/wallet.json -p\n\n# list a private drive including the `filekey` and/or `drivekey` of all listed entitites\nardrive list-drive -d "c7f87712-b54e-4491-bc96-1c5fa7b1da50" -w /path/to/my/wallet.json -p --with-keys\n\n# list the contents of a public drive up to and including those in the grandchild folders of the root folder\nardrive list-drive -d "c7f87712-b54e-4491-bc96-1c5fa7b1da50" --max-depth 2\n\n\n\n# list drive pipeline examples\n\nyou can utilize jq and the list commands to reshape the commands\' output data into useful forms and stats for many use cases. here are a few examples:\n\n\n\n# get share links for a public drive\nardrive list-drive -d a44482fd-592e-45fa-a08a-e526c31b87f1 | jq \'.[] | select(.entitytype == "file") | "https://app.ardrive.io/#/file/" + .entityid + "/view"\'\n\n\nexample output:\n\n"https://app.ardrive.io/#/file/1337babe-f000-dead-beef-ffffffffffff/view"\n"https://app.ardrive.io/#/file/cdbc9ddd-1cab-41d9-acbd-fd4328929de3/view"\n"https://app.ardrive.io/#/file/f19bc712-b57a-4e0d-8e5c-b7f1786b34a1/view"\n"https://app.ardrive.io/#/file/4f8e081b-42f2-442d-be41-57f6f906e1c8/view"\n"https://app.ardrive.io/#/file/0e02d254-c853-4ff0-9b6e-c4d23d2a95f5/view"\n"https://app.ardrive.io/#/file/c098b869-29d1-4a86-960f-a9e10433f0b0/view"\n"https://app.ardrive.io/#/file/4afc8cdf-4d27-408a-bfb9-0a2ec21eebf8/view"\n"https://app.ardrive.io/#/file/85fe488d-fcf7-48ca-9df8-2b39958bbf15/view"\n...\n\n\n\n\n# get total size of all files within drive\nardrive list-drive -d 13c3c232-6687-4d11-8ac1-35284102c7db | jq \' map(select(.entitytype == "file") | .size) | add\'\n\n\n\n\n# get total number of files within drive\nardrive list-drive -d 01ea6ba3-9e58-42e7-899d-622fd110211c | jq \'[ .[] | select(.entitytype == "file") ] | length\'\n\n\n\n# working with folders\n\nas discussed previously, all folders in a drive are linked by way of parent folder references back to the root folder of a drive. folders can be moved into any folder in the hierarchy that\'s not in their own subtree.\n\n\n# creating folders\n\ncreating folders manually is straightforward:\n\nardrive create-folder --parent-folder-id "63153bb3-2ca9-4d42-9106-0ce82e793321" --folder-name "my awesome folder" -w /path/to/wallet.json\n\n\nexample output:\n\n{\n    "created": [\n        {\n            "type": "folder",\n            "metadatatxid": "ayfmbvmwqhbg9y5fbj3iasy5oxuqhauow7pcs1sl4dk",\n            "entityid": "d1b7c514-fb12-4603-aad8-002cf63015d3",\n            "key": "yhdcjpckd2cuhqcknx2d/xf5reejokfzvqkunlcnpek",\n            "entityname": "my awesome folder"\n        }\n    ],\n    "tips": [],\n    "fees": {\n        "ayfmbvmwqhbg9y5fbj3iasy5oxuqhauow7pcs1sl4dk": 1378052\n    }\n}\n\n\nnote: folders can also be created by supplying a folder as the --local-path of an upload-file command. in this case, the folder hierarchy on the local disk will be reconstructed on chain during the course of the recursive bulk upload.\n\n\n# moving folders\n\nmoving a folder is as simple as supplying a new parent folder id. note that naming collisions among entities within a folder are not allowed.\n\nardrive move-folder --folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" --parent-folder-id "29850ab7-56d4-4e1f-a5be-cb86d5513921" -w /path/to/wallet.json\n\n\n\n# renaming folders\n\nin order to rename a folder you must provide a name different from its current one, and it must not create naming conflicts with its sibling entities.\n\nardrive rename-folder --folder-id "568d5eba-dbf3-4a49-8129-1c58f7fd35bc" --folder-name "folder with cool stuff" -w "./wallet.json"\n\n\n\n# viewing folder metadata\n\nto view the metadata of a folder, users can use the folder-info command:\n\nardrive folder-info --folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0"\n\n\n\n# listing contents of a folder\n\nsimilar to drives, the list-folder command can be used to fetch the metadata of each entity within a folder. but by default, the command will fetch only the immediate children of that folder (--max-depth 0):\n\n# list immediate children of folder "my public folder"\nardrive list-folder --parent-folder-id "29850ab7-56d4-4e1f-a5be-cb86d5513940"\n\n\nexample output:\n\n[\n    {\n        "appname": "ardrive-cli",\n        "appversion": "2.0",\n        "arfs": "0.11",\n        "contenttype": "application/json",\n        "driveid": "01ea6ba3-9e58-42e7-899d-622fd110211a",\n        "entitytype": "folder",\n        "name": "mytestfolder",\n        "txid": "hyikyflwy7pt9nletqotim_-qpvuwf4cldhx1sjuaeu",\n        "unixtime": 1635102772,\n        "parentfolderid": "29850ab7-56d4-4e1f-a5be-cb86d5513940",\n        "entityid": "03df2929-1440-4ab4-bbf0-9dc776e1ed96",\n        "path": "/my public folder/mytestfolder",\n        "txidpath": "/09_x0x2ez3flxxls72wdtdq6uaa5g2ljst-qh1m0zhu/hyikyflwy7pt9nletqotim_-qpvuwf4cldhx1sjuaeu",\n        "entityidpath": "/29850ab7-56d4-4e1f-a5be-cb86d5513940/03df2929-1440-4ab4-bbf0-9dc776e1ed96"\n    },\n    {\n        "appname": "ardrive-cli",\n        "appversion": "2.0",\n        "arfs": "0.11",\n        "contenttype": "application/json",\n        "driveid": "01ea6ba3-9e58-42e7-899d-622fd110211a",\n        "entitytype": "folder",\n        "name": "super sonic public folder",\n        "txid": "vuk1b_vo1va2-ehltqjsotzy0rdn6lu4hqo3rd2xoti",\n        "unixtime": 1631283259,\n        "parentfolderid": "29850ab7-56d4-4e1f-a5be-cb86d5513940",\n        "entityid": "452c6aec-43dc-4015-9abd-20083068d432",\n        "path": "/my public folder/super sonic sub folder",\n        "txidpath": "/09_x0x2ez3flxxls72wdtdq6uaa5g2ljst-qh1m0zhu/vuk1b_vo1va2-ehltqjsotzy0rdn6lu4hqo3rd2xoti",\n        "entityidpath": "/29850ab7-56d4-4e1f-a5be-cb86d5513940/452c6aec-43dc-4015-9abd-20083068d432"\n    },\n    {\n        "appname": "ardrive-cli",\n        "appversion": "2.0",\n        "arfs": "0.11",\n        "contenttype": "application/json",\n        "driveid": "01ea6ba3-9e58-42e7-899d-622fd110211a",\n        "entitytype": "file",\n        "name": "test-number-twelve.txt",\n        "txid": "429zbqnd7zbnzgukaix26ryz3g5sexcco_oiy6cpzlg",\n        "unixtime": 1631722234,\n        "size": 47,\n        "lastmodifieddate": 1631722217028,\n        "datatxid": "va-bxas7i6n90ch4fzsk4cws3eopb1kohj8yei88dj0",\n        "datacontenttype": "text/plain",\n        "parentfolderid": "29850ab7-56d4-4e1f-a5be-cb86d5513940",\n        "entityid": "e5948327-d6de-4acf-a6fe-e091ecf78d71",\n        "path": "/my public folder/test-number-twelve.txt",\n        "txidpath": "/09_x0x2ez3flxxls72wdtdq6uaa5g2ljst-qh1m0zhu/429zbqnd7zbnzgukaix26ryz3g5sexcco_oiy6cpzlg",\n        "entityidpath": "/29850ab7-56d4-4e1f-a5be-cb86d5513940/e5948327-d6de-4acf-a6fe-e091ecf78d71"\n    },\n    {\n        "appname": "ardrive-cli",\n        "appversion": "2.0",\n        "arfs": "0.11",\n        "contenttype": "application/json",\n        "driveid": "01ea6ba3-9e58-42e7-899d-622fd110211a",\n        "entitytype": "file",\n        "name": "wonderful-test-file.txt",\n        "txid": "6cokwlzb81fx7dq-lb654vm0xqykdu6eyohdmej2gk4",\n        "unixtime": 1631671275,\n        "size": 23,\n        "lastmodifieddate": 1631283389232,\n        "datatxid": "up8thwa_1gvyrqnrqymtpwvu4-uznwbn7six_aiihg4",\n        "datacontenttype": "text/plain",\n        "parentfolderid": "29850ab7-56d4-4e1f-a5be-cb86d5513940",\n        "entityid": "3274dae9-3487-41eb-94d5-8d5d3d8bc343",\n        "path": "/my public folder/wonderful-test-file.txt",\n        "txidpath": "/09_x0x2ez3flxxls72wdtdq6uaa5g2ljst-qh1m0zhu/6cokwlzb81fx7dq-lb654vm0xqykdu6eyohdmej2gk4",\n        "entityidpath": "/29850ab7-56d4-4e1f-a5be-cb86d5513940/3274dae9-3487-41eb-94d5-8d5d3d8bc343"\n    }\n]\n\n\nto list further than the immediate children, you can make use of the flags: --all and --max-depth.\n\n# list all contents of a public folder\nardrive list-folder --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" --all\n\n# list the contents of a public folder with custom depth\nardrive list-folder --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" --max-depth 2\n\n\nin the case of private entitites, the --with-keys flag will make the command to include the keys in the output.\n\n# list all contents of a private folder including the `filekey` and/or `drivekey` of all listed entitites\nardrive list-folder --parent-folder-id "1b027047-4cfc-4eee-88a8-9af694f660c0" -w /my/wallet.json --with-keys\n\n\n\n# working with files\n\nsimilar to folders, files are linked to a parent folder which ultimately chains the file back to the root folder of its parent drive. as such, a parent folder id is required in order to upload files. files can be freely moved to other folders within their original drive.\n\nthe important difference for file entities is that they also hold a reference to their data transaction id, which is the datatxid as returned by the file-info command. this is where your uploaded data lives on the permaweb.\n\nnote: the cli currently (v1.0.0) has progress logging on uploads disabled for producing clean json outputs that can be piped in the terminal. on larger uploads, remember to be patient. you can check your system\'s node process to confirm the process is still uploading.\n\n\n# uploading a single file\n\nto upload a file, you\'ll need a parent folder id, the file to upload\'s file path, and the path to your wallet:\n\n# supply the parent folder id to upload-file\nardrive upload-file --local-path /path/to/file.txt  --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\nexample output:\n\n{\n    "created": [\n        {\n            "type": "file",\n            "entityname": "file.txt"\n            "entityid": "6613395a-cf19-4420-846a-f88b7b765c05"\n            "datatxid": "l4inwybapfaij7ou-nb8z9xrbhawyqzs5o9qhk-3eni",\n            "metadatatxid": "yfddxuyerpcpbbgtm_gv_x5hr3tu5fnz8bm-jpl__je",\n            "bundledin": "1zwdfzaiv8e26yjbs2zq4xjjp_1ewalvrgd_gyyw7f8",\n            "sourceuri": "file:///path/to/file.txt"\n        },\n        {\n            "type": "bundle",\n            "bundletxid": "1zwdfzaiv8e26yjbs2zq4xjjp_1ewalvrgd_gyyw7f8"\n        }\n    ],\n    "tips": [\n        {\n            "txid": "1zwdfzaiv8e26yjbs2zq4xjjp_1ewalvrgd_gyyw7f8",\n            "recipient": {\n                "address": "3mxgj4xlcqqnv6_tikx0f0d5xve0mnvonqi5gzxjxkt"\n            },\n            "winston": "10000000"\n        }\n    ],\n    "fees": {\n        "1zwdfzaiv8e26yjbs2zq4xjjp_1ewalvrgd_gyyw7f8": 42819829\n    }\n}\n\n\nnote: to upload to the root of a drive, specify its root folder id as the parent folder id for the upload destination. you can retrieve it like so:\n\nardrive drive-info -d "c7f87712-b54e-4491-bc96-1c5fa7b1da50" | jq -r \'.rootfolderid\'\n\n\n\n# ipfs cid tagging\n\ncertain nodes on the arweave network may be running the ipfs+arweave bridge. tagging your file upload transaction with its ipfs v1 cid value in the \'ipfs-add\' tag may allow you to take advantage of this system. it can also be helpful for finding data on arweave via gql based on its cid. to include the cid tag on your public file uploads, you may use the \'--add-ipfs-tag\' flag:\n\nardrive upload-file --add-ipfs-tag --local-path /path/to/file.txt  --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\n\n# progress logging of transaction uploads\n\nprogress logging of transaction uploads to stderr can be enabled by setting the ardrive_progress_log environment variable to 1:\n\nuploading file transaction 1 of total 2 transactions...\ntransaction _gkqasqx194a364hph8oe-oku1adfhwxwow9_jc1yjc upload progress: 0%\ntransaction _gkqasqx194a364hph8oe-oku1adfhwxwow9_jc1yjc upload progress: 35%\ntransaction _gkqasqx194a364hph8oe-oku1adfhwxwow9_jc1yjc upload progress: 66%\ntransaction _gkqasqx194a364hph8oe-oku1adfhwxwow9_jc1yjc upload progress: 100%\nuploading file transaction 2 of total 2 transactions...\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 0%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 13%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 28%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 42%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 60%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 76%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 91%\ntransaction na1stcdtkuf290k0qsqvmj78isec0bwgrai3d8cl1lu upload progress: 100%\n\n\n\n# download a single file (beta)\n\nby using the download-file command you can download a file on chain to a folder in your local storage specified by --local-path (or to your current working directory if not specified):\n\nardrive download-file -w /path/to/wallet.json --file-id "ff450770-a9cb-46a5-9234-89cbd9796610" --local-path /my_ardrive_downloads/\n\n\nspecify a filename in the --local-path if you\'d like to use a different name than the one that\'s used in your drive:\n\nardrive download-file -w /path/to/wallet.json --file-id "ff450770-a9cb-46a5-9234-89cbd9796610" --local-path /my_ardrive_downloads/my_pic.png\n\n\n\n# rename a single file\n\nto rename an on-chain file you can make use of the rename-file command. the required parameters are the file id and the new name, as well as the owner wallet or seed phrase.\n\nardrive rename-file --file-id "290a3f9a-37b2-4f0f-a899-6fac983833b3" --file-name "my custom file name.txt" --wallet-file "wallet.json"\n\n\n\n# uploading a folder with files (bulk upload)\n\nusers can perform a bulk upload by using the upload-file command on a target folder. the command will reconstruct the folder hierarchy on local disk as arfs folders on the permaweb and upload each file into their corresponding folders:\n\nardrive upload-file --local-path /path/to/folder --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\n\n# downloading a folder with files\n\nyou can download a folder from ardrive to your local machine with the download-folder command. in the following examples, assume that a folder with id "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" exists in your drive and is named "myardrivefolder".\n\n# downloads "myardrivefolder" into the current working directory, i.e. ./myardrivefolder/\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6"\n\n\nby specifying the --local-path option, you can choose the local parent folder into which the on-chain folder will be downloaded. when the parameter is omitted, its value defaults to the current working directory (i.e. ./).\n\n# downloads "myardrivefolder" into /my_ardrive_downloads/myardrivefolder\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --local-path /my_ardrive_downloads/\n\n\nthe --max-depth parameter lets you to choose a custom folder depth to download. when omitted, the entire subtree of the folder will be downloaded. in the following example, only the immediate children of the folder will be downloaded:\n\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --max-depth 0\n\n\nthe behaviors of --local-path are similar to those of cp and mv in unix systems, e.g.:\n\n# folder downloaded to "/existing_folder/myardrivefolder"\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --local-path "/existing_folder"\n\n# folder downloaded to "/existing_folder/myardrivefolder/myardrivefolder" as "/existing_folder/myardrivefolder" already exists\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --local-path "/existing_folder/myardrivefolder"\n\n# folder downloaded to "/existing_folder/non_existent_folder"\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --local-path "/existing_folder/non_existent_folder"\n\n# error!\nardrive download-folder -f "47f5bde9-61ba-49c7-b409-1aa4a9e250f6" --local-path "/non_existent_folder_1/non_existent_folder_2"\n\n\n\n# downloading a drive\n\nto download the whole drive you can use the download-drive command.\n\nardrive download-drive -d "c0c8ba1c-efc5-420d-a07c-a755dc67f6b2"\n\n\nthis is equivalent to running the download-folder command against the root folder of the drive.\n\n\n# uploading multiple files\n\nto upload an arbitrary number of files or folders, pass a space-separated list of paths to --local-paths:\n\n# specifying a mixed set of file and folder paths\nardrive upload-file -w wallet.json -f "6939b9e0-cc98-42cb-bae0-5888eca78885" --local-paths ./image.png ~/backups/ ../another_file.txt\n\n# example using glob expansion to upload all .json files in the current folder\nardrive upload-file -w wallet.json -f "6939b9e0-cc98-42cb-bae0-5888eca78885" --local-paths ./*.json\n\n\n\n# name conflict resolution on upload\n\nby default, the upload-file command will use the upsert behavior if existing entities are encountered in the destination folder tree that would cause naming conflicts.\n\nexpect the behaviors from the following table for each of these resolution settings:\n\nsource type   conflict at dest   `skip`   `replace`   `upsert` (default)\nfile          none               insert   insert      insert\nfile          matching file      skip     update      skip\nfile          different file     skip     update      update\nfile          folder             skip     fail        fail\nfolder        none               insert   insert      insert\nfolder        file               skip     fail        fail\nfolder        folder             re-use   re-use      re-use\n\nthe default upsert behavior will check the destination folder for a file with a conflicting name. if no conflicts are found, it will insert (upload) the file.\n\nin the case that there is a file to file name conflict found, it will only update it if necessary. to determine if an update is necessary, upsert will compare the last modified dates of conflicting file and the file being uploaded. when they are matching, the upload will be skipped. otherwise the file will be updated as a new revision.\n\nto override the upsert behavior, use the --replace option to always make new revisions of a file or the --skip option to always skip the upload on name conflicts:\n\nardrive upload-file --replace --local-path /path/to/file.txt  --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\nardrive upload-file --skip --local-path /path/to/file.txt  --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\nalternatively, the upload-file commands now also supports the --ask conflict resolution option. this setting will always provide an interactive prompt on name conflicts that allows users to decide how to resolve each conflict found:\n\nardrive upload-file --ask --local-file-path /path/to/file.txt  --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\ndestination folder has a file to file name conflict!\n\nfile name: 2.png\nfile id: efbc0370-b69f-44d9-812c-0d272b019027\nthis file has a different last modified date\n\nplease select how to proceed:\n › - use arrow-keys. return to submit.\n❯   replace as new file revision\n    upload with a different file name\n    skip this file upload\n\n\n\n# understanding bundled transactions\n\nthe ardrive cli currently uses two different methods for uploading transactions to the arweave network: standard transactions and direct to network (d2n) bundled transactions. by default, the cli will send a d2n bundled transaction for any action that would result in multiple transactions. this bundling functionality is currently used on the upload-file and create-drive commands.\n\nd2n bundled transactions come with several benefits and implications:\n\n * bundling saves ar and enhances arfs reliability by sending associated arfs transactions up as one atomic bundle.\n * bundled transactions are treated as a single data transaction by the arweave network, but can be presented as separate transactions by the arweave gateway once they have been "unbundled".\n * un-bundling can take anywhere from a few minutes up to an hour. during that time, the files in the bundle will neither appear in list- commands nor be downloadable. similarly, they will not appear in the web app after syncs until un-bundling is complete. this can negatively affect the accuracy of upsert operations, so it\'s best to wait before retrying bulk uploads.\n * bundling reliability on the gateway side degrades once bundles reach either 500 data items (or ~250 files) or 500 mib, so the cli will create and upload multiple bundles as necessary, or will send files that are simply too large for reliable bundling as unbundled txs.\n\n\n# uploading a non-bundled transaction (not recommended)\n\nwhile not recommended, the cli does provide the option to forcibly send all transactions as standard transactions rather than attempting to bundle them together. to do this, simply add the --no-bundle flag to the upload-file or create-drive command:\n\nardrive upload-file --no-bundle --local-path /path/to/file --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\n\n# fetching the metadata of a file entity\n\nsimply perform the file-info command to retrieve the metadata of a file:\n\nardrive file-info --file-id "e5ebc14c-5b2d-4462-8f59-7f4a62e7770f"\n\n\nexample output:\n\n{\n    "appname": "ardrive-web",\n    "appversion": "0.1.0",\n    "arfs": "0.11",\n    "contenttype": "application/json",\n    "driveid": "51062487-2e8b-4af7-bd81-4345dc28ea5d",\n    "entitytype": "file",\n    "name": "2_depth.png",\n    "txid": "czkdjqwnmxbwchga1hjso5zh--4oyodigwzi-fmx28u",\n    "unixtime": 1633625081,\n    "size": 41946,\n    "lastmodifieddate": 1605157729000,\n    "parentfolderid": "a2c8a0cb-0ca7-4dbb-8bf8-93f75f308e63",\n    "entityid": "e5ebc14c-5b2d-4462-8f59-7f4a62e7770f",\n    "fileid": "e5ebc14c-5b2d-4462-8f59-7f4a62e7770f",\n    "datatxid": "jz0wswyagvc0ae3uzaco-yjqg8oprn3uucmddt8fbjc",\n    "datacontenttype": "image/png"\n}\n\n\n\n# retrying a failed file data transaction (public unbundled files only)\n\narweave data upload transactions are split into two phases: transaction posting and chunks uploading. once the transaction post phase has been completed, you\'ve effectively "paid" the network for storage of the data chunks that you\'ll send in the next stage.\n\nif your system encounters an error while posting the transaction, you can retry posting the transaction for as long as your tx_anchor is valid (learn more about tx_anchors here). you may retry and/or resume posting chunks at any time after your transaction has posted. the ardrive cli allows you to take advantage of this arweave protocol capability.\n\nusing the cli, when the transaction post has succeeded but the chunk upload step fails, the data transaction\'s id could be lost. there are a few options to recover this id. if the failed transaction is the most recent one sent from a wallet, the transaction id can be recovered with the ardrive last-tx -w /path/to/wallet command after the transaction\'s headers have been mined (it can take 5-10 minutes for the tx-id to become available with the last-tx approach). other options for finding the partially uploaded transaction\'s id include:\n\n * using an arweave gateway gql http endpoint to search for transactions that belong to the wallet. see this arweave gql guide for more info.\n * browse the recent transactions associated with the wallet via a block explorer tool like viewblock.\n\nin order to re-seed the chunks for an unbundled arfs data transaction, a user must have the data transaction id, the original file data, and either a destination folder id or a valid file id for the file. supply that information to the retry-tx command like so:\n\nardrive retry-tx --tx-id { data transaction id } --parent-folder-id { destination folder id }  --local-path /path/to/file  --wallet-file /path/to/wallet\n\n\nnote: retry feature is currently only available for public unbundled file transactions. it is also perfectly safe to mistakenly re-seed the chunks of a healthy transaction, the transaction will remain stable and the wallet balance will not be affected.\n\n\n# moving files\n\nfiles can be moved from one folder to another within the same drive. moving a file is simply the process of uploading a new file metadata revision with an updated file id <> parent folder id relationship. the following command will move a file from its current location in a public drive to a new parent folder in that drive:\n\nardrive move-file --file-id "e5ebc14c-5b2d-4462-8f59-7f4a62e7770f" --parent-folder-id "a2c8a0cb-0ca7-4dbb-8bf8-93f75f308e63"\n\n\n\n# uploading manifests\n\narweave path manifests are are special .json files that instruct arweave gateways to map file data associated with specific, unique transaction ids to customized, hosted paths relative to that of the manifest file itself. so if, for example, your manifest file had an arweave.net url like:\n\nhttps://arweave.net/{manifest tx id}\n\n\nthen, all the mapped transactions and paths in the manifest file would be addressable at urls like:\n\nhttps://arweave.net/{manifest tx id}/foo.txt\nhttps://arweave.net/{manifest tx id}/bar/baz.png\n\n\nardrive supports the creation of these arweave manifests using any of your public folders. the generated manifest paths will be links to each of the file entities within the specified folder. the manifest file entity will be created at the root of the folder.\n\nto create a manifest of an entire public drive, specify the root folder of that drive:\n\nardrive create-manifest -f "bc9af866-6421-40f1-ac89-202bddb5c487" -w "/path/to/wallet"\n\n\nyou can also create a manifest of a folder\'s file entities at a custom depth by using the --max-depth option:\n\n# create manifest of a folder\'s local file contents, excluding all sub-folders\nardrive create-manifest --max-depth 0  -f "867228d8-4413-4c0e-a499-e1decbf2ea38" -w "/path/to/wallet"\n\n\ncreating a .json file of your manifest links output can be accomplished here with some jq parsing and piping to a file:\n\nardrive create-manifest -w /path/to/wallet -f "6c312b3e-4778-4a18-8243-f2b346f5e7cb"  | jq \'{links}\' > links.json\n\n\nif you\'d like to preview the contents of your manifest before uploading, you can perform a dry run and do some lightweight post processing to isolate the data:\n\nardrive create-manifest -w /path/to/wallet -f "6c312b3e-4778-4a18-8243-f2b346f5e7cb"  --dry-run | jq \'{manifest}.manifest\'\n\n\n\n\n{\n  "manifest": "arweave/paths",\n  "version": "0.1.0",\n  "index": {\n    "path": "index.html"\n  },\n  "paths": {\n    "hello_world.txt": {\n      "id": "y7gff8r9y0meu_oi1azed87vrmai97jdrq2l0cbgj68"\n    },\n    "index.html": {\n      "id": "pelonjvebhybsdxvymvxbgtmhd96v9puuuxj8guhgoy"\n    }\n  }\n}\n\n\nthe manifest data transaction is tagged with a unique content-type, application/x.arweave-manifest+json, which tells the gateway to treat this file as a manifest. the manifest file itself is a .json file that holds the paths (the data transaction ids) to each file within the specified folder.\n\nwhen your folder is later changed by adding files or updating them with new revisions, the original manifest will not be updated on its own. a manifest is a permanent record of your files in their current state.\n\nhowever, creating a subsequent manifest with the same manifest name will create a new revision of that manifest in its new current state. manifests follow the same name conflict resolution as outlined for files above (upsert by default).\n\n# hosting a webpage with manifest\n\nwhen creating a manifest, it is possible to host a webpage or web app. you can do this by creating a manifest on a folder that has an index.html file in its root.\n\nusing generated build folders from popular frameworks works as well. one requirement here to note is that the href= paths from your generated index.html file must not have leading a /. this means that the manifest will not resolve a path of /dist/index.js but it will resolve dist/index.js or ./dist/index.js.\n\nas an example, here is a flow of creating a react app and hosting it with an ardrive manifest. first, generate a react app:\n\nyarn create react-app my-app\n\n\nnext, add this field to the generated package.json so that the paths will resolve correctly:\n\n"homepage": ".",\n\n\nthen, create an optimized production build from within the app\'s directory:\n\nyarn build\n\n\nnow, we can create and upload that produced build folder on ardrive to any of your existing arfs folder entities:\n\nardrive upload-file -l "/build" -w "/path/to/wallet" --parent-folder-id "bc9af866-6421-40f1-ac89-202bddb5c487"\n\n\nand finally, create the manifest using the generated folder id from the build folder creation:\n\n# create manifest using the folder id of the `/build` folder\nardrive create-manifest -f "41759f05-614d-45ad-846b-63f3767504a4" -w "/path/to/wallet"\n\n\nin the return output, the top link will be a link to the deployed web app:\n\n    "links": [\n        "https://arweave.net/0mk68j8tqghaaoppe713zn0jdpczmt2ngs2ctryiuag",\n        "https://arweave.net/0mk68j8tqghaaoppe713zn0jdpczmt2ngs2ctryiuag/asset-manifest.json",\n        "https://arweave.net/0mk68j8tqghaaoppe713zn0jdpczmt2ngs2ctryiuag/favicon.ico",\n        "https://arweave.net/0mk68j8tqghaaoppe713zn0jdpczmt2ngs2ctryiuag/index.html",\n        # ...\n\n\nthis is effectively hosting a web app with ardrive. check out the ardrive price calculator react app hosted as an ardrive manifest.\n\n\n# uploading with a custom content type\n\neach file uploaded to the arweave network receives a "content-type" graphql tag that contains the mime type for the file. the gateway will use this content type to determine how to serve that file\'s data transaction at the arweave.net/{data tx id} endpoint.\n\nby default, the cli will attempt to derive this content type from the file extension of the provided file. in most cases, the content type that is derived will be correct and the gateway will properly serve the file.\n\nthe cli also provides the option for users to upload files with a custom content type using the --content-type flag:\n\nardrive upload-file --content-type "application/json"  --local-path /path/to/file --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\nit is currently possible to set this value to any given string, but the gateway will still only serve valid content types. check out this list of commonly used mime types to ensure you\'re providing a valid content type: common mime types.\n\nnote: in the case of multi-file uploads or recursive folder uploads, setting this --content-type flag will set the provided custom content type on every file entity within a given upload.\n\n\n# uploading from a remote url\n\nyou can upload a file from an existing url using the --remote-path flag. this must be used in conjunction with --dest-file-name.\n\nyou can use a custom content type using the --content-type flag, but if this isn\'t used the app will use the content type from the response header of the request for the remote data.\n\nardrive upload-file --remote-path "https://url/to/file" --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -d "example.jpg" -w /path/to/wallet.json\n\n\n\n# uploading a custom manifest\n\nusing the custom content type feature, it is possible for users to upload their own custom manifests. the arweave gateways use this special content type in order to identify an uploaded file as a manifest:\n\napplication/x.arweave-manifest+json\n\n\nin addition to this content type, the manifest must also adhere to the correct json structure of an arweave manifest. a user can create their own manifest from scratch, or start by piping a generated manifest to a json file and editing it to their specifications:\n\nardrive create-manifest -w /path/to/wallet -f "6c312b3e-4778-4a18-8243-f2b346f5e7cb"  --dry-run | jq \'{manifest}.manifest\' > my-custom-manifest.json\n\n\nafter editing the generated manifest, simply perform an upload-file command with the custom arweave manifest content type to any public folder:\n\nardrive upload-file --content-type "application/x.arweave-manifest+json" --local-path my-custom-manifest.json --parent-folder-id "9af694f6-4cfc-4eee-88a8-1b02704760c0" -w /path/to/wallet.json\n\n\nthe returned datatxid field on the created file entity will be the endpoint that the manifest can be found on arweave, just as explained in the manifest sections above:\n\nhttps://arweave.net/{datatxid}\nhttps://arweave.net/{datatxid}/custom-file-1\nhttps://arweave.net/{datatxid}/custom-file-2\n\n\n\n# uploading files with custom metadata\n\nardrive cli has the capability of attaching custom metadata to arfs file and folder metadata transactions during the upload-file command. this metadata can be applied to either the gql tags on the metadata transaction and/or into the metadata transaction\'s data json.\n\nall custom metadata applied must ultimately adhere to the following json shapes:\n\n// gql tags\ntype custommetadatagqltags = record<string, string | string[]>;\n\n// data json fields\ntype custommetadatajsonfields = record<string, jsonserializable>;\n\nexport type jsonserializable =\n  | string\n  | number\n  | boolean\n  | null\n  | { [member: string]: jsonserializable }\n  | jsonserializable[];\n\n\ne.g:\n\n{ ipfs-add: \'my_hash\' }\n# or\n{ \'custom name\': [\'val 1\', \'val 2\'] }\n\n\nwhen the custom metadata is attached to the metadata transaction\'s gql tags, they will become visible on any arweave gql gateway and also third party tools that read gql data.\n\nwhen these tags are added to the metadata transaction\'s data json they can be read by downloading the json data directly from https://arweave.net/metadata_tx_id.\n\nto add this custom metadata to your file metadata transactions, cli users can pass custom metadata these parameters:\n\n * --metadata-file path/to/json/schema\n * --metadata-json \'{"key": "val", "key-2": true, "key-3": 420, "key-4": ["more", 1337]}\'\n * --metadata-gql-tags "tag-name" "tag val"\n\nthe --metadata-file will accept a file path to json file containing custom metadata:\n\nardrive upload-file --metadata-file path/to/metadata/json # ...\n\n\nthis json schema object must contain instructions on where to put this metadata with the metadatajson and metadatagqltags keys. e.g:\n\n{\n  "metadatajson": {\n    "tag-name": ["value-1", "value-2"]\n  },\n  "metadatagqltags": {\n    "gql tag name": "tag value"\n  }\n}\n\n\nthe --metadata-gql-tags parameter accepts an array of string values to be applied to the metadata tx gql tags. this method of cli input does not support multiple tag values for a given tag name and the input must be an even number of string values. (known bug: string values starting with the "-" character are currently not supported. use --metadata-file parameter instead.) e.g:\n\nupload-file --metadata-gql-tags "custom tag name" "custom value" # ...\n\n\nand the --metadata-json parameter will accept a stringified json input. it will apply all declared json fields directly to the metadata tx\'s data json. e.g:\n\n upload-file --metadata-json \' { "json field": "value", "another fields": false } \' # ...\n\n\ncustom metadata applied to files and/or folders during the upload-file command will be read back through all existing read commands. e.g:\n\nardrive file-info -f 067c4008-9cbe-422e-b697-05442f73da2b\n{\n    "appname": "ardrive-cli",\n    "appversion": "1.17.0",\n    "arfs": "0.11",\n    "contenttype": "application/json",\n    "driveid": "967215ca-a489-494b-97ec-0dd428d7be34",\n    "entitytype": "file",\n    "name": "unique-name-9718",\n    "txid": "sxg8bnu6_bbahkjtxainvvoz_f-life6s7onxzojjk4",\n    "unixtime": 1657655070,\n    "size": 262148,\n    "lastmodifieddate": 1655409872705,\n    "datatxid": "ublzciff77ejl3m0uea8lxefntwmsbofoz-hibqkeyk",\n    "datacontenttype": "text/plain",\n    "parentfolderid": "97bc4fb5-aca4-4ffe-938f-1285153d98ca",\n    "entityid": "067c4008-9cbe-422e-b697-05442f73da2b",\n    "fileid": "067c4008-9cbe-422e-b697-05442f73da2b",\n    "ipfs-add": "my_hash",\n    "tag-1": "val",\n    "tag-2": "val",\n    "tag-3": "val",\n    "boost": "1.05"\n}\n\n\n# applying unique custom metadata during bulk workflows\n\nwith some custom scripting and the --metadata-file parameter, the ardrive cli can be used to apply custom metadata to each file individually in a bulk workflow. for example, if you choose a numbered file naming pattern you can make use of a for loop:\n\nfor i in {1..5}\ndo\nardrive upload-file -f f0c58c11-430c-4383-8e54-4d864cc7e927 --local-path "../uploads/test-file-$i.txt" -w "/path/to/wallet.json" --metadata-file "../custom/metadata-$i.json" --dry-run > "file-result-$i.json"\ndone\n\n\n\n# other utility operations\n\n\n# monitoring transactions\n\nblock time on arweave is typically between 2-3 minutes in duration, so transactions can be mined within that time frame when network congestion is low. transactions, in the general case, proceed through the following set of states:\n\n * pending: the transaction is waiting the "mempool" to be mined\n * confirming: the transaction was mined on an arweave node, but has not yet been confirmed by at least 15 total nodes on the network\n * confirmed: the transaction was mined on an arweave node and confirmed by at least 15 total nodes on the network\n * not found: the transaction is not available for any of the following reasons:\n   * insufficient reward to join the mempool\n   * insufficient reward to be mined within 50 blocks during a period of network congestion\n   * transaction is transitioning between states\n   * transaction id is invalid\n\nmonitor any arweave transaction\'s status via its transaction id by performing:\n\n# peek at the status:\nardrive tx-status -t "eksmckikdrj8rgikfa-x3xq3427tvm7j9adv8hp3bzs"\n\n\nexample output:\n\neksmckikdrj8rgikfa-x3xq3427tvm7j9adv8hp3bzs: mined at block height 775810 with 22439 confirmations\n\n\n# reprint the status every 10 seconds:\nwatch -n 10 ardrive tx-status -t "eksmckikdrj8rgikfa-x3xq3427tvm7j9adv8hp3bzs"\n\n\n\n# dealing with network congestion\n\ncurrently, arweave blocks hold up to 1000 transactions per block. the "mempool", where pending transactions reside until they\'ve been included into a block, will only hold a transaction for 50 blocks (~100-150 minutes) before it\'s discarded by the network resulting in no fees or data being transacted. during periods of network congestion (i.e. those where the mempool contains 1000 or more pending transactions), it may make sense to either:\n\na) wait for congestion to dissipate before attempting your transactions.\n\nb) apply the fee boost multiplier to your transactions rewards with the --boost parameter during write operations in order to front-run some of the congestion.\n\n# check for network congestion before uploading\n\n# see all the transactions in the mempool\nardrive get-mempool\n\n# return the count of the transactions in the mempool\nardrive get-mempool | jq \'length\'\n\n\n# front-run congestion by boosting miner rewards\n\n# increase the miner reward on your transactions by 50%\nardrive upload-file --wallet-file /path/to/my/wallet.json --parent-folder-id "f0c58c11-430c-4383-8e54-4d864cc7e927" --local-path ./helloworld.txt --boost 1.5\n\n\n# send ar transactions from a cold wallet\n\nthe best cold wallet storage never exposes your seed phrase and/or private keys to the internet or a compromised system interface. you can use the ardrive cli to facilitate cold storage and transfer of ar.\n\nif you need a new cold ar wallet, generate one from an air-gapped machine capable of running the ardrive cli by following the instructions in the wallet operations section. fund your cold wallet from whatever external sources you\'d like. note: your cold wallet won\'t appear on chain until it has received ar.\n\nthe workflow to send the ar out from your cold wallet requires you to generate a signed transaction with your cold wallet on your air-gapped machine via the ardrive cli, and then to transfer the signed transaction (e.g. by a file on a clean thumb drive) to an internet-connected machine and send the transaction to the network via the ardrive cli. you\'ll need two inputs from the internet-connected machine:\n\n * the last transaction sent out from the cold wallet (or an empty string if none has ever been sent out)\n * the base fee for an arweave transaction (i.e. a zero bye transaction). note that this value could change if a sufficient amount of time passes between the time you fetch this value, create the transaction, and send the transaction.\n\nto get the last transaction sent from your cold wallet, use the last-tx command and specify your wallet address e.g.:\n\nardrive last-tx -a <arweave address of cold wallet>\n\n\nto get the base transaction reward required for an ar transaction, use the base-reward function, optionally applying a reward boost multiple if you\'re looking to front-run network congestion:\n\nardrive base-reward --boost 1.5\n\n\nwrite down or securely copy the values you derived from the internet-connected machine and run the following commands on the airgapped machine, piping the outputted signed transaction data to a file in the process, e.g. sendme.json (if that\'s your signed transaction transfer medium preference):\n\nardrive create-tx -w /path/to/wallet/file.json -d <dest arweave address> -a <ar amount to send> --last-tx <from previous steps> --reward "<from previous steps>" > sendme.json\n\n\ntransport your signed transaction to the internet-connected machine and run the following command to send your transaction to the arweave network:\n\nardrive send-tx -x /path/to/sendme.json\n\n\n\n# using a custom arweave gateway\n\non each command that uses a gateway, it is possible to supply your own custom arweave gateway using the flag --gateway or by setting an environment variable named arweave_gateway.\n\nfor example, you could test out that your arfs transactions are working as expected on a local test network such as arlocal with this flow:\n\n# setup arlocal instance on port 1984\nnpx arlocal\n\n# in another terminal, fund your wallet with ar\ncurl http://localhost:1984/mint/{ your public wallet address }/99999999999999\n\n# create drive and root folder on arlocal using `--gateway` flag\nardrive create-drive --gateway http://127.0.0.1:1984 -w /path/to/wallet -n \'my-test-drive\'\n\n# setup arweave_gateway as env variable\nexport arweave_gateway="http://localhost:1984"\n\n# mine block with drive + root folder transactions\ncurl "$arweave_gateway/mine"\n\n# upload file to arlocal with env var\nardrive upload-file -f { root folder id from create drive } -l /path/to/file -w /path/to/wallet\n\n# mine block with file transaction\ncurl "$arweave_gateway/mine"\n\n# inspect meta data of created entities\nardrive list-drive -d { drive id from create drive }\n\n# download file to verify integrity\nardrive download-file -f { file id from upload file }\n\n\n\n# persistent caching of arfs entity metadata\n\nto avoid redundant requests to the arweave network for immutable arfs entity metadata, a persistent file cache is created and maintained at:\n\nwindows: <os.homedir()>/ardrive-caches/metadata\nnon-windows: <os.homedir()>/.ardrive/caches/metadata\n\n\nthe xdg_cache_home environment variable is honored, where applicable, and will be used in place of os.homedir() in the scenarios described above.\n\nmetadata cache logging to stderr can be enabled by setting the ardrive_cache_log environment variable to 1.\n\ncache performance is undefined for multi-process scenarios, but is presumed to be generally usable.\n\nthe cache can be manually cleared safely at any time that any integrating app is not in operation.',charsets:{cjk:!0}},{title:"Deploying your dApp",frontmatter:{},regularPath:"/docs/misc/deploy/deploy.html",relativePath:"docs/misc/deploy/deploy.md",key:"v-84e0b14c",path:"/docs/misc/deploy/deploy.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:26},{level:2,title:"Deploying",slug:"deploying",normalizedTitle:"deploying",charIndex:2},{level:3,title:"Step 1: Log into ArDrive",slug:"step-1-log-into-ardrive",normalizedTitle:"step 1: log into ardrive",charIndex:356},{level:3,title:"Step 2: Select or Create a Drive",slug:"step-2-select-or-create-a-drive",normalizedTitle:"step 2: select or create a drive",charIndex:552},{level:3,title:"Step 3: Upload your project",slug:"step-3-upload-your-project",normalizedTitle:"step 3: upload your project",charIndex:921},{level:3,title:"Step 4: Confirm Upload",slug:"step-4-confirm-upload",normalizedTitle:"step 4: confirm upload",charIndex:1233},{level:3,title:"Step 5: Create the Manifest",slug:"step-5-create-the-manifest",normalizedTitle:"step 5: create the manifest",charIndex:1531},{level:3,title:"Step 6: Get the Data TX ID",slug:"step-6-get-the-data-tx-id",normalizedTitle:"step 6: get the data tx id",charIndex:2092},{level:3,title:"Step 7: View and Share your dApp",slug:"step-7-view-and-share-your-dapp",normalizedTitle:"step 7: view and share your dapp",charIndex:2329},{level:2,title:"Updating your dApp",slug:"updating-your-dapp",normalizedTitle:"updating your dapp",charIndex:2696}],headersStr:"Overview Deploying Step 1: Log into ArDrive Step 2: Select or Create a Drive Step 3: Upload your project Step 4: Confirm Upload Step 5: Create the Manifest Step 6: Get the Data TX ID Step 7: View and Share your dApp Updating your dApp",content:'# Deploying your dApp\n\n\n# Overview\n\nThis guide will outline the steps needed to deploy your dApp onto the Arweave blockchain using the ArDrive web app. It assumes you have already prepared your dApp to use hash routing and relative file paths, and built static files for any dApp in a language or framework that requires it (like React).\n\n\n# Deploying\n\n\n# Step 1: Log into ArDrive\n\nGo to the ArDrive web app and log in using the method of your choosing. If you don\'t already have an account, you will need to follow the instructions to set one up.\n\n\n# Step 2: Select or Create a Drive\n\nOnce logged in, navigate to the drive where you want your project to be hosted. If you haven\'t created a drive yet, or if you want a new one specifically for this project, click the big red "New" button at the top left and create a new drive. Remember, the drive needs to be set to public for your dApp to be accessible to others.\n\n\n# Step 3: Upload your project\n\nWith your drive selected, click the big red "New" button again, but this time, select "Upload Folder". Navigate to your project\'s root directory, or the built directory if required, and select it. This will upload the entire directory, maintaining your project\'s file structure.\n\n\n# Step 4: Confirm Upload\n\nYou\'ll be given a chance to review the upload and the associated cost. If everything looks right, click "Confirm". Remember, uploading to Arweave isnt free, but the cost is usually quite small and the benefits of having your dApp hosted on the permaweb are significant.\n\n\n# Step 5: Create the Manifest\n\nWhile ArDrive displays your uploaded files as a traditional file structure, with files and folders inside other folders, thats not how they actually exist on Arweave. The manifest acts as a map to all the files your dApp needs to function. After you confirm your upload, navigate into your newly created folder by double clicking on it. Click the big red "New" button again and select "Create manifest". You\'ll be prompted to name the manifest and choose where to save it. Be sure to save it inside the folder you just created.\n\n\n# Step 6: Get the Data TX ID\n\nOnce the manifest is created, click on it to expand its details. On the bottom right, there\'s a line labeled "Data TX ID". This is the unique identifier for your uploaded dApp on Arweave. Copy this value.\n\n\n# Step 7: View and Share your dApp\n\nYour dApp is now available on the permaweb forever! Append the Data TX ID you just copied to the end of an Arweave gateway URL, like https://arweave.net/ . It might take a few minutes for all of your files to finish propagating through the network, but once they do your dApp will be accessible to anyone, anywhere, at any time.\n\n\n# Updating your dApp\n\nFiles uploaded to Arweave are permanent and immutable. They cannot be changed. However, the Arweave File System (ArFS) protocol used (and created) by ArDrive lets you "replace" them with new versions while still being able to access the old ones. You can do this with entire dApps as well. The old files won\'t be displayed in the ArDrive web app unless you click on a file to view its history.\n\nOnce you have made changes to your dApp, and built the static directory for it, you can upload the entire folder again to the same location where you uploaded the original. Follow all the same steps listed above for uploading your dApp. You will need to create a new manifest to correctly point to the updated files. Give it the same name as the old manifest in order to "replace" it. Creating the new manifest will generate a new TX ID used to view the updated dApp.\n\nThe old version of the dApp will always be available to anyone who has the correct TX ID',normalizedContent:'# deploying your dapp\n\n\n# overview\n\nthis guide will outline the steps needed to deploy your dapp onto the arweave blockchain using the ardrive web app. it assumes you have already prepared your dapp to use hash routing and relative file paths, and built static files for any dapp in a language or framework that requires it (like react).\n\n\n# deploying\n\n\n# step 1: log into ardrive\n\ngo to the ardrive web app and log in using the method of your choosing. if you don\'t already have an account, you will need to follow the instructions to set one up.\n\n\n# step 2: select or create a drive\n\nonce logged in, navigate to the drive where you want your project to be hosted. if you haven\'t created a drive yet, or if you want a new one specifically for this project, click the big red "new" button at the top left and create a new drive. remember, the drive needs to be set to public for your dapp to be accessible to others.\n\n\n# step 3: upload your project\n\nwith your drive selected, click the big red "new" button again, but this time, select "upload folder". navigate to your project\'s root directory, or the built directory if required, and select it. this will upload the entire directory, maintaining your project\'s file structure.\n\n\n# step 4: confirm upload\n\nyou\'ll be given a chance to review the upload and the associated cost. if everything looks right, click "confirm". remember, uploading to arweave isnt free, but the cost is usually quite small and the benefits of having your dapp hosted on the permaweb are significant.\n\n\n# step 5: create the manifest\n\nwhile ardrive displays your uploaded files as a traditional file structure, with files and folders inside other folders, thats not how they actually exist on arweave. the manifest acts as a map to all the files your dapp needs to function. after you confirm your upload, navigate into your newly created folder by double clicking on it. click the big red "new" button again and select "create manifest". you\'ll be prompted to name the manifest and choose where to save it. be sure to save it inside the folder you just created.\n\n\n# step 6: get the data tx id\n\nonce the manifest is created, click on it to expand its details. on the bottom right, there\'s a line labeled "data tx id". this is the unique identifier for your uploaded dapp on arweave. copy this value.\n\n\n# step 7: view and share your dapp\n\nyour dapp is now available on the permaweb forever! append the data tx id you just copied to the end of an arweave gateway url, like https://arweave.net/ . it might take a few minutes for all of your files to finish propagating through the network, but once they do your dapp will be accessible to anyone, anywhere, at any time.\n\n\n# updating your dapp\n\nfiles uploaded to arweave are permanent and immutable. they cannot be changed. however, the arweave file system (arfs) protocol used (and created) by ardrive lets you "replace" them with new versions while still being able to access the old ones. you can do this with entire dapps as well. the old files won\'t be displayed in the ardrive web app unless you click on a file to view its history.\n\nonce you have made changes to your dapp, and built the static directory for it, you can upload the entire folder again to the same location where you uploaded the original. follow all the same steps listed above for uploading your dapp. you will need to create a new manifest to correctly point to the updated files. give it the same name as the old manifest in order to "replace" it. creating the new manifest will generate a new tx id used to view the updated dapp.\n\nthe old version of the dapp will always be available to anyone who has the correct tx id',charsets:{}},{title:"File Paths",frontmatter:{},regularPath:"/docs/misc/deploy/paths.html",relativePath:"docs/misc/deploy/paths.md",key:"v-0d650648",path:"/docs/misc/deploy/paths.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:17},{level:2,title:"Absolute Vs. Relative",slug:"absolute-vs-relative",normalizedTitle:"absolute vs. relative",charIndex:306},{level:2,title:"Why Relative Paths",slug:"why-relative-paths",normalizedTitle:"why relative paths",charIndex:805},{level:2,title:"Identifying Relative and Absolute Paths",slug:"identifying-relative-and-absolute-paths",normalizedTitle:"identifying relative and absolute paths",charIndex:1286},{level:2,title:"Navigating with Relative Paths",slug:"navigating-with-relative-paths",normalizedTitle:"navigating with relative paths",charIndex:1773}],headersStr:"Overview Absolute Vs. Relative Why Relative Paths Identifying Relative and Absolute Paths Navigating with Relative Paths",content:"# File Paths\n\n\n# Overview\n\nFile paths are needed to locate resources in your file system or on a server. There are two types of file paths: absolute and relative. Because there is no way to know exactly from where a user will access a dApp deployed on Arweave, all file paths used need to be relative.\n\n\n# Absolute Vs. Relative\n\nAn absolute path is the full URL to a resource, starting from the root. For example, http://www.example.com/images/myImage.jpg is an absolute path. It points directly to the image no matter where the code referencing it is located.\n\nA relative path is a path relative to the current location. If you have an HTML file in the root directory (folder) and an image in a subdirectory called 'images', you could use the relative path images/myImage.jpg to reference the image.\n\n\n# Why Relative Paths\n\nWhen deploying dApps on Arweave, relative paths are essential because:\n\n * Domain agnostic: Arweave permaweb dApps can be accessed from various gateways, not just one domain. Absolute paths tied to a specific domain will not work.\n * Decentralized: Arweave is a decentralized network. There is no root directory or server configuration to reference. All file paths must be relative to the file trying to find an asset, or your dApp wont be able to find it.\n\n\n# Identifying Relative and Absolute Paths\n\nThe key difference between relative and absolute file paths is where they start from:\n\n * Absolute Paths start with a slash (/) or a full URL (including the protocol, such as http://). For example, /images/myImage.jpg or http://www.example.com/images/myImage.jpg are absolute paths.\n * Relative Paths do not start with a slash. They are relative to the current directory. For example, images/myImage.jpg or ../myImage.jpg are relative paths.\n\n\n# Navigating with Relative Paths\n\nYou can navigate around the files of your project with relative paths by following these principles:\n\n * Same Directory: If the file you're trying to reference is in the same directory as the current file, you can just use the filename. For example, if index.html and about.html are in the same directory, you can link to about.html just using about.html.\n\n * Subdirectory: If the file is in a subdirectory, you can use the directory name followed by the filename. For example, images/myImage.jpg will point to the myImage.jpg file in the images subdirectory.\n\n * Parent Directory: If the file is in a parent directory, you can use ../ to go up one level. For example, ../index.html will point to index.html in the parent directory. You can use multiple ../ to go up multiple levels, like ../../index.html.",normalizedContent:"# file paths\n\n\n# overview\n\nfile paths are needed to locate resources in your file system or on a server. there are two types of file paths: absolute and relative. because there is no way to know exactly from where a user will access a dapp deployed on arweave, all file paths used need to be relative.\n\n\n# absolute vs. relative\n\nan absolute path is the full url to a resource, starting from the root. for example, http://www.example.com/images/myimage.jpg is an absolute path. it points directly to the image no matter where the code referencing it is located.\n\na relative path is a path relative to the current location. if you have an html file in the root directory (folder) and an image in a subdirectory called 'images', you could use the relative path images/myimage.jpg to reference the image.\n\n\n# why relative paths\n\nwhen deploying dapps on arweave, relative paths are essential because:\n\n * domain agnostic: arweave permaweb dapps can be accessed from various gateways, not just one domain. absolute paths tied to a specific domain will not work.\n * decentralized: arweave is a decentralized network. there is no root directory or server configuration to reference. all file paths must be relative to the file trying to find an asset, or your dapp wont be able to find it.\n\n\n# identifying relative and absolute paths\n\nthe key difference between relative and absolute file paths is where they start from:\n\n * absolute paths start with a slash (/) or a full url (including the protocol, such as http://). for example, /images/myimage.jpg or http://www.example.com/images/myimage.jpg are absolute paths.\n * relative paths do not start with a slash. they are relative to the current directory. for example, images/myimage.jpg or ../myimage.jpg are relative paths.\n\n\n# navigating with relative paths\n\nyou can navigate around the files of your project with relative paths by following these principles:\n\n * same directory: if the file you're trying to reference is in the same directory as the current file, you can just use the filename. for example, if index.html and about.html are in the same directory, you can link to about.html just using about.html.\n\n * subdirectory: if the file is in a subdirectory, you can use the directory name followed by the filename. for example, images/myimage.jpg will point to the myimage.jpg file in the images subdirectory.\n\n * parent directory: if the file is in a parent directory, you can use ../ to go up one level. for example, ../index.html will point to index.html in the parent directory. you can use multiple ../ to go up multiple levels, like ../../index.html.",charsets:{}},{title:"Preparing Your dApp",frontmatter:{prev:!1,permalink:"/docs/misc/deploy/"},regularPath:"/docs/misc/deploy/prepare.html",relativePath:"docs/misc/deploy/prepare.md",key:"v-3e6ef1ac",path:"/docs/misc/deploy/",headersStr:null,content:"# Preparing Your dApp\n\nTo make sure dApps work correctly on the Arweave blockchain, they need to be set up in a specific manner. This is because, unlike traditional web hosting, there are no centralized servers for browsers to request files from. Your dApp needs to be able to handle navigation inside the client's browser instead of relying on communication between the client and a server, and not rely on a server as a point of origin for file paths. This is done by ensuring the following:\n\n * Your dApp must use hash routing\n * All internal links in your dApp must use relative file paths.\n\nFailure to properly implement either will result in your dApp not working the way it should once it is deployed onto Arweave.",normalizedContent:"# preparing your dapp\n\nto make sure dapps work correctly on the arweave blockchain, they need to be set up in a specific manner. this is because, unlike traditional web hosting, there are no centralized servers for browsers to request files from. your dapp needs to be able to handle navigation inside the client's browser instead of relying on communication between the client and a server, and not rely on a server as a point of origin for file paths. this is done by ensuring the following:\n\n * your dapp must use hash routing\n * all internal links in your dapp must use relative file paths.\n\nfailure to properly implement either will result in your dapp not working the way it should once it is deployed onto arweave.",charsets:{}},{title:"Hash Routing",frontmatter:{},regularPath:"/docs/misc/deploy/routing.html",relativePath:"docs/misc/deploy/routing.md",key:"v-6dd912ec",path:"/docs/misc/deploy/routing.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:19},{level:2,title:"Hash Routing Vs. History Routing",slug:"hash-routing-vs-history-routing",normalizedTitle:"hash routing vs. history routing",charIndex:463},{level:2,title:"Why Hash Routing for dApps",slug:"why-hash-routing-for-dapps",normalizedTitle:"why hash routing for dapps",charIndex:986}],headersStr:"Overview Hash Routing Vs. History Routing Why Hash Routing for dApps",content:'# Hash Routing\n\n\n# Overview\n\nHash routing is a popular technique in single page applications (SPAs) where the site navigation is handled using JavaScript. The "hash" in hash routing refers to the hash symbol (#) inserted into the URL. The part of the URL after the hash symbol is used to determine which "page" to show.\n\nFor example, if your URL is "http://www.example.com/#about", the part after the hash (about) would be used to show an app\'s "about" page.\n\n\n# Hash Routing Vs. History Routing\n\nTraditional web apps use history routing, where each unique URL represents a different source or asset contained in a server. The URL "http://www.example.com/about" would fetch the "about" page from the app\'s server and display it for a user. History routing requires a server be available to provide the correct files every time a user navigates around an app.\n\nIn contrast, with hash routing, all navigation is handled by the client\'s browser, so no server is needed for navigation.\n\n\n# Why Hash Routing for dApps\n\nHash routing is particularly useful for apps deployed on Arweave for several reasons:\n\n * Serverless: Arweave is a decentralized storage network. There\'s no server to process requests, so routing cannot be handled by a server.\n * Persistence: Once data is stored on Arweave, it can\'t be changed. Hash routing allows you to have "dynamic" content within this immutable structure.\n * Performance: With hash routing, all the necessary code is loaded once, reducing the number of network requests and improving performance.',normalizedContent:'# hash routing\n\n\n# overview\n\nhash routing is a popular technique in single page applications (spas) where the site navigation is handled using javascript. the "hash" in hash routing refers to the hash symbol (#) inserted into the url. the part of the url after the hash symbol is used to determine which "page" to show.\n\nfor example, if your url is "http://www.example.com/#about", the part after the hash (about) would be used to show an app\'s "about" page.\n\n\n# hash routing vs. history routing\n\ntraditional web apps use history routing, where each unique url represents a different source or asset contained in a server. the url "http://www.example.com/about" would fetch the "about" page from the app\'s server and display it for a user. history routing requires a server be available to provide the correct files every time a user navigates around an app.\n\nin contrast, with hash routing, all navigation is handled by the client\'s browser, so no server is needed for navigation.\n\n\n# why hash routing for dapps\n\nhash routing is particularly useful for apps deployed on arweave for several reasons:\n\n * serverless: arweave is a decentralized storage network. there\'s no server to process requests, so routing cannot be handled by a server.\n * persistence: once data is stored on arweave, it can\'t be changed. hash routing allows you to have "dynamic" content within this immutable structure.\n * performance: with hash routing, all the necessary code is loaded once, reducing the number of network requests and improving performance.',charsets:{}},{title:"Examples",frontmatter:{next:!1},regularPath:"/docs/misc/deploy/examples.html",relativePath:"docs/misc/deploy/examples.md",key:"v-074d53cc",path:"/docs/misc/deploy/examples.html",headers:[{level:2,title:"Basic HTML",slug:"basic-html",normalizedTitle:"basic html",charIndex:514},{level:2,title:"React",slug:"react",normalizedTitle:"react",charIndex:649},{level:2,title:"Next",slug:"next",normalizedTitle:"next",charIndex:750},{level:2,title:"WordPress",slug:"wordpress",normalizedTitle:"wordpress",charIndex:850}],headersStr:"Basic HTML React Next WordPress",content:"# Examples\n\nBelow are some basic websites built with different languages or frameworks that provide more detailed information on how to configure your dApp for that framework. Each one has been deployed to Arweave itself to show that it functions correctly, and can be accessed through any Arweave gateway by using its TX ID. These are all very basic examples, but if you follow the principles explained, your dApp will function correctly when deployed to the permaweb no matter how big or complex it becomes.\n\n\n# Basic HTML\n\nA basic HTML website with a javascript script to facilitate hash routing:\n\nGPOX8dgUpFpt8IVUyyfBMiPpfWZ9eXHZjNi42W4-_50\n\n\n# React\n\nA React dApp created using Create-React-App:\n\nBTjZhINTpCtWiE0PcfpAQ8a3QhL-1AwXfNJ9lhbaJj0\n\n\n# Next\n\nA Nextjs dApp created using Create-Next-App:\n\n01hMcPNA_TEXh1S7p4f6jop7r4lrElF1mIlAwkzhJ_s\n\n\n# WordPress\n\nilP8KEFm0jGAhjEP6e7ZlS7s6BV1NgGJnlw7OfiD5kU",normalizedContent:"# examples\n\nbelow are some basic websites built with different languages or frameworks that provide more detailed information on how to configure your dapp for that framework. each one has been deployed to arweave itself to show that it functions correctly, and can be accessed through any arweave gateway by using its tx id. these are all very basic examples, but if you follow the principles explained, your dapp will function correctly when deployed to the permaweb no matter how big or complex it becomes.\n\n\n# basic html\n\na basic html website with a javascript script to facilitate hash routing:\n\ngpox8dgupfpt8ivuyyfbmippfwz9exhzjni42w4-_50\n\n\n# react\n\na react dapp created using create-react-app:\n\nbtjzhintpctwie0pcfpaq8a3qhl-1awxfnj9lhbajj0\n\n\n# next\n\na nextjs dapp created using create-next-app:\n\n01hmcpna_texh1s7p4f6jop7r4lrelf1milawkzhj_s\n\n\n# wordpress\n\nilp8kefm0jgahjep6e7zls7s6bv1nggjnlw7ofid5ku",charsets:{}},{title:"EthAReum",frontmatter:{permalink:"docs/misc/ethareum/",prev:!1,next:!1},regularPath:"/docs/misc/eth.html",relativePath:"docs/misc/eth.md",key:"v-52bf2fcc",path:"/docs/misc/ethareum/",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:15},{level:2,title:"Password",slug:"password",normalizedTitle:"password",charIndex:764},{level:2,title:"Public Address",slug:"public-address",normalizedTitle:"public address",charIndex:1657},{level:2,title:"Keyfile and Seed Phrase",slug:"keyfile-and-seed-phrase",normalizedTitle:"keyfile and seed phrase",charIndex:2219},{level:2,title:"Security",slug:"security",normalizedTitle:"security",charIndex:3350}],headersStr:"Overview Password Public Address Keyfile and Seed Phrase Security",content:"# EthAReum\n\n\n# Overview\n\nEthAReum is a new key derivation protocol that enables the generation of private keys for an Arweave wallet using a signature from an Ethereum wallet. This allows users to create an Arweave wallet directly through an Ethereum wallet provider like MetaMask.\n\nThese generated private keys provide a fully functional Arweave wallet, equipped to perform all standard operations, including holding AR tokens and Turbo Credits, and uploading data to the Arweave network.\n\nRecommended Browser\n\nFor optimal performance, it is recommended MetaMask users access ArDrive using the Chrome browser. While EthAReum functions correctly in most browsers, there are ongoing efforts to resolve some edge case compatibility issues in other environments.\n\n\n# Password\n\nThe EthAReum protocol incorporates a user-generated password in the process of deriving an Arweave wallet from an Ethereum wallet. This password provides an extra layer of security by contributing additional entropy to the wallet's derivation. It also serves as a critical verification step for wallet access.\n\nFor instance, when creating a new account with ArDrive, users are required to set a password for their wallet. This password is then used for subsequent logins and for encrypting private uploads. The password established during the wallet derivation process on ArDrive will be the same password used for future logins.\n\nNOTE: The password used during the derivation of private keys is permanent and CAN NOT be changed or recovered by an administrator (ArDrive is a decentralized platform and has no account administration). It is crucial to keep this password secure.\n\n\n# Public Address\n\nThe Public address of the generated Arweave wallet is derived from its public key. The public address of the generated wallet will be different from the public address of the Ethereum wallet used to generate it.\n\nThe exact steps needed to obtain the public address of the generated wallet will differ depending on the user interface of the dApp you use for interacting with the protocol. With ArDrive, the information can be viewed at any time you are logged in to the app by clicking on the user profile icon at the top right of the screen.\n\n\n# Keyfile and Seed Phrase\n\nThe primary method used in the Arweave ecosystem for accessing or importing a wallet is through the use of a keyfile, rather than a seed phrase like is commonplace in Ethereum wallet providers. Seed phrases are supported though, so you will be able to obtain a seed phrase for your generated Arweave wallet and use it to import the wallet into other dApps or wallet providers in the Arweave ecosystem. Just be aware that not every dApp in the ecosystem has an interface that can facilitate this.\n\nA keyfile is a json file that contains a Json Web Key (JWK) which act as the private keys for a wallet. Always be sure to treat your keyfile with the same care as you would the private keys for an Ethereum wallet. Find out more about keyfiles from the Arweave Cookbook.\n\nSimilar to the public address of your generated wallet, the method used to access your new keyfile or seed phrase will differ based on the dApp you used to generate your wallet. With ArDrive, both are available for download at any time you are logged in to the app by clicking on the user profile icon at the top right of the screen.\n\n\n# Security\n\nEthAReum generates the private keys of an Arweave wallet using a signature from your Ethereum wallet, ensuring that control only extends in one direction. The EthAReum protocol does not access or control the Ethereum wallet used for generation, thereby safeguarding your Ethereum assets.\n\nHowever, it's important to be vigilant as some malicious dApps or websites may disguise a high-risk authorization transaction as a simple signature request. Always ensure that you only provide signatures to reputable and trusted dApps like ArDrive.",normalizedContent:"# ethareum\n\n\n# overview\n\nethareum is a new key derivation protocol that enables the generation of private keys for an arweave wallet using a signature from an ethereum wallet. this allows users to create an arweave wallet directly through an ethereum wallet provider like metamask.\n\nthese generated private keys provide a fully functional arweave wallet, equipped to perform all standard operations, including holding ar tokens and turbo credits, and uploading data to the arweave network.\n\nrecommended browser\n\nfor optimal performance, it is recommended metamask users access ardrive using the chrome browser. while ethareum functions correctly in most browsers, there are ongoing efforts to resolve some edge case compatibility issues in other environments.\n\n\n# password\n\nthe ethareum protocol incorporates a user-generated password in the process of deriving an arweave wallet from an ethereum wallet. this password provides an extra layer of security by contributing additional entropy to the wallet's derivation. it also serves as a critical verification step for wallet access.\n\nfor instance, when creating a new account with ardrive, users are required to set a password for their wallet. this password is then used for subsequent logins and for encrypting private uploads. the password established during the wallet derivation process on ardrive will be the same password used for future logins.\n\nnote: the password used during the derivation of private keys is permanent and can not be changed or recovered by an administrator (ardrive is a decentralized platform and has no account administration). it is crucial to keep this password secure.\n\n\n# public address\n\nthe public address of the generated arweave wallet is derived from its public key. the public address of the generated wallet will be different from the public address of the ethereum wallet used to generate it.\n\nthe exact steps needed to obtain the public address of the generated wallet will differ depending on the user interface of the dapp you use for interacting with the protocol. with ardrive, the information can be viewed at any time you are logged in to the app by clicking on the user profile icon at the top right of the screen.\n\n\n# keyfile and seed phrase\n\nthe primary method used in the arweave ecosystem for accessing or importing a wallet is through the use of a keyfile, rather than a seed phrase like is commonplace in ethereum wallet providers. seed phrases are supported though, so you will be able to obtain a seed phrase for your generated arweave wallet and use it to import the wallet into other dapps or wallet providers in the arweave ecosystem. just be aware that not every dapp in the ecosystem has an interface that can facilitate this.\n\na keyfile is a json file that contains a json web key (jwk) which act as the private keys for a wallet. always be sure to treat your keyfile with the same care as you would the private keys for an ethereum wallet. find out more about keyfiles from the arweave cookbook.\n\nsimilar to the public address of your generated wallet, the method used to access your new keyfile or seed phrase will differ based on the dapp you used to generate your wallet. with ardrive, both are available for download at any time you are logged in to the app by clicking on the user profile icon at the top right of the screen.\n\n\n# security\n\nethareum generates the private keys of an arweave wallet using a signature from your ethereum wallet, ensuring that control only extends in one direction. the ethareum protocol does not access or control the ethereum wallet used for generation, thereby safeguarding your ethereum assets.\n\nhowever, it's important to be vigilant as some malicious dapps or websites may disguise a high-risk authorization transaction as a simple signature request. always ensure that you only provide signatures to reputable and trusted dapps like ardrive.",charsets:{}},{title:"How to Save a Website Permanently",frontmatter:{},regularPath:"/docs/misc/permasite.html",relativePath:"docs/misc/permasite.md",key:"v-3258450c",path:"/docs/misc/permasite.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:40},{level:2,title:"1. Download Static Site Files",slug:"_1-download-static-site-files",normalizedTitle:"1. download static site files",charIndex:946},{level:3,title:"Windows Users",slug:"windows-users",normalizedTitle:"windows users",charIndex:1396},{level:3,title:"Mac Users",slug:"mac-users",normalizedTitle:"mac users",charIndex:1502},{level:3,title:"Command Line Utility",slug:"command-line-utility",normalizedTitle:"command line utility",charIndex:1770},{level:3,title:"WordPress",slug:"wordpress",normalizedTitle:"wordpress",charIndex:176},{level:2,title:"2. Create an Account on ArDrive",slug:"_2-create-an-account-on-ardrive",normalizedTitle:"2. create an account on ardrive",charIndex:2327},{level:2,title:"3. Create a New Public Drive",slug:"_3-create-a-new-public-drive",normalizedTitle:"3. create a new public drive",charIndex:2670},{level:2,title:"4. Top Up",slug:"_4-top-up",normalizedTitle:"4. top up",charIndex:2916},{level:2,title:"5. Upload Static Files",slug:"_5-upload-static-files",normalizedTitle:"5. upload static files",charIndex:3225},{level:2,title:"6. Wait",slug:"_6-wait",normalizedTitle:"6. wait",charIndex:3602},{level:2,title:"7. Create a Manifest",slug:"_7-create-a-manifest",normalizedTitle:"7. create a manifest",charIndex:4223},{level:2,title:"8. Wait Again",slug:"_8-wait-again",normalizedTitle:"8. wait again",charIndex:4810},{level:2,title:"9. Preview the Manifest",slug:"_9-preview-the-manifest",normalizedTitle:"9. preview the manifest",charIndex:5108},{level:2,title:"10. Add a Redirect or Domain Masking",slug:"_10-add-a-redirect-or-domain-masking",normalizedTitle:"10. add a redirect or domain masking",charIndex:5668},{level:2,title:"Notes",slug:"notes",normalizedTitle:"notes",charIndex:5650},{level:2,title:"Other Use Cases",slug:"other-use-cases",normalizedTitle:"other use cases",charIndex:6812},{level:2,title:"Example",slug:"example",normalizedTitle:"example",charIndex:7299}],headersStr:"Overview 1. Download Static Site Files Windows Users Mac Users Command Line Utility WordPress 2. Create an Account on ArDrive 3. Create a New Public Drive 4. Top Up 5. Upload Static Files 6. Wait 7. Create a Manifest 8. Wait Again 9. Preview the Manifest 10. Add a Redirect or Domain Masking Notes Other Use Cases Example",content:"# How to Save a Website Permanently\n\n\n# Overview\n\nArDrive offers the ability to save working copies of static websites permanently on Arweave. This means that websites made on WordPress, Wix, SquareSpace and other CMS platforms can now be archived for hundreds of years without the need to pay for ongoing data storage.\n\nResources like the Wayback Machine are useful to research the past life of old websites. But the Wayback Machine’s archives are not comprehensive and often only capture partial copies of historic sites. By leveraging the utility of Arweave manifests, ArDrive offers the ability to save full working copies of websites in an unchanging, permanent state without needing to code.\n\nThe process to make a ‘permasite’ takes 10 steps which are outlined below. Advanced users can accomplish similar results by using manifests within the ArDrive CLI.\n\nYou can view a permasite version of this information at permasite.arweave.dev\n\n\n# 1. Download Static Site Files\n\nArDrive allows you to preserve full working copies of the static content of existing websites but there are a few limitations to be aware of:\n\n * Permanent sites will not enable backend interaction with your website’s CMS,\n * nor allow you to make further changes to the content of your site,\n * nor support dynamic functionality like contact forms and eCommerce.\n\nTo generate your static site files, we recommend:\n\n\n# Windows Users\n\nWebCopy and HtTrack enable Windows users to download static copies of entire websites.\n\n\n# Mac Users\n\nOffline Pages Pro (Mac users only), which creates files that work well with this process. After saving your site with Offline Pages Pro, go to File > Export > Local Website to download the local static files.\nSiteSucker is another option for Mac users.\n\n\n# Command Line Utility\n\nWget is a free tool that helps capture static versions of websites. While Wget isn't a traditional static site generator, it's great for downloading whole websites for offline use. It offers a simple way to save your site's current look and feel as static files at no cost.\n\n\n# WordPress\n\nSimply Static is a plugin that generates static files for WordPress websites. Some users note that Simply Static fails to properly associate CSS and JS files with your static site, but others have had success with this free WordPress plugin.\n\n\n# 2. Create an Account on ArDrive\n\nAccount creation is free as are uploads of small files (currently up to 500 KB). Remember that ArDrive empowers you to be in control of your data; no one else has your password but you. Therefore, it is very important that you safely record your password and seed phrase as they cannot be recovered later.\n\n\n# 3. Create a New Public Drive\n\nClick on the red +New button and create a Drive. Name your Drive and set it as “Public”. ArDrive also offers “Private” file storage; however, permanent websites must be public in order to maintain functionality.\n\n\n# 4. Top Up\n\nTo pay for permanent storage on the Arweave network you must either purchase ArDrive Turbo credits with a credit card or (or the advanced option) ensure your wallet has $AR, the native token of the Arweave ecosystem. Most websites will cost less than $1 to save permanently. See current prices\n\n\n# 5. Upload Static Files\n\nUpload the static files to your new Public Drive. Offline Pages Pro will generate an index.html file that is separate from a large folder of assets (images, css, fonts, etc). Simply Static will add the index.html file to the rest of your assets. Either way, upload all the files you receive from your static site generator to your new Public Drive.\n\n\n# 6. Wait\n\nPermanence takes patience. Once static files have been uploaded, they need to be sent to the Arweave network before being assembled together. This process can take as little as 5 seconds (when using Turbo credits) or up to 30 minutes or more (when using $AR). Make sure to keep your browser tab open and do not refresh your browser while you wait.\n\nTo check on the status of your files, you can click the refresh icon in the top right of ArDrive. You’ll know your file is ready when the light on the icon turns from yellow to green. (Pro Tip: some files uploaded with Turbo are ready before they are green.)\n\n\n# 7. Create a Manifest\n\nManifests are special .json files that instruct Arweave Gateways to map file data associated with specific, unique transaction IDs to customized, hosted paths relative to that of the manifest file itself. In other words, they are the secret sauce that brings a permasite together.\n\nClick on the red +New button and select Advanced > New Manifest. Select the location for your manifest, ensuring it is in the same place as your index.html file.\n\nGive your Manifest a name like “permasite”, it will be the main way you access your permanent website from ArDrive.\n\n\n# 8. Wait Again\n\nNow the manifest needs to be sent to the Arweave network. Again, this process can take just a few seconds or up to 30 minutes or more.\n\nAfter a bit, you can refresh your Drive by clicking on the icon in the upper right – and see if your manifest icon turns from yellow to green.\n\n\n# 9. Preview the Manifest\n\nGot a green light? You’re ready to go. Click on your manifest file and you will see a panel of options appear on the right side of your screen. Click on the Preview icon in the top right and it will open a new tab with your permasite.\n\nIf a website appears with a long, random-looking URL in the browser bar, then congrats, you made a permasite!\n\nTry clicking around and make sure all your pages are preserved. If they are not it could be a limitation of your static site generator or an issue with the manifest (see Notes below).\n\n\n# 10. Add a Redirect or Domain Masking\n\nYou’ll notice that your permasite has a long, random-looking URL generated by Arweave. These long URLs are designed to remain for decades, but they also are not very memorable.\n\nTry redirecting another domain to your permasite, or mask your permasite domain with a domain of your choosing. You can also acquire an ArNS name that enables you to create a custom, permanent name for your permasite.\n\n\n# Notes\n\n * There’s no delete button with Arweave. Once your permasite is up, it’s up forever. Make sure your content is something you want future humanity to have.\n\n * Only static sites can become permasites through the ArDrive web app. Advanced functionality is available for developers who use the ArDrive CLI.\n\n * Links to content on external websites will not be permanent (unless they are also permasites) and if that external content becomes inaccessible or moves, you will not be able to update the links within your permasite.\n\n * Non-English characters in the URLs of your permasite can be problematic for ArDrive manifests, but non-English characters should work well on the permasite itself.\n\n\n# Other Use Cases\n\nPermasites can be used to archive web content before it disappears from the internet. Or they can be used to create working copies of websites before it a particular site is replaced by new versions.\n\nManifests can also be used to make reliable perma-backups. Many web hosts offer good daily backups and some offer reliable offsite backups as well. Permasites enable you to have decentralized, highly-redundant backups of your website’s content for a very low cost.\n\n\n# Example\n\nYou can view a permasite version of this information at permasite.arweave.dev",normalizedContent:"# how to save a website permanently\n\n\n# overview\n\nardrive offers the ability to save working copies of static websites permanently on arweave. this means that websites made on wordpress, wix, squarespace and other cms platforms can now be archived for hundreds of years without the need to pay for ongoing data storage.\n\nresources like the wayback machine are useful to research the past life of old websites. but the wayback machine’s archives are not comprehensive and often only capture partial copies of historic sites. by leveraging the utility of arweave manifests, ardrive offers the ability to save full working copies of websites in an unchanging, permanent state without needing to code.\n\nthe process to make a ‘permasite’ takes 10 steps which are outlined below. advanced users can accomplish similar results by using manifests within the ardrive cli.\n\nyou can view a permasite version of this information at permasite.arweave.dev\n\n\n# 1. download static site files\n\nardrive allows you to preserve full working copies of the static content of existing websites but there are a few limitations to be aware of:\n\n * permanent sites will not enable backend interaction with your website’s cms,\n * nor allow you to make further changes to the content of your site,\n * nor support dynamic functionality like contact forms and ecommerce.\n\nto generate your static site files, we recommend:\n\n\n# windows users\n\nwebcopy and httrack enable windows users to download static copies of entire websites.\n\n\n# mac users\n\noffline pages pro (mac users only), which creates files that work well with this process. after saving your site with offline pages pro, go to file > export > local website to download the local static files.\nsitesucker is another option for mac users.\n\n\n# command line utility\n\nwget is a free tool that helps capture static versions of websites. while wget isn't a traditional static site generator, it's great for downloading whole websites for offline use. it offers a simple way to save your site's current look and feel as static files at no cost.\n\n\n# wordpress\n\nsimply static is a plugin that generates static files for wordpress websites. some users note that simply static fails to properly associate css and js files with your static site, but others have had success with this free wordpress plugin.\n\n\n# 2. create an account on ardrive\n\naccount creation is free as are uploads of small files (currently up to 500 kb). remember that ardrive empowers you to be in control of your data; no one else has your password but you. therefore, it is very important that you safely record your password and seed phrase as they cannot be recovered later.\n\n\n# 3. create a new public drive\n\nclick on the red +new button and create a drive. name your drive and set it as “public”. ardrive also offers “private” file storage; however, permanent websites must be public in order to maintain functionality.\n\n\n# 4. top up\n\nto pay for permanent storage on the arweave network you must either purchase ardrive turbo credits with a credit card or (or the advanced option) ensure your wallet has $ar, the native token of the arweave ecosystem. most websites will cost less than $1 to save permanently. see current prices\n\n\n# 5. upload static files\n\nupload the static files to your new public drive. offline pages pro will generate an index.html file that is separate from a large folder of assets (images, css, fonts, etc). simply static will add the index.html file to the rest of your assets. either way, upload all the files you receive from your static site generator to your new public drive.\n\n\n# 6. wait\n\npermanence takes patience. once static files have been uploaded, they need to be sent to the arweave network before being assembled together. this process can take as little as 5 seconds (when using turbo credits) or up to 30 minutes or more (when using $ar). make sure to keep your browser tab open and do not refresh your browser while you wait.\n\nto check on the status of your files, you can click the refresh icon in the top right of ardrive. you’ll know your file is ready when the light on the icon turns from yellow to green. (pro tip: some files uploaded with turbo are ready before they are green.)\n\n\n# 7. create a manifest\n\nmanifests are special .json files that instruct arweave gateways to map file data associated with specific, unique transaction ids to customized, hosted paths relative to that of the manifest file itself. in other words, they are the secret sauce that brings a permasite together.\n\nclick on the red +new button and select advanced > new manifest. select the location for your manifest, ensuring it is in the same place as your index.html file.\n\ngive your manifest a name like “permasite”, it will be the main way you access your permanent website from ardrive.\n\n\n# 8. wait again\n\nnow the manifest needs to be sent to the arweave network. again, this process can take just a few seconds or up to 30 minutes or more.\n\nafter a bit, you can refresh your drive by clicking on the icon in the upper right – and see if your manifest icon turns from yellow to green.\n\n\n# 9. preview the manifest\n\ngot a green light? you’re ready to go. click on your manifest file and you will see a panel of options appear on the right side of your screen. click on the preview icon in the top right and it will open a new tab with your permasite.\n\nif a website appears with a long, random-looking url in the browser bar, then congrats, you made a permasite!\n\ntry clicking around and make sure all your pages are preserved. if they are not it could be a limitation of your static site generator or an issue with the manifest (see notes below).\n\n\n# 10. add a redirect or domain masking\n\nyou’ll notice that your permasite has a long, random-looking url generated by arweave. these long urls are designed to remain for decades, but they also are not very memorable.\n\ntry redirecting another domain to your permasite, or mask your permasite domain with a domain of your choosing. you can also acquire an arns name that enables you to create a custom, permanent name for your permasite.\n\n\n# notes\n\n * there’s no delete button with arweave. once your permasite is up, it’s up forever. make sure your content is something you want future humanity to have.\n\n * only static sites can become permasites through the ardrive web app. advanced functionality is available for developers who use the ardrive cli.\n\n * links to content on external websites will not be permanent (unless they are also permasites) and if that external content becomes inaccessible or moves, you will not be able to update the links within your permasite.\n\n * non-english characters in the urls of your permasite can be problematic for ardrive manifests, but non-english characters should work well on the permasite itself.\n\n\n# other use cases\n\npermasites can be used to archive web content before it disappears from the internet. or they can be used to create working copies of websites before it a particular site is replaced by new versions.\n\nmanifests can also be used to make reliable perma-backups. many web hosts offer good daily backups and some offer reliable offsite backups as well. permasites enable you to have decentralized, highly-redundant backups of your website’s content for a very low cost.\n\n\n# example\n\nyou can view a permasite version of this information at permasite.arweave.dev",charsets:{}},{title:"ArDrive Price Calculator",frontmatter:{prev:!1,next:!1},regularPath:"/docs/misc/price-calculator.html",relativePath:"docs/misc/price-calculator.md",key:"v-a6e64848",path:"/docs/misc/price-calculator.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:31},{level:2,title:"Developer Setup",slug:"developer-setup",normalizedTitle:"developer setup",charIndex:358},{level:3,title:"Install Yarn 2",slug:"install-yarn-2",normalizedTitle:"install yarn 2",charIndex:447},{level:3,title:"NVM",slug:"nvm",normalizedTitle:"nvm",charIndex:1243},{level:3,title:"Recommended Visual Studio Code extensions",slug:"recommended-visual-studio-code-extensions",normalizedTitle:"recommended visual studio code extensions",charIndex:1890},{level:2,title:"Available Scripts",slug:"available-scripts",normalizedTitle:"available scripts",charIndex:2080},{level:3,title:"yarn start",slug:"yarn-start",normalizedTitle:"yarn start",charIndex:2102},{level:3,title:"yarn build",slug:"yarn-build",normalizedTitle:"yarn build",charIndex:2301},{level:3,title:"yarn test",slug:"yarn-test",normalizedTitle:"yarn test",charIndex:2407},{level:3,title:"yarn run:prod",slug:"yarn-run-prod",normalizedTitle:"yarn run:prod",charIndex:2543}],headersStr:"Overview Developer Setup Install Yarn 2 NVM Recommended Visual Studio Code extensions Available Scripts yarn start yarn build yarn test yarn run:prod",content:"# ArDrive Price Calculator\n\n\n# Overview\n\nThe ArDrive Price Calculator website is open source, and its code can be viewed here\n\nThis website is intended to calculate the cost, in a wide variety of denominations and cryptocurrencies, of uploading data to Arweave. You can spin up your own version by cloning the code from Github and following these steps.\n\n\n# Developer Setup\n\nFollow these steps to get the developer environment up and running:\n\n\n# Install Yarn 2\n\nThe ArDrive Price Calculator uses Yarn 2, so install the latest version with the yarn installation instructions. In most cases:\n\n# Brew:\nbrew install yarn\n\n# Or with NPM:\nnpm install -g yarn\n\n\nWe also use husky to manage the git commit hooks that help to improve the quality of our commits. Without installing husky, you risk committing non-compliant code to the repository.\n\nUsing husky triggers two pre-commit hooks. The first will run lint-staged on each staged file, which includes running prettier to format, eslint for linting, and also tsc-files for quickly checking that TypeScript can compile the code. The second hook will test the codebase prior to committing, ensuring that all tests must pass.\n\nTo enable hooks locally, you will need to run:\n\nyarn husky install\n\n\n\n# NVM\n\nThis repository uses NVM and an .nvmrc file to lock the Node version to the current version used by ardrive-core-js.\n\nNote for Windows: We recommend using WSL for setting up NVM on Windows using the instructions described here\n\nFollow these steps to get NVM up and running on your system:\n\n 1. Install NVM using these installation instructions.\n 2. Navigate to this project's root directory\n 3. Ensure that the correct version of Node is installed by performing: nvm install\n 4. Every time you start a new terminal session or switch to this project from another NPM project, you should set the correct version of Node by running: nvm use\n\n\n# Recommended Visual Studio Code extensions\n\nTo ensure your environment is compatible, we also recommend the following VSCode extensions:\n\n * ES-Lint\n * Editor-Config\n * Prettier\n * ZipFS\n\n\n# Available Scripts\n\n\n# yarn start\n\nRuns the app in the development mode. Open http://localhost:8080 to view it in the browser.\n\nThe page will reload if you make edits. You will also see any lint errors in the console.\n\n\n# yarn build\n\nBuilds a static copy of your site to the build/ folder. Your app is ready to be deployed!\n\n\n# yarn test\n\nLaunches the application test runner. Run with the --watch flag (yarn test -- --watch) to run in interactive watch mode.\n\n\n# yarn run:prod\n\nBuilds a fresh snowpack production build to the build/ folder Then launches that copy with http-server-spa for local testing The build will be available for preview at: http://localhost:8080",normalizedContent:"# ardrive price calculator\n\n\n# overview\n\nthe ardrive price calculator website is open source, and its code can be viewed here\n\nthis website is intended to calculate the cost, in a wide variety of denominations and cryptocurrencies, of uploading data to arweave. you can spin up your own version by cloning the code from github and following these steps.\n\n\n# developer setup\n\nfollow these steps to get the developer environment up and running:\n\n\n# install yarn 2\n\nthe ardrive price calculator uses yarn 2, so install the latest version with the yarn installation instructions. in most cases:\n\n# brew:\nbrew install yarn\n\n# or with npm:\nnpm install -g yarn\n\n\nwe also use husky to manage the git commit hooks that help to improve the quality of our commits. without installing husky, you risk committing non-compliant code to the repository.\n\nusing husky triggers two pre-commit hooks. the first will run lint-staged on each staged file, which includes running prettier to format, eslint for linting, and also tsc-files for quickly checking that typescript can compile the code. the second hook will test the codebase prior to committing, ensuring that all tests must pass.\n\nto enable hooks locally, you will need to run:\n\nyarn husky install\n\n\n\n# nvm\n\nthis repository uses nvm and an .nvmrc file to lock the node version to the current version used by ardrive-core-js.\n\nnote for windows: we recommend using wsl for setting up nvm on windows using the instructions described here\n\nfollow these steps to get nvm up and running on your system:\n\n 1. install nvm using these installation instructions.\n 2. navigate to this project's root directory\n 3. ensure that the correct version of node is installed by performing: nvm install\n 4. every time you start a new terminal session or switch to this project from another npm project, you should set the correct version of node by running: nvm use\n\n\n# recommended visual studio code extensions\n\nto ensure your environment is compatible, we also recommend the following vscode extensions:\n\n * es-lint\n * editor-config\n * prettier\n * zipfs\n\n\n# available scripts\n\n\n# yarn start\n\nruns the app in the development mode. open http://localhost:8080 to view it in the browser.\n\nthe page will reload if you make edits. you will also see any lint errors in the console.\n\n\n# yarn build\n\nbuilds a static copy of your site to the build/ folder. your app is ready to be deployed!\n\n\n# yarn test\n\nlaunches the application test runner. run with the --watch flag (yarn test -- --watch) to run in interactive watch mode.\n\n\n# yarn run:prod\n\nbuilds a fresh snowpack production build to the build/ folder then launches that copy with http-server-spa for local testing the build will be available for preview at: http://localhost:8080",charsets:{}},{title:"placeholder",frontmatter:{},regularPath:"/docs/",relativePath:"docs/readme.md",key:"v-35b0f3b1",path:"/docs/",headersStr:null,content:"# placeholder\n\nExercitation proident duis qui est veniam duis ullamco proident et veniam.",normalizedContent:"# placeholder\n\nexercitation proident duis qui est veniam duis ullamco proident et veniam.",charsets:{}},{title:"Payment API",frontmatter:{},regularPath:"/docs/turbo/api/payment.html",relativePath:"docs/turbo/api/payment.md",key:"v-e65ea9a4",path:"/docs/turbo/api/payment.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:18},{level:2,title:"Endpoints",slug:"endpoints",normalizedTitle:"endpoints",charIndex:596},{level:3,title:"Get Amount of Credits for Byte Count",slug:"get-amount-of-credits-for-byte-count",normalizedTitle:"get amount of credits for byte count",charIndex:724},{level:3,title:"Get winc for Payment Type and Amount",slug:"get-winc-for-payment-type-and-amount",normalizedTitle:"get winc for payment type and amount",charIndex:1282},{level:3,title:"Get Current Balance of winc",slug:"get-current-balance-of-winc",normalizedTitle:"get current balance of winc",charIndex:1663},{level:3,title:"Get Quote for Credits",slug:"get-quote-for-credits",normalizedTitle:"get quote for credits",charIndex:1927},{level:3,title:"Get Supported Currencies",slug:"get-supported-currencies",normalizedTitle:"get supported currencies",charIndex:5246},{level:3,title:"Get Supported Countries",slug:"get-supported-countries",normalizedTitle:"get supported countries",charIndex:7768},{level:3,title:"Get Conversion Rates",slug:"get-conversion-rates",normalizedTitle:"get conversion rates",charIndex:10758}],headersStr:"Overview Endpoints Get Amount of Credits for Byte Count Get winc for Payment Type and Amount Get Current Balance of winc Get Quote for Credits Get Supported Currencies Get Supported Countries Get Conversion Rates",content:'# Payment API\n\n\n# Overview\n\nArDrive offers several API endpoints to help manage and determine costs associated with converting currencies into Turbo credits. The below endpoints offer access to useful information that can help stay in control when uploading data to Arweave using Turbo. "winc" refers to "winston credits", the smallest denomination of a Turbo credit.\n\nNote: This service is still evolving and the information provided below may be out of date. You can view the most up to date information about the available endpoints here, or view the raw json for that documentation here.\n\n\n# Endpoints\n\nThe host url for all below endpoints is:\n\nhttps://payment.ardrive.io/v1\n\nAll of these endpoints use GET requests\n\n\n# Get Amount of Credits for Byte Count\n\nReturns the current amount of winc it will cost to upload a provided byte count worth of data.\n\n/price/bytes/{byteCount}\n\n# Parameters\n\nbyteCount*: integer - (path)\n\n# Example\n\nhttps://payment.ardrive.io/v1/price/bytes/5242880\n\n\nResponse Body (JSON)\n\n{\n  "winc": "1676650364",\n  "adjustments": [\n    {\n      "name": "FWD Research July 2023 Subsidy",\n      "description": "A 60% discount for uploads over 500KiB",\n      "operator": "multiply",\n      "value": 0.6,\n      "adjustmentAmount": "-2514975546"\n    }\n  ]\n}\n\n\n\n# Get winc for Payment Type and Amount\n\nReturns the current amount of winc Turbo will quote for a given payment type and amount.\n\n/price/{type}/{amount}\n\n# Parameters\n\ntype*: string - must match a supported currency, such as "usd" - (path)\n\namount*: integer - (path)\n\n# Example\n\nhttps://payment.ardrive.io/v1/price/usd/1000\n\n\nResponse Body (JSON)\n\n{\n  "winc": "1365248226950"\n}\n\n\n\n# Get Current Balance of winc\n\nuse a signed request of a previously obtained JWT to get the signing wallet\'s current service balance in winc.\n\n/balance\n\n# Parameters\n\nx-signature*: string - (header)\n\nx-nonce*: string - (header)\n\nx-public-key*: string - (header)\n\n\n# Get Quote for Credits\n\nGets a quote and payment session for a given payment method, destination address, currency type, and payment amount\n\n/top-up/{method}/{address}/{currency}/{amount}\n\n# Parameters\n\nmethod*: string - payment-intent | checkout-session - (path)\n\naddress*: string - public address of wallet - (path)\n\ncurrency*: string - must match supported currency, such as usd - (path)\n\namount*: integer - amount of the currency to convert to winc, usd has a minimum transaction amount of 1000 ($10.00) - (path)\n\n# Example\n\nhttps://payment.ardrive.io/v1/top-up/checkout-session/cF0H0SKdnaDTqWKY9iJKBktTpdEWgb3GnlndE7ABv0Q/usd/1000\n\n\nResponse Body (JSON)\n\n{\n  "topUpQuote": {\n    "topUpQuoteId": "54f57b67-4fcf-47fb-85e6-85d4a8c96f25",\n    "destinationAddressType": "arweave",\n    "paymentAmount": 1000,\n    "winstonCreditAmount": "1360424028269",\n    "destinationAddress": "cF0H0SKdnaDTqWKY9iJKBktTpdEWgb3GnlndE7ABv0Q",\n    "currencyType": "usd",\n    "quoteExpirationDate": "2023-07-27T01:56:26.436Z",\n    "paymentProvider": "stripe"\n  },\n  "paymentSession": {\n    "id": "cs_live_a1p47UpvijHGe7sI8AI1kScZdd5qKzdyaHUWRaeuFVvVvDHXeuck68Pf51",\n    "object": "checkout.session",\n    "after_expiration": null,\n    "allow_promotion_codes": null,\n    "amount_subtotal": 1000,\n    "amount_total": 1000,\n    "automatic_tax": {\n      "enabled": false,\n      "status": null\n    },\n    "billing_address_collection": null,\n    "cancel_url": "https://app.ardrive.io",\n    "client_reference_id": null,\n    "consent": null,\n    "consent_collection": null,\n    "created": 1690422686,\n    "currency": "usd",\n    "currency_conversion": null,\n    "custom_fields": [],\n    "custom_text": {\n      "shipping_address": null,\n      "submit": null\n    },\n    "customer": null,\n    "customer_creation": "if_required",\n    "customer_details": null,\n    "customer_email": null,\n    "expires_at": 1690509086,\n    "invoice": null,\n    "invoice_creation": {\n      "enabled": false,\n      "invoice_data": {\n        "account_tax_ids": null,\n        "custom_fields": null,\n        "description": null,\n        "footer": null,\n        "metadata": {},\n        "rendering_options": null\n      }\n    },\n    "livemode": true,\n    "locale": null,\n    "metadata": {},\n    "mode": "payment",\n    "payment_intent": null,\n    "payment_link": null,\n    "payment_method_collection": "always",\n    "payment_method_options": {},\n    "payment_method_types": [\n      "card"\n    ],\n    "payment_status": "unpaid",\n    "phone_number_collection": {\n      "enabled": false\n    },\n    "recovered_from": null,\n    "setup_intent": null,\n    "shipping_address_collection": null,\n    "shipping_cost": null,\n    "shipping_details": null,\n    "shipping_options": [],\n    "status": "open",\n    "submit_type": null,\n    "subscription": null,\n    "success_url": "https://app.ardrive.io",\n    "total_details": {\n      "amount_discount": 0,\n      "amount_shipping": 0,\n      "amount_tax": 0\n    },\n    "url": "https://checkout.stripe.com/c/pay/cs_live_a1p47UpvijHGe7sI8AI1kScZdd5qKzdyaHUWRaeuFVvVvDHXeuck68Pf51#fidkdWxOYHwnPyd1blppbHNgWjA0T1BEcXJGPWR1VUpSbkFJSFR0S0M8dlV1Y2tgS1ZVa3JdPVxfPXw0Q0tBaTNzPDFtX0xyf2JDVlxpNzJnUkAxSmp2PUZJdHBwa1B2ck53TmZkQW1BSjNoNTU3XG88RGBObycpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl"\n  }\n}\n\n\n\n# Get Supported Currencies\n\nReturns a list of currency types supported by Turbo\n\n/currencies\n\n# Parameters\n\nNone\n\n# Example\n\nhttps://payment.ardrive.io/v1/currencies\n\n\nResponse Body (JSON)\n\n{\n  "supportedCurrencies": [\n    "aud",\n    "brl",\n    "cad",\n    "eur",\n    "gbp",\n    "hkd",\n    "inr",\n    "jpy",\n    "sgd",\n    "usd"\n  ],\n  "limits": {\n    "aud": {\n      "maximumPaymentAmount": 1500000,\n      "minimumPaymentAmount": 1500,\n      "suggestedPaymentAmounts": [\n        2500,\n        7500,\n        15000\n      ],\n      "zeroDecimalCurrency": false\n    },\n    "brl": {\n      "maximumPaymentAmount": 5000000,\n      "minimumPaymentAmount": 5000,\n      "suggestedPaymentAmounts": [\n        12500,\n        25000,\n        50000\n      ],\n      "zeroDecimalCurrency": false\n    },\n    "cad": {\n      "maximumPaymentAmount": 1300000,\n      "minimumPaymentAmount": 1400,\n      "suggestedPaymentAmounts": [\n        2500,\n        5000,\n        10000\n      ],\n      "zeroDecimalCurrency": false\n    },\n    "eur": {\n      "maximumPaymentAmount": 1000000,\n      "minimumPaymentAmount": 1000,\n      "suggestedPaymentAmounts": [\n        2500,\n        5000,\n        10000\n      ],\n      "zeroDecimalCurrency": false\n    },\n    "gbp": {\n      "maximumPaymentAmount": 770000,\n      "minimumPaymentAmount": 780,\n      "suggestedPaymentAmounts": [\n        2000,\n        4000,\n        8000\n      ],\n      "zeroDecimalCurrency": false\n    },\n    "hkd": {\n      "maximumPaymentAmount": 7800000,\n      "minimumPaymentAmount": 7900,\n      "suggestedPaymentAmounts": [\n        20000,\n        40000,\n        80000\n      ],\n      "zeroDecimalCurrency": false\n    },\n    "inr": {\n      "maximumPaymentAmount": 90000000,\n      "minimumPaymentAmount": 83000,\n      "suggestedPaymentAmounts": [\n        200000,\n        400000,\n        800000\n      ],\n      "zeroDecimalCurrency": false\n    },\n    "jpy": {\n      "maximumPaymentAmount": 1500000,\n      "minimumPaymentAmount": 1500,\n      "suggestedPaymentAmounts": [\n        3500,\n        6500,\n        15000\n      ],\n      "zeroDecimalCurrency": true\n    },\n    "sgd": {\n      "maximumPaymentAmount": 1300000,\n      "minimumPaymentAmount": 1500,\n      "suggestedPaymentAmounts": [\n        2500,\n        7500,\n        15000\n      ],\n      "zeroDecimalCurrency": false\n    },\n    "usd": {\n      "maximumPaymentAmount": 1000000,\n      "minimumPaymentAmount": 1000,\n      "suggestedPaymentAmounts": [\n        2500,\n        5000,\n        10000\n      ],\n      "zeroDecimalCurrency": false\n    }\n  }\n}\n\n\n\n# Get Supported Countries\n\nReturns a list of countries where Turbo is available\n\n/countries\n\n# Parameters\n\nNone\n\n# Example\n\nhttps://payment.ardrive.io/v1/countries\n\n\nResponse Body (JSON)\n\n[\n  "United States",\n  "United Kingdom",\n  "Afghanistan",\n  "Albania",\n  "Algeria",\n  "Andorra",\n  "Angola",\n  "Antigua and Barbuda",\n  "Argentina",\n  "Armenia",\n  "Australia",\n  "Austria",\n  "Azerbaijan",\n  "Bahamas",\n  "Bahrain",\n  "Bangladesh",\n  "Barbados",\n  "Belarus",\n  "Belgium",\n  "Belize",\n  "Benin",\n  "Bhutan",\n  "Bolivia",\n  "Bosnia and Herzegovina",\n  "Botswana",\n  "Brazil",\n  "Brunei",\n  "Bulgaria",\n  "Burkina Faso",\n  "Burundi",\n  "Cabo Verde",\n  "Cambodia",\n  "Cameroon",\n  "Canada",\n  "Central African Republic",\n  "Chad",\n  "Chile",\n  "China",\n  "Colombia",\n  "Comoros",\n  "Congo",\n  "Costa Rica",\n  "Cote d\'Ivoire",\n  "Croatia",\n  "Cyprus",\n  "Czech Republic",\n  "Democratic Republic of the Congo",\n  "Denmark",\n  "Djibouti",\n  "Dominica",\n  "Dominican Republic",\n  "East Timor",\n  "Ecuador",\n  "Egypt",\n  "El Salvador",\n  "Equatorial Guinea",\n  "Eritrea",\n  "Estonia",\n  "Eswatini",\n  "Ethiopia",\n  "Fiji",\n  "Finland",\n  "France",\n  "Gabon",\n  "Gambia",\n  "Georgia",\n  "Germany",\n  "Ghana",\n  "Greece",\n  "Grenada",\n  "Guatemala",\n  "Guinea",\n  "Guinea-Bissau",\n  "Guyana",\n  "Haiti",\n  "Honduras",\n  "Hungary",\n  "Iceland",\n  "India",\n  "Indonesia",\n  "Iraq",\n  "Ireland",\n  "Israel",\n  "Italy",\n  "Jamaica",\n  "Japan",\n  "Jordan",\n  "Kazakhstan",\n  "Kenya",\n  "Kiribati",\n  "Kuwait",\n  "Kyrgyzstan",\n  "Laos",\n  "Latvia",\n  "Lebanon",\n  "Lesotho",\n  "Liberia",\n  "Libya",\n  "Liechtenstein",\n  "Lithuania",\n  "Luxembourg",\n  "Madagascar",\n  "Malawi",\n  "Malaysia",\n  "Maldives",\n  "Mali",\n  "Malta",\n  "Marshall Islands",\n  "Mauritania",\n  "Mauritius",\n  "Mexico",\n  "Micronesia",\n  "Moldova",\n  "Monaco",\n  "Mongolia",\n  "Montenegro",\n  "Morocco",\n  "Mozambique",\n  "Myanmar",\n  "Namibia",\n  "Nauru",\n  "Nepal",\n  "Netherlands",\n  "New Zealand",\n  "Nicaragua",\n  "Niger",\n  "Nigeria",\n  "North Macedonia",\n  "Norway",\n  "Oman",\n  "Pakistan",\n  "Palau",\n  "Palestine",\n  "Panama",\n  "Papua New Guinea",\n  "Paraguay",\n  "Peru",\n  "Philippines",\n  "Poland",\n  "Portugal",\n  "Qatar",\n  "Romania",\n  "Russia",\n  "Rwanda",\n  "Saint Kitts and Nevis",\n  "Saint Lucia",\n  "Saint Vincent and the Grenadines",\n  "Samoa",\n  "San Marino",\n  "Sao Tome and Principe",\n  "Saudi Arabia",\n  "Senegal",\n  "Serbia",\n  "Seychelles",\n  "Sierra Leone",\n  "Singapore",\n  "Slovakia",\n  "Slovenia",\n  "Solomon Islands",\n  "Somalia",\n  "South Africa",\n  "South Korea",\n  "South Sudan",\n  "Spain",\n  "Sri Lanka",\n  "Sudan",\n  "Suriname",\n  "Sweden",\n  "Switzerland",\n  "Taiwan",\n  "Tajikistan",\n  "Tanzania",\n  "Thailand",\n  "Togo",\n  "Tonga",\n  "Trinidad and Tobago",\n  "Tunisia",\n  "Turkey",\n  "Turkmenistan",\n  "Tuvalu",\n  "Uganda",\n  "Ukraine",\n  "United Arab Emirates",\n  "Uruguay",\n  "Uzbekistan",\n  "Vanuatu",\n  "Vatican City",\n  "Venezuela",\n  "Vietnam",\n  "Yemen",\n  "Zambia",\n  "Zimbabwe"\n]\n\n\n\n# Get Conversion Rates\n\nReturns supported fiat conversion rates for 1GB of storage based on current market prices\n\n/rates\n\n# Parameters\n\nNone\n\n# Example\n\nhttps://payment.ardrive.io/v1/rates\n\n\nResponse Body (JSON)\n\n{\n  "winc": "343168912867",\n  "fiat": {\n    "aud": 3.52873729722864,\n    "brl": 11.34598786477272,\n    "cad": 3.15729126594135,\n    "eur": 2.1569195680425,\n    "gbp": 1.8487882011791101,\n    "hkd": 18.66938404981161,\n    "inr": 196.24591287088242,\n    "jpy": 334.744630809484,\n    "sgd": 3.16995419882613,\n    "usd": 2.39329431522465\n  },\n  "adjustments": [\n    {\n      "name": "FWD Research July 2023 Subsidy",\n      "description": "A 60% discount for uploads over 500KiB",\n      "operator": "multiply",\n      "value": 0.6,\n      "adjustmentAmount": "-514753369299"\n    }\n  ]\n}\n\n\n* required',normalizedContent:'# payment api\n\n\n# overview\n\nardrive offers several api endpoints to help manage and determine costs associated with converting currencies into turbo credits. the below endpoints offer access to useful information that can help stay in control when uploading data to arweave using turbo. "winc" refers to "winston credits", the smallest denomination of a turbo credit.\n\nnote: this service is still evolving and the information provided below may be out of date. you can view the most up to date information about the available endpoints here, or view the raw json for that documentation here.\n\n\n# endpoints\n\nthe host url for all below endpoints is:\n\nhttps://payment.ardrive.io/v1\n\nall of these endpoints use get requests\n\n\n# get amount of credits for byte count\n\nreturns the current amount of winc it will cost to upload a provided byte count worth of data.\n\n/price/bytes/{bytecount}\n\n# parameters\n\nbytecount*: integer - (path)\n\n# example\n\nhttps://payment.ardrive.io/v1/price/bytes/5242880\n\n\nresponse body (json)\n\n{\n  "winc": "1676650364",\n  "adjustments": [\n    {\n      "name": "fwd research july 2023 subsidy",\n      "description": "a 60% discount for uploads over 500kib",\n      "operator": "multiply",\n      "value": 0.6,\n      "adjustmentamount": "-2514975546"\n    }\n  ]\n}\n\n\n\n# get winc for payment type and amount\n\nreturns the current amount of winc turbo will quote for a given payment type and amount.\n\n/price/{type}/{amount}\n\n# parameters\n\ntype*: string - must match a supported currency, such as "usd" - (path)\n\namount*: integer - (path)\n\n# example\n\nhttps://payment.ardrive.io/v1/price/usd/1000\n\n\nresponse body (json)\n\n{\n  "winc": "1365248226950"\n}\n\n\n\n# get current balance of winc\n\nuse a signed request of a previously obtained jwt to get the signing wallet\'s current service balance in winc.\n\n/balance\n\n# parameters\n\nx-signature*: string - (header)\n\nx-nonce*: string - (header)\n\nx-public-key*: string - (header)\n\n\n# get quote for credits\n\ngets a quote and payment session for a given payment method, destination address, currency type, and payment amount\n\n/top-up/{method}/{address}/{currency}/{amount}\n\n# parameters\n\nmethod*: string - payment-intent | checkout-session - (path)\n\naddress*: string - public address of wallet - (path)\n\ncurrency*: string - must match supported currency, such as usd - (path)\n\namount*: integer - amount of the currency to convert to winc, usd has a minimum transaction amount of 1000 ($10.00) - (path)\n\n# example\n\nhttps://payment.ardrive.io/v1/top-up/checkout-session/cf0h0skdnadtqwky9ijkbkttpdewgb3gnlnde7abv0q/usd/1000\n\n\nresponse body (json)\n\n{\n  "topupquote": {\n    "topupquoteid": "54f57b67-4fcf-47fb-85e6-85d4a8c96f25",\n    "destinationaddresstype": "arweave",\n    "paymentamount": 1000,\n    "winstoncreditamount": "1360424028269",\n    "destinationaddress": "cf0h0skdnadtqwky9ijkbkttpdewgb3gnlnde7abv0q",\n    "currencytype": "usd",\n    "quoteexpirationdate": "2023-07-27t01:56:26.436z",\n    "paymentprovider": "stripe"\n  },\n  "paymentsession": {\n    "id": "cs_live_a1p47upvijhge7si8ai1ksczdd5qkzdyahuwraeufvvvvdhxeuck68pf51",\n    "object": "checkout.session",\n    "after_expiration": null,\n    "allow_promotion_codes": null,\n    "amount_subtotal": 1000,\n    "amount_total": 1000,\n    "automatic_tax": {\n      "enabled": false,\n      "status": null\n    },\n    "billing_address_collection": null,\n    "cancel_url": "https://app.ardrive.io",\n    "client_reference_id": null,\n    "consent": null,\n    "consent_collection": null,\n    "created": 1690422686,\n    "currency": "usd",\n    "currency_conversion": null,\n    "custom_fields": [],\n    "custom_text": {\n      "shipping_address": null,\n      "submit": null\n    },\n    "customer": null,\n    "customer_creation": "if_required",\n    "customer_details": null,\n    "customer_email": null,\n    "expires_at": 1690509086,\n    "invoice": null,\n    "invoice_creation": {\n      "enabled": false,\n      "invoice_data": {\n        "account_tax_ids": null,\n        "custom_fields": null,\n        "description": null,\n        "footer": null,\n        "metadata": {},\n        "rendering_options": null\n      }\n    },\n    "livemode": true,\n    "locale": null,\n    "metadata": {},\n    "mode": "payment",\n    "payment_intent": null,\n    "payment_link": null,\n    "payment_method_collection": "always",\n    "payment_method_options": {},\n    "payment_method_types": [\n      "card"\n    ],\n    "payment_status": "unpaid",\n    "phone_number_collection": {\n      "enabled": false\n    },\n    "recovered_from": null,\n    "setup_intent": null,\n    "shipping_address_collection": null,\n    "shipping_cost": null,\n    "shipping_details": null,\n    "shipping_options": [],\n    "status": "open",\n    "submit_type": null,\n    "subscription": null,\n    "success_url": "https://app.ardrive.io",\n    "total_details": {\n      "amount_discount": 0,\n      "amount_shipping": 0,\n      "amount_tax": 0\n    },\n    "url": "https://checkout.stripe.com/c/pay/cs_live_a1p47upvijhge7si8ai1ksczdd5qkzdyahuwraeufvvvvdhxeuck68pf51#fidkdwxoyhwnpyd1blppbhngwja0t1becxjgpwr1vupsbkfjsfr0s0m8dlv1y2tgs1zva3jdpvxfpxw0q0tbatnzpdftx0xyf2jdvlxpnzjnukaxsmp2puzjdhbwa1b2ck53tmzkqw1bsjnontu3xg88rgbobycpj2n3amhwyhdzyhcnp3f3cgapj2lkfgpwcvf8dwanpyd2bgtiawbabhfgaccpj2brzgdpyfvpzgzgbwppywb3dic%2fcxdwyhgl"\n  }\n}\n\n\n\n# get supported currencies\n\nreturns a list of currency types supported by turbo\n\n/currencies\n\n# parameters\n\nnone\n\n# example\n\nhttps://payment.ardrive.io/v1/currencies\n\n\nresponse body (json)\n\n{\n  "supportedcurrencies": [\n    "aud",\n    "brl",\n    "cad",\n    "eur",\n    "gbp",\n    "hkd",\n    "inr",\n    "jpy",\n    "sgd",\n    "usd"\n  ],\n  "limits": {\n    "aud": {\n      "maximumpaymentamount": 1500000,\n      "minimumpaymentamount": 1500,\n      "suggestedpaymentamounts": [\n        2500,\n        7500,\n        15000\n      ],\n      "zerodecimalcurrency": false\n    },\n    "brl": {\n      "maximumpaymentamount": 5000000,\n      "minimumpaymentamount": 5000,\n      "suggestedpaymentamounts": [\n        12500,\n        25000,\n        50000\n      ],\n      "zerodecimalcurrency": false\n    },\n    "cad": {\n      "maximumpaymentamount": 1300000,\n      "minimumpaymentamount": 1400,\n      "suggestedpaymentamounts": [\n        2500,\n        5000,\n        10000\n      ],\n      "zerodecimalcurrency": false\n    },\n    "eur": {\n      "maximumpaymentamount": 1000000,\n      "minimumpaymentamount": 1000,\n      "suggestedpaymentamounts": [\n        2500,\n        5000,\n        10000\n      ],\n      "zerodecimalcurrency": false\n    },\n    "gbp": {\n      "maximumpaymentamount": 770000,\n      "minimumpaymentamount": 780,\n      "suggestedpaymentamounts": [\n        2000,\n        4000,\n        8000\n      ],\n      "zerodecimalcurrency": false\n    },\n    "hkd": {\n      "maximumpaymentamount": 7800000,\n      "minimumpaymentamount": 7900,\n      "suggestedpaymentamounts": [\n        20000,\n        40000,\n        80000\n      ],\n      "zerodecimalcurrency": false\n    },\n    "inr": {\n      "maximumpaymentamount": 90000000,\n      "minimumpaymentamount": 83000,\n      "suggestedpaymentamounts": [\n        200000,\n        400000,\n        800000\n      ],\n      "zerodecimalcurrency": false\n    },\n    "jpy": {\n      "maximumpaymentamount": 1500000,\n      "minimumpaymentamount": 1500,\n      "suggestedpaymentamounts": [\n        3500,\n        6500,\n        15000\n      ],\n      "zerodecimalcurrency": true\n    },\n    "sgd": {\n      "maximumpaymentamount": 1300000,\n      "minimumpaymentamount": 1500,\n      "suggestedpaymentamounts": [\n        2500,\n        7500,\n        15000\n      ],\n      "zerodecimalcurrency": false\n    },\n    "usd": {\n      "maximumpaymentamount": 1000000,\n      "minimumpaymentamount": 1000,\n      "suggestedpaymentamounts": [\n        2500,\n        5000,\n        10000\n      ],\n      "zerodecimalcurrency": false\n    }\n  }\n}\n\n\n\n# get supported countries\n\nreturns a list of countries where turbo is available\n\n/countries\n\n# parameters\n\nnone\n\n# example\n\nhttps://payment.ardrive.io/v1/countries\n\n\nresponse body (json)\n\n[\n  "united states",\n  "united kingdom",\n  "afghanistan",\n  "albania",\n  "algeria",\n  "andorra",\n  "angola",\n  "antigua and barbuda",\n  "argentina",\n  "armenia",\n  "australia",\n  "austria",\n  "azerbaijan",\n  "bahamas",\n  "bahrain",\n  "bangladesh",\n  "barbados",\n  "belarus",\n  "belgium",\n  "belize",\n  "benin",\n  "bhutan",\n  "bolivia",\n  "bosnia and herzegovina",\n  "botswana",\n  "brazil",\n  "brunei",\n  "bulgaria",\n  "burkina faso",\n  "burundi",\n  "cabo verde",\n  "cambodia",\n  "cameroon",\n  "canada",\n  "central african republic",\n  "chad",\n  "chile",\n  "china",\n  "colombia",\n  "comoros",\n  "congo",\n  "costa rica",\n  "cote d\'ivoire",\n  "croatia",\n  "cyprus",\n  "czech republic",\n  "democratic republic of the congo",\n  "denmark",\n  "djibouti",\n  "dominica",\n  "dominican republic",\n  "east timor",\n  "ecuador",\n  "egypt",\n  "el salvador",\n  "equatorial guinea",\n  "eritrea",\n  "estonia",\n  "eswatini",\n  "ethiopia",\n  "fiji",\n  "finland",\n  "france",\n  "gabon",\n  "gambia",\n  "georgia",\n  "germany",\n  "ghana",\n  "greece",\n  "grenada",\n  "guatemala",\n  "guinea",\n  "guinea-bissau",\n  "guyana",\n  "haiti",\n  "honduras",\n  "hungary",\n  "iceland",\n  "india",\n  "indonesia",\n  "iraq",\n  "ireland",\n  "israel",\n  "italy",\n  "jamaica",\n  "japan",\n  "jordan",\n  "kazakhstan",\n  "kenya",\n  "kiribati",\n  "kuwait",\n  "kyrgyzstan",\n  "laos",\n  "latvia",\n  "lebanon",\n  "lesotho",\n  "liberia",\n  "libya",\n  "liechtenstein",\n  "lithuania",\n  "luxembourg",\n  "madagascar",\n  "malawi",\n  "malaysia",\n  "maldives",\n  "mali",\n  "malta",\n  "marshall islands",\n  "mauritania",\n  "mauritius",\n  "mexico",\n  "micronesia",\n  "moldova",\n  "monaco",\n  "mongolia",\n  "montenegro",\n  "morocco",\n  "mozambique",\n  "myanmar",\n  "namibia",\n  "nauru",\n  "nepal",\n  "netherlands",\n  "new zealand",\n  "nicaragua",\n  "niger",\n  "nigeria",\n  "north macedonia",\n  "norway",\n  "oman",\n  "pakistan",\n  "palau",\n  "palestine",\n  "panama",\n  "papua new guinea",\n  "paraguay",\n  "peru",\n  "philippines",\n  "poland",\n  "portugal",\n  "qatar",\n  "romania",\n  "russia",\n  "rwanda",\n  "saint kitts and nevis",\n  "saint lucia",\n  "saint vincent and the grenadines",\n  "samoa",\n  "san marino",\n  "sao tome and principe",\n  "saudi arabia",\n  "senegal",\n  "serbia",\n  "seychelles",\n  "sierra leone",\n  "singapore",\n  "slovakia",\n  "slovenia",\n  "solomon islands",\n  "somalia",\n  "south africa",\n  "south korea",\n  "south sudan",\n  "spain",\n  "sri lanka",\n  "sudan",\n  "suriname",\n  "sweden",\n  "switzerland",\n  "taiwan",\n  "tajikistan",\n  "tanzania",\n  "thailand",\n  "togo",\n  "tonga",\n  "trinidad and tobago",\n  "tunisia",\n  "turkey",\n  "turkmenistan",\n  "tuvalu",\n  "uganda",\n  "ukraine",\n  "united arab emirates",\n  "uruguay",\n  "uzbekistan",\n  "vanuatu",\n  "vatican city",\n  "venezuela",\n  "vietnam",\n  "yemen",\n  "zambia",\n  "zimbabwe"\n]\n\n\n\n# get conversion rates\n\nreturns supported fiat conversion rates for 1gb of storage based on current market prices\n\n/rates\n\n# parameters\n\nnone\n\n# example\n\nhttps://payment.ardrive.io/v1/rates\n\n\nresponse body (json)\n\n{\n  "winc": "343168912867",\n  "fiat": {\n    "aud": 3.52873729722864,\n    "brl": 11.34598786477272,\n    "cad": 3.15729126594135,\n    "eur": 2.1569195680425,\n    "gbp": 1.8487882011791101,\n    "hkd": 18.66938404981161,\n    "inr": 196.24591287088242,\n    "jpy": 334.744630809484,\n    "sgd": 3.16995419882613,\n    "usd": 2.39329431522465\n  },\n  "adjustments": [\n    {\n      "name": "fwd research july 2023 subsidy",\n      "description": "a 60% discount for uploads over 500kib",\n      "operator": "multiply",\n      "value": 0.6,\n      "adjustmentamount": "-514753369299"\n    }\n  ]\n}\n\n\n* required',charsets:{cjk:!0}},{title:"Upload API",frontmatter:{next:!1},regularPath:"/docs/turbo/api/upload.html",relativePath:"docs/turbo/api/upload.md",key:"v-57c590fa",path:"/docs/turbo/api/upload.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:17},{level:2,title:"Endpoint",slug:"endpoint",normalizedTitle:"endpoint",charIndex:500},{level:2,title:"Schema",slug:"schema",normalizedTitle:"schema",charIndex:546},{level:3,title:"Headers",slug:"headers",normalizedTitle:"headers",charIndex:557},{level:3,title:"Body",slug:"body",normalizedTitle:"body",charIndex:670},{level:3,title:"Response",slug:"response",normalizedTitle:"response",charIndex:1482}],headersStr:"Overview Endpoint Schema Headers Body Response",content:'# Upload API\n\n\n# Overview\n\nThe Turbo Upload Service supports payment for signed data-items to upload.ardrive.io using Turbo Credits. An API endpoint has been created to facilitate the payments. A signed data-item can be posted to upload.ardrive.io using the below schema.\n\nNote: This service is still evolving and the information provided below may be out of date. You can view the most up to date information about the available endpoints here, or view the raw json for that documentation here.\n\n\n# Endpoint\n\nhttps://upload.ardrive.io/v1/tx\n\n\n# Schema\n\n\n# Headers\n\ncontent-type*: "application/octet-stream"\n\naccept*: string - media type, such as "application/json"\n\n\n# Body\n\nThe body of your request should contain a signed data-item.\n\nData-items can be created and signed with the arbundles library, following the below example.\n\n// Initiates the arbundles Arweave signer with your wallet\nconst signer = new ArweaveSigner(jwk);\n\n// Sets the data you would like to use to create a data-item\nconst data = "Any value can Go here";\n\n// Creates a data-item using your data and the Arweave Signer\nconst dataItem = createData(data, signer);\n\n// Signs the data-item\nawait dataItem.sign(signer);\n\n\n\nIn this example, the variable dataItem is what should be sent in your api post request in order to finalize and pay for the upload using Turbo Credits. dataItem.sign() is a mutating method, so there is no need to create a separate variable to hold the results of signing the data-item.\n\n\n# Response\n\nHeaders ``` access-control-allow-methods: PUT,GET,HEAD,POST,DELETE,OPTIONS access-control-allow-origin: https://upload.ardrive.io content-length: 173 content-security-policy: frame-ancestors \'none\'; default-src \'self\'; img-src data: https:; script-src \'self\' \'unsafe-inline\' https:; style-src \'unsafe-inline\' https:; object-src \'none\'; font-src \'self\' https:; content-type: application/json; charset=utf-8 date: Thu,27 Jul 2023 22:06:33 GMT strict-transport-security: max-age=3600; includeSubDomains; preload vary: Origin via: 1.1 d0d53eedec01ac540f737b5fafb16436.cloudfront.net (CloudFront) x-amz-cf-id: eypqkKDp-ADDMHmBOp3UQzDK4gZ8iYE8fbmYAyZjfyR3Cj8gevgF6g== x-amz-cf-pop: IAD12-P3 x-cache: Miss from cloudfront x-content-type-options: nosniff x-frame-options: SAMEORIGIN x-xss-protection: 1; mode=block ``` Body ``` { "id": "1wk8nyVTHTHpbmEZ-IGNsGcro4og8XXVbBhHvMFxUgQ", "owner": "cF0H0SKdnaDTqWKY9iJKBktTpdEWgb3GnlndE7ABv0Q", "dataCaches": [ "arweave.net" ], "fastFinalityIndexes": [ "arweave.net" ] } ```\n\n* required',normalizedContent:'# upload api\n\n\n# overview\n\nthe turbo upload service supports payment for signed data-items to upload.ardrive.io using turbo credits. an api endpoint has been created to facilitate the payments. a signed data-item can be posted to upload.ardrive.io using the below schema.\n\nnote: this service is still evolving and the information provided below may be out of date. you can view the most up to date information about the available endpoints here, or view the raw json for that documentation here.\n\n\n# endpoint\n\nhttps://upload.ardrive.io/v1/tx\n\n\n# schema\n\n\n# headers\n\ncontent-type*: "application/octet-stream"\n\naccept*: string - media type, such as "application/json"\n\n\n# body\n\nthe body of your request should contain a signed data-item.\n\ndata-items can be created and signed with the arbundles library, following the below example.\n\n// initiates the arbundles arweave signer with your wallet\nconst signer = new arweavesigner(jwk);\n\n// sets the data you would like to use to create a data-item\nconst data = "any value can go here";\n\n// creates a data-item using your data and the arweave signer\nconst dataitem = createdata(data, signer);\n\n// signs the data-item\nawait dataitem.sign(signer);\n\n\n\nin this example, the variable dataitem is what should be sent in your api post request in order to finalize and pay for the upload using turbo credits. dataitem.sign() is a mutating method, so there is no need to create a separate variable to hold the results of signing the data-item.\n\n\n# response\n\nheaders ``` access-control-allow-methods: put,get,head,post,delete,options access-control-allow-origin: https://upload.ardrive.io content-length: 173 content-security-policy: frame-ancestors \'none\'; default-src \'self\'; img-src data: https:; script-src \'self\' \'unsafe-inline\' https:; style-src \'unsafe-inline\' https:; object-src \'none\'; font-src \'self\' https:; content-type: application/json; charset=utf-8 date: thu,27 jul 2023 22:06:33 gmt strict-transport-security: max-age=3600; includesubdomains; preload vary: origin via: 1.1 d0d53eedec01ac540f737b5fafb16436.cloudfront.net (cloudfront) x-amz-cf-id: eypqkkdp-addmhmbop3uqzdk4gz8iye8fbmyayzjfyr3cj8gevgf6g== x-amz-cf-pop: iad12-p3 x-cache: miss from cloudfront x-content-type-options: nosniff x-frame-options: sameorigin x-xss-protection: 1; mode=block ``` body ``` { "id": "1wk8nyvththpbmez-ignsgcro4og8xxvbbhhvmfxugq", "owner": "cf0h0skdnadtqwky9ijkbkttpdewgb3gnlnde7abv0q", "datacaches": [ "arweave.net" ], "fastfinalityindexes": [ "arweave.net" ] } ```\n\n* required',charsets:{}},{title:"@ardriveapp/turbo-sdk 🚀",frontmatter:{},regularPath:"/docs/turbo/turbo-sdk/",relativePath:"docs/turbo/turbo-sdk/index.md",key:"v-d297eaa6",path:"/docs/turbo/turbo-sdk/",headers:[{level:2,title:"Installation",slug:"installation",normalizedTitle:"installation",charIndex:213},{level:2,title:"Quick Start",slug:"quick-start",normalizedTitle:"quick start",charIndex:297},{level:2,title:"Usage",slug:"usage",normalizedTitle:"usage",charIndex:1881},{level:3,title:"Web",slug:"web",normalizedTitle:"web",charIndex:191},{level:3,title:"NodeJS",slug:"nodejs",normalizedTitle:"nodejs",charIndex:180},{level:3,title:"Typescript",slug:"typescript",normalizedTitle:"typescript",charIndex:7369},{level:2,title:"APIs",slug:"apis",normalizedTitle:"apis",charIndex:7973},{level:3,title:"TurboFactory",slug:"turbofactory",normalizedTitle:"turbofactory",charIndex:319},{level:3,title:"TurboUnauthenticatedClient",slug:"turbounauthenticatedclient",normalizedTitle:"turbounauthenticatedclient",charIndex:9472},{level:3,title:"TurboAuthenticatedClient",slug:"turboauthenticatedclient",normalizedTitle:"turboauthenticatedclient",charIndex:10532},{level:2,title:"Developers",slug:"developers",normalizedTitle:"developers",charIndex:18076},{level:3,title:"Requirements",slug:"requirements",normalizedTitle:"requirements",charIndex:18091},{level:3,title:"Setup & Build",slug:"setup-build",normalizedTitle:"setup &amp; build",charIndex:null},{level:3,title:"Testing",slug:"testing",normalizedTitle:"testing",charIndex:18247},{level:3,title:"Linting & Formatting",slug:"linting-formatting",normalizedTitle:"linting &amp; formatting",charIndex:null},{level:3,title:"Architecture",slug:"architecture",normalizedTitle:"architecture",charIndex:18853},{level:2,title:"Contributions",slug:"contributions",normalizedTitle:"contributions",charIndex:19022}],headersStr:"Installation Quick Start Usage Web NodeJS Typescript APIs TurboFactory TurboUnauthenticatedClient TurboAuthenticatedClient Developers Requirements Setup & Build Testing Linting & Formatting Architecture Contributions",content:'# @ardriveapp/turbo-sdk 🚀\n\nWelcome to the @ardrive/turbo-sdk! This SDK provides functionality for interacting with the Turbo Upload and Payment Services and is available for both NodeJS and Web environments.\n\n\n# Installation\n\nnpm install @ardrive/turbo-sdk\n\n\nor\n\nyarn add @ardrive/turbo-sdk\n\n\n\n# Quick Start\n\nimport { TurboFactory, ArweaveSigner } from \'@ardrive/turbo-sdk\';\n\n// load your JWK directly to authenticate\nconst jwk = fs.readFileSync(\'./my-jwk.json\');\nconst address = arweave.wallets.jwkToAddress(jwk);\nconst turbo = TurboFactory.authenticated({ privateKey: jwk });\n\n// or provide your own signer\nconst signer = new ArweaveSigner(jwk);\nconst turbo = TurboFactory.authenticated({ signer });\n\n// get the wallet balance\nconst { winc: balance } = await turbo.getBalance();\n\n// prep file for upload\nconst filePath = path.join(__dirname, \'./my-image.png\');\nconst fileSize = fs.statSync(filePath).size;\n\n// get the cost of uploading the file\nconst [{ winc: fileSizeCost }] = await turbo.getUploadCosts({\n  bytes: [fileSize],\n});\n\n// check if balance greater than upload cost\nif (balance < fileSizeCost) {\n  const { url } = await turbo.createCheckoutSession({\n    amount: fileSizeCost,\n    owner: address,\n    // add a promo code if you have one\n  });\n  // open the URL to top-up, continue when done\n  open(url);\n  return;\n}\n\n// upload the file\ntry {\n  const { id, owner, dataCaches, fastFinalityIndexes } = await turbo.uploadFile(() => {\n    fileStreamFactory => () => fs.createReadStream(filePath),\n    fileSizeFactory => () => fileSize,\n  });\n  // upload complete!\n  console.log(\'Successfully upload data item!\', { id, owner, dataCaches, fastFinalityIndexes });\n} catch (error) {\n  // upload failed\n  console.error(\'Failed to upload data item!\', error);\n} finally {\n  const { winc: newBalance } = await turbo.getBalance();\n  console.log(\'New balance:\', newBalance);\n}\n\n\n\n# Usage\n\nThe SDK is provided in both CommonJS and ESM formats, and it\'s compatible with bundlers such as Webpack, Rollup, and ESbuild. Utilize the appropriate named exports provided by this SDK\'s package.json based on your project\'s configuration. Refer to the examples directory to see how to use the SDK in various environments.\n\n\n# Web\n\n# Bundlers (Webpack, Rollup, ESbuild, etc.)\n\nCommonJS:\n\nimport { TurboFactory } from "@ardrive/turbo-sdk";\n\nconst turbo = TurboFactory.unauthenticated();\nconst rates = await turbo.getFiatRates();\n\n\nESM:\n\nimport { TurboFactory } from "@ardrive/turbo-sdk/<node/web>";\n\nconst turbo = TurboFactory.unauthenticated();\nconst rates = await turbo.getFiatRates();\n\n\nBrowser:\n\n<script type="module">\n  import { TurboFactory } from "https://unpkg.com/@ardrive/turbo-sdk";\n\n  const turbo = TurboFactory.unauthenticated();\n  const rates = await turbo.getFiatRates();\n<\/script>\n\n\n\n# NodeJS\n\n# CommonJS\n\nProject\'s package.json:\n\n{\n  "type": "commonjs",\n  "scripts": {\n    "test": "ts-node ./index.ts"\n  },\n  "dependencies": {\n    "@ardrive/turbo-sdk": "latest",\n    "arweave": "^1.14.4",\n    "typescript": "^5.4.2"\n  },\n  "devDependencies": {\n    "ts-node": "^10.9.2"\n  }\n}\n\n\nProject\'s tsconfig.json:\n\n{\n  "compilerOptions": {\n    "module": "CommonJS",\n    "moduleResolution": "node",\n    "target": "ES2021",\n    "esModuleInterop": true\n  },\n  "include": ["./index.ts"],\n  "exclude": ["node_modules"]\n}\n\n\nUsage:\n\nimport {\n  TurboFactory,\n  USD,\n  WinstonToTokenAmount,\n  developmentTurboConfiguration,\n} from "@ardrive/turbo-sdk";\nimport Arweave from "arweave";\nimport fs from "fs";\nimport path from "path";\n\n(async () => {\n  /**\n   * Generate a key from the arweave wallet.\n   */\n  const arweave = new Arweave({});\n  const jwk = await arweave.wallets.generate();\n  /**\n   * Use the arweave key to create an authenticated turbo client\n   */\n  const turboAuthClient = TurboFactory.authenticated({\n    privateKey: jwk,\n    ...developmentTurboConfiguration,\n  });\n\n  /**\n   * Fetch the balance for the private key.\n   */\n  const balance = await turboAuthClient.getBalance();\n  console.log("Balance:", balance);\n\n  /**\n   * Fetch the estimated amount of winc returned for 10 USD (1000 cents).\n   */\n  const estimatedWinc = await turboAuthClient.getWincForFiat({\n    amount: USD(10),\n  });\n  console.log("10 USD to winc:", estimatedWinc);\n\n  /**\n   * Post local files to the Turbo service.\n   */\n  console.log("Posting raw file to Turbo service...");\n  const filePath = path.join(__dirname, "../../files/1KB_file");\n  const fileSize = fs.statSync(filePath).size;\n  const uploadResult = await turboAuthClient.uploadFile({\n    fileStreamFactory: () => fs.createReadStream(filePath),\n    fileSizeFactory: () => fileSize,\n    signal: AbortSignal.timeout(10_000), // cancel the upload after 10 seconds\n  });\n  console.log(JSON.stringify(uploadResult, null, 2));\n\n  /**\n   * Tops up a wallet with Credits using tokens.\n   * Default token is AR, using Winston as the unit.\n   */\n  const topUpResult = await turboAuthClient.topUpWithTokens({\n    tokenAmount: WinstonToTokenAmount(100_000_000), // 0.0001 AR\n  });\n  console.log(JSON.stringify(topUpResult, null, 2));\n})();\n\n\n# ESM\n\nProject\'s package.json:\n\n{\n  "type": "module",\n  "scripts": {\n    "test": "ts-node ./index.ts"\n  },\n  "dependencies": {\n    "@ardrive/turbo-sdk": "latest",\n    "arweave": "^1.14.4"\n  },\n  "devDependencies": {\n    "ts-node": "^10.9.2"\n  }\n}\n\n\nProject\'s tsconfig.json:\n\n{\n  "compilerOptions": {\n    "module": "NodeNext",\n    "moduleResolution": "NodeNext",\n    "target": "ESNext"\n  },\n  "include": ["./index.ts"],\n  "exclude": ["node_modules"],\n  "ts-node": {\n    "esm": true\n  }\n}\n\n\nUsage:\n\n// or use @ardrive/turbo-sdk/web depending on your environment\nimport {\n  TurboFactory,\n  USD,\n  WinstonToTokenAmount,\n  developmentTurboConfiguration,\n} from "@ardrive/turbo-sdk/node";\nimport Arweave from "arweave";\nimport fs from "fs";\n\n(async () => {\n  /**\n   * Generate a key from the arweave wallet.\n   */\n  const arweave = new Arweave({});\n  const jwk = await arweave.wallets.generate();\n  /**\n   * Use the arweave key to create an authenticated turbo client\n   */\n  const turboAuthClient = TurboFactory.authenticated({\n    privateKey: jwk,\n    ...developmentTurboConfiguration,\n  });\n\n  /**\n   * Fetch the balance for the private key.\n   */\n  const balance = await turboAuthClient.getBalance();\n  console.log("Balance:", balance);\n\n  /**\n   * Fetch the estimated amount of winc returned for 10 USD (1000 cents).\n   */\n  const estimatedWinc = await turboAuthClient.getWincForFiat({\n    amount: USD(10),\n  });\n  console.log("10 USD to winc:", estimatedWinc);\n\n  /**\n   * Post local files to the Turbo service.\n   */\n  console.log("Posting raw file to Turbo service...");\n  const filePath = new URL("../../files/1KB_file", import.meta.url).pathname;\n  const fileSize = fs.statSync(filePath).size;\n  const uploadResult = await turboAuthClient.uploadFile({\n    fileStreamFactory: () => fs.createReadStream(filePath),\n    fileSizeFactory: () => fileSize,\n    signal: AbortSignal.timeout(10_000), // cancel the upload after 10 seconds\n  });\n  console.log(JSON.stringify(uploadResult, null, 2));\n\n  /**\n   * Tops up a wallet with Credits using tokens.\n   * Default token is AR, using Winston as the unit.\n   */\n  const topUpResult = await turboAuthClient.topUpWithTokens({\n    tokenAmount: WinstonToTokenAmount(100_000_000), // 0.0001 AR\n  });\n  console.log(JSON.stringify(topUpResult, null, 2));\n})();\n\n\n\n# Typescript\n\nThe SDK provides TypeScript types. When you import the SDK in a TypeScript project:\n\nimport { TurboFactory } from "@ardrive/turbo-sdk/web";\n\n// or \'@ardrive/turbo-sdk/node\' for Node.js projects\n\n\nTypes are exported from ./lib/types/[node/web]/index.d.ts and should be automatically recognized, offering benefits such as type-checking and autocompletion.\n\nExamples:\n\nExamples are available in the examples directory. To run examples:\n\n * yarn example:web - opens up the example web page\n * yarn example:cjs - runs example CJS node script\n * yarn example:esm - runs example ESM node script\n\n\n# APIs\n\n\n# TurboFactory\n\n# unauthenticated()\n\n * Creates an instance of a client that accesses Turbo\'s unauthenticated services.\n   \n   const turbo = TurboFactory.unauthenticated();\n   \n\n# authenticated()\n\nCreates an instance of a client that accesses Turbo\'s authenticated and unauthenticated services. Requires either a signer, or private key to be provided.\n\n * Construct Turbo with an Arweave JWK\n   \n   const jwk = await arweave.crypto.generateJWK();\n   const turbo = TurboFactory.authenticated({ privateKey: jwk });\n   \n\n * Construct Turbo with an Arweave signer\n   \n   const signer = new ArweaveSigner(jwk);\n   const turbo = TurboFactory.authenticated({ signer });\n   \n\n * Construct Turbo with an Arconnect signer\n   \n   const signer = new ArweaveSigner(jwk);\n   const turbo = TurboFactory.authenticated({ signer });\n   \n\n * Construct Turbo with an ETH signer\n   \n   const signer = new ArconnectSigner(window.arweaveWallet);\n   const turbo = TurboFactory.authenticated({ signer });\n   \n\n * Construct Turbo with an ETH private key\n   \n   const turbo = TurboFactory.authenticated({\n     privateKey: ethHexadecimalPrivateKey,\n     token: "ethereum",\n   });\n   \n\n * Construct Turbo with a SOL signer\n   \n   const signer = new HexSolanaSigner(bs58.encode(secretKey));\n   const turbo = TurboFactory.authenticated({ signer });\n   \n\n * Construct Turbo with a SOL secret Key\n   \n   const turbo = TurboFactory.authenticated({\n     privateKey: bs58.encode(secretKey),\n     token: "solana",\n   });\n   \n\n\n# TurboUnauthenticatedClient\n\n# getSupportedCurrencies()\n\n * Returns the list of currencies supported by the Turbo Payment Service for topping up a user balance of AR Credits (measured in Winston Credits, or winc).\n   \n   const currencies = await turbo.getSupportedCurrencies();\n   \n\n# getSupportedCountries()\n\n * Returns the list of countries supported by the Turbo Payment Service\'s top up workflow.\n   \n   const countries = await turbo.getSupportedCountries();\n   \n\n# getFiatToAR({ currency })\n\n * Returns the current raw fiat to AR conversion rate for a specific currency as reported by third-party pricing oracles.\n   \n   const fiatToAR = await turbo.getFiatToAR({ currency: "USD" });\n   \n\n# getFiatRates()\n\n * Returns the current fiat rates for 1 GiB of data for supported currencies, including all top-up adjustments and fees.\n   \n   const rates = await turbo.getFiatRates();\n   \n\n# getWincForFiat({ amount })\n\n * Returns the current amount of Winston Credits including all adjustments for the provided fiat currency, amount. To leverage promo codes, see TurboAuthenticatedClient.\n   \n   const { winc, paymentAmount, quotedPaymentAmount, adjustments } =\n     await turbo.getWincForFiat({\n       amount: USD(100),\n       // promo codes require an authenticated client\n     });\n   \n\n# getUploadCosts({ bytes })\n\n * Returns the estimated cost in Winston Credits for the provided file sizes, including all upload adjustments and fees.\n   \n   const [uploadCostForFile] = await turbo.getUploadCosts({ bytes: [1024] });\n   const { winc, adjustments } = uploadCostForFile;\n   \n\n# uploadSignedDataItem({ dataItemStreamFactory, dataItemSizeFactory, signal })\n\n * Uploads a signed data item. The provided dataItemStreamFactory should produce a NEW signed data item stream each time is it invoked. The dataItemSizeFactory is a function that returns the size of the file. The signal is an optional AbortSignal that can be used to cancel the upload or timeout the request.\n   \n   const filePath = path.join(__dirname, "./my-signed-data-item");\n   const dataItemSize = fs.statSync(filePath).size;\n   const uploadResponse = await turbo.uploadSignedDataItem({\n     dataItemStreamFactory: () => fs.createReadStream(filePath),\n     dataItemSizeFactory: () => dataItemSize,\n     signal: AbortSignal.timeout(10_000), // cancel the upload after 10 seconds\n   });\n   \n\n# createCheckoutSession({ amount, owner })\n\n * Creates a Stripe checkout session for a Turbo Top Up with the provided amount, currency, owner. The returned URL can be opened in the browser, all payments are processed by Stripe. To leverage promo codes, see TurboAuthenticatedClient.\n   \n   const { url, winc, paymentAmount, quotedPaymentAmount, adjustments } =\n     await turbo.createCheckoutSession({\n       amount: USD(10.0), // $10.00 USD\n       owner: publicArweaveAddress,\n       // promo codes require an authenticated client\n     });\n   \n   // Open checkout session in a browser\n   if (process.platform === "darwin") {\n     // macOS\n     exec(`open ${url}`);\n   } else if (process.platform === "win32") {\n     // Windows\n     exec(`start "" "${url}"`, { shell: true });\n   } else {\n     // Linux/Unix\n     open(url);\n   }\n   \n\n * Top up to ETH or SOL wallets\n   \n   const turbo = TurboFactory.unauthenticated({ token: "ethereum" });\n   \n   const { url, winc, paymentAmount } = await turbo.createCheckoutSession({\n     amount: USD(10.0), // $10.00 USD\n     owner: publicEthereumAddress,\n   });\n   \n   \n   const turbo = TurboFactory.unauthenticated({ token: "solana" });\n   \n   const { url, winc, paymentAmount } = await turbo.createCheckoutSession({\n     amount: USD(10.0), // $10.00 USD\n     owner: publicSolanaAddress,\n   });\n   \n\n# submitFundTransaction({ txId})\n\n * Submits the transaction ID of a funding transaction to Turbo Payment Service for top up processing. The txId is the transaction ID of the transaction to be submitted.\n   \n   * Note: use this API if you\'ve already executed your token transfer to the Turbo wallet. Otherwise, consider using topUpWithTokens to execute a new token transfer to the Turbo wallet and submit its resulting transaction ID for top up processing all in one go.\n   \n   const turbo = TurboFactory.unauthenticated(); // defaults to arweave token type\n   const { status, id, ...fundResult } = await turbo.submitFundTransaction({\n     txId: "my-valid-arweave-fund-transaction-id",\n   });\n   \n\n\n# TurboAuthenticatedClient\n\n# getBalance()\n\n * Issues a signed request to get the credit balance of a wallet measured in AR (measured in Winston Credits, or winc).\n   \n   const { winc: balance } = await turbo.getBalance();\n   \n\n# getWincForFiat({ amount, promoCodes })\n\n * Returns the current amount of Winston Credits including all adjustments for the provided fiat currency, amount, and optional promo codes.\n   \n   const { winc, paymentAmount, quotedPaymentAmount, adjustments } =\n     await turbo.getWincForFiat({\n       amount: USD(100),\n       promoCodes: ["MY_PROMO_CODE"], // promo codes require an authenticated client\n     });\n   \n\n# createCheckoutSession({ amount, owner, promoCodes })\n\n * Creates a Stripe checkout session for a Turbo Top Up with the provided amount, currency, owner, and optional promo codes. The returned URL can be opened in the browser, all payments are processed by Stripe. Promo codes require an authenticated client.\n   \n   const { url, winc, paymentAmount, quotedPaymentAmount, adjustments } =\n     await turbo.createCheckoutSession({\n       amount: USD(10.0), // $10.00 USD\n       owner: publicArweaveAddress,\n       promoCodes: ["MY_PROMO_CODE"], // promo codes require an authenticated client\n     });\n   \n   // Open checkout session in a browser\n   if (process.platform === "darwin") {\n     // macOS\n     exec(`open ${url}`);\n   } else if (process.platform === "win32") {\n     // Windows\n     exec(`start "" "${url}"`, { shell: true });\n   } else {\n     // Linux/Unix\n     open(url);\n   }\n   \n\n# uploadFile({ fileStreamFactory, fileSizeFactory, signal })\n\n * Signs and uploads a raw file. The provided fileStreamFactory should produce a NEW file data stream each time is it invoked. The fileSizeFactory is a function that returns the size of the file. The signal is an optional AbortSignal that can be used to cancel the upload or timeout the request. dataItemOpts is an optional object that can be used to configure tags, target, and anchor for the data item upload.\n   \n   const filePath = path.join(__dirname, "./my-unsigned-file.txt");\n   const fileSize = fs.stateSync(filePath).size;\n   const uploadResult = await turbo.uploadFile({\n     fileStreamFactory: () => fs.createReadStream(filePath),\n     fileSizeFactory: () => fileSize,\n     dataItemOpts: {\n       // optional\n       tags: [\n         {\n           name: "Content-Type",\n           value: "text/plain",\n         },\n         {\n           name: "My-Custom-Tag",\n           value: "my-custom-value",\n         },\n       ],\n       // no timeout or AbortSignal provided\n     },\n   });\n   \n\n# topUpWithTokens({ tokenAmount, feeMultiplier })\n\n * Tops up the connected wallet with Credits by submitting a payment transaction for the token amount to the Turbo wallet and then submitting that transaction ID to Turbo Payment Service for top up processing.\n   \n   * The tokenAmount is the amount of tokens in the token type\'s smallest unit value (e.g: Winston for arweave token type) to fund the wallet with.\n     * Note: As of release 1.5.0, only AR tokens are supported with topUpWithTokens.\n   * The feeMultiplier (optional) is the multiplier to apply to the reward for the transaction to modify its chances of being mined. Credits will be added to the wallet balance after the transaction is confirmed on the given blockchain. Defaults to 1.0, meaning no multiplier.\n   \n   const turbo = TurboFactory.authenticated({ signer, token: "arweave" });\n   const { winc, status, id, ...fundResult } = await turbo.topUpWithTokens({\n     tokenAmount: WinstonToTokenAmount(100_000_000), // 0.0001 AR\n     feeMultiplier: 1.1, // 10% increase in reward for improved mining chances\n   });\n   \n\n * Top up ETH tokens to ETH wallet\n   \n   const turbo = TurboFactory.authenticated({ signer, token: "ethereum" });\n   \n   const { winc, status, id, ...fundResult } = await turbo.topUpWithTokens({\n     tokenAmount: ETHToTokenAmount(0.00001), // 0.00001 ETH\n   });\n   \n\n * Top up Sol tokens to SOL wallet\n   \n   const turbo = TurboFactory.authenticated({ signer, token: "solana" });\n   \n   const { winc, status, id, ...fundResult } = await turbo.topUpWithTokens({\n     tokenAmount: SOLToTokenAmount(0.00001), // 0.00001 SOL\n   });\n   \n\n\n# Developers\n\n\n# Requirements\n\n * nvm\n * node (>= 18)\n * yarn\n\n\n# Setup & Build\n\n * yarn install - installs dependencies\n * yarn build - builds web/node/bundled outputs\n\n\n# Testing\n\n * yarn test - runs integration tests against dev environment (e.g. https://payment.ardrive.dev and https://upload.ardrive.dev)\n * yarn test:docker - runs integration tests against locally running docker containers (recommended)\n * yarn example:web - opens up the example web page\n * yarn example:cjs - runs example CJS node script\n * yarn example:esm - runs example ESM node script\n\n\n# Linting & Formatting\n\n * yarn lint:check - checks for linting errors\n * yarn lint:fix - fixes linting errors\n * yarn format:check - checks for formatting errors\n * yarn format:fix - fixes formatting errors\n\n\n# Architecture\n\n * Code to interfaces.\n * Prefer type safety over runtime safety.\n * Prefer composition over inheritance.\n * Prefer integration tests over unit tests.\n\n\n# Contributions\n\nIf you encounter any issues or have feature requests, please file an issue on our GitHub repository. Contributions, pull requests, and feedback are both welcome and encouraged.\n\nFor more information on how to contribute, please see CONTRIBUTING.md.',normalizedContent:'# @ardriveapp/turbo-sdk 🚀\n\nwelcome to the @ardrive/turbo-sdk! this sdk provides functionality for interacting with the turbo upload and payment services and is available for both nodejs and web environments.\n\n\n# installation\n\nnpm install @ardrive/turbo-sdk\n\n\nor\n\nyarn add @ardrive/turbo-sdk\n\n\n\n# quick start\n\nimport { turbofactory, arweavesigner } from \'@ardrive/turbo-sdk\';\n\n// load your jwk directly to authenticate\nconst jwk = fs.readfilesync(\'./my-jwk.json\');\nconst address = arweave.wallets.jwktoaddress(jwk);\nconst turbo = turbofactory.authenticated({ privatekey: jwk });\n\n// or provide your own signer\nconst signer = new arweavesigner(jwk);\nconst turbo = turbofactory.authenticated({ signer });\n\n// get the wallet balance\nconst { winc: balance } = await turbo.getbalance();\n\n// prep file for upload\nconst filepath = path.join(__dirname, \'./my-image.png\');\nconst filesize = fs.statsync(filepath).size;\n\n// get the cost of uploading the file\nconst [{ winc: filesizecost }] = await turbo.getuploadcosts({\n  bytes: [filesize],\n});\n\n// check if balance greater than upload cost\nif (balance < filesizecost) {\n  const { url } = await turbo.createcheckoutsession({\n    amount: filesizecost,\n    owner: address,\n    // add a promo code if you have one\n  });\n  // open the url to top-up, continue when done\n  open(url);\n  return;\n}\n\n// upload the file\ntry {\n  const { id, owner, datacaches, fastfinalityindexes } = await turbo.uploadfile(() => {\n    filestreamfactory => () => fs.createreadstream(filepath),\n    filesizefactory => () => filesize,\n  });\n  // upload complete!\n  console.log(\'successfully upload data item!\', { id, owner, datacaches, fastfinalityindexes });\n} catch (error) {\n  // upload failed\n  console.error(\'failed to upload data item!\', error);\n} finally {\n  const { winc: newbalance } = await turbo.getbalance();\n  console.log(\'new balance:\', newbalance);\n}\n\n\n\n# usage\n\nthe sdk is provided in both commonjs and esm formats, and it\'s compatible with bundlers such as webpack, rollup, and esbuild. utilize the appropriate named exports provided by this sdk\'s package.json based on your project\'s configuration. refer to the examples directory to see how to use the sdk in various environments.\n\n\n# web\n\n# bundlers (webpack, rollup, esbuild, etc.)\n\ncommonjs:\n\nimport { turbofactory } from "@ardrive/turbo-sdk";\n\nconst turbo = turbofactory.unauthenticated();\nconst rates = await turbo.getfiatrates();\n\n\nesm:\n\nimport { turbofactory } from "@ardrive/turbo-sdk/<node/web>";\n\nconst turbo = turbofactory.unauthenticated();\nconst rates = await turbo.getfiatrates();\n\n\nbrowser:\n\n<script type="module">\n  import { turbofactory } from "https://unpkg.com/@ardrive/turbo-sdk";\n\n  const turbo = turbofactory.unauthenticated();\n  const rates = await turbo.getfiatrates();\n<\/script>\n\n\n\n# nodejs\n\n# commonjs\n\nproject\'s package.json:\n\n{\n  "type": "commonjs",\n  "scripts": {\n    "test": "ts-node ./index.ts"\n  },\n  "dependencies": {\n    "@ardrive/turbo-sdk": "latest",\n    "arweave": "^1.14.4",\n    "typescript": "^5.4.2"\n  },\n  "devdependencies": {\n    "ts-node": "^10.9.2"\n  }\n}\n\n\nproject\'s tsconfig.json:\n\n{\n  "compileroptions": {\n    "module": "commonjs",\n    "moduleresolution": "node",\n    "target": "es2021",\n    "esmoduleinterop": true\n  },\n  "include": ["./index.ts"],\n  "exclude": ["node_modules"]\n}\n\n\nusage:\n\nimport {\n  turbofactory,\n  usd,\n  winstontotokenamount,\n  developmentturboconfiguration,\n} from "@ardrive/turbo-sdk";\nimport arweave from "arweave";\nimport fs from "fs";\nimport path from "path";\n\n(async () => {\n  /**\n   * generate a key from the arweave wallet.\n   */\n  const arweave = new arweave({});\n  const jwk = await arweave.wallets.generate();\n  /**\n   * use the arweave key to create an authenticated turbo client\n   */\n  const turboauthclient = turbofactory.authenticated({\n    privatekey: jwk,\n    ...developmentturboconfiguration,\n  });\n\n  /**\n   * fetch the balance for the private key.\n   */\n  const balance = await turboauthclient.getbalance();\n  console.log("balance:", balance);\n\n  /**\n   * fetch the estimated amount of winc returned for 10 usd (1000 cents).\n   */\n  const estimatedwinc = await turboauthclient.getwincforfiat({\n    amount: usd(10),\n  });\n  console.log("10 usd to winc:", estimatedwinc);\n\n  /**\n   * post local files to the turbo service.\n   */\n  console.log("posting raw file to turbo service...");\n  const filepath = path.join(__dirname, "../../files/1kb_file");\n  const filesize = fs.statsync(filepath).size;\n  const uploadresult = await turboauthclient.uploadfile({\n    filestreamfactory: () => fs.createreadstream(filepath),\n    filesizefactory: () => filesize,\n    signal: abortsignal.timeout(10_000), // cancel the upload after 10 seconds\n  });\n  console.log(json.stringify(uploadresult, null, 2));\n\n  /**\n   * tops up a wallet with credits using tokens.\n   * default token is ar, using winston as the unit.\n   */\n  const topupresult = await turboauthclient.topupwithtokens({\n    tokenamount: winstontotokenamount(100_000_000), // 0.0001 ar\n  });\n  console.log(json.stringify(topupresult, null, 2));\n})();\n\n\n# esm\n\nproject\'s package.json:\n\n{\n  "type": "module",\n  "scripts": {\n    "test": "ts-node ./index.ts"\n  },\n  "dependencies": {\n    "@ardrive/turbo-sdk": "latest",\n    "arweave": "^1.14.4"\n  },\n  "devdependencies": {\n    "ts-node": "^10.9.2"\n  }\n}\n\n\nproject\'s tsconfig.json:\n\n{\n  "compileroptions": {\n    "module": "nodenext",\n    "moduleresolution": "nodenext",\n    "target": "esnext"\n  },\n  "include": ["./index.ts"],\n  "exclude": ["node_modules"],\n  "ts-node": {\n    "esm": true\n  }\n}\n\n\nusage:\n\n// or use @ardrive/turbo-sdk/web depending on your environment\nimport {\n  turbofactory,\n  usd,\n  winstontotokenamount,\n  developmentturboconfiguration,\n} from "@ardrive/turbo-sdk/node";\nimport arweave from "arweave";\nimport fs from "fs";\n\n(async () => {\n  /**\n   * generate a key from the arweave wallet.\n   */\n  const arweave = new arweave({});\n  const jwk = await arweave.wallets.generate();\n  /**\n   * use the arweave key to create an authenticated turbo client\n   */\n  const turboauthclient = turbofactory.authenticated({\n    privatekey: jwk,\n    ...developmentturboconfiguration,\n  });\n\n  /**\n   * fetch the balance for the private key.\n   */\n  const balance = await turboauthclient.getbalance();\n  console.log("balance:", balance);\n\n  /**\n   * fetch the estimated amount of winc returned for 10 usd (1000 cents).\n   */\n  const estimatedwinc = await turboauthclient.getwincforfiat({\n    amount: usd(10),\n  });\n  console.log("10 usd to winc:", estimatedwinc);\n\n  /**\n   * post local files to the turbo service.\n   */\n  console.log("posting raw file to turbo service...");\n  const filepath = new url("../../files/1kb_file", import.meta.url).pathname;\n  const filesize = fs.statsync(filepath).size;\n  const uploadresult = await turboauthclient.uploadfile({\n    filestreamfactory: () => fs.createreadstream(filepath),\n    filesizefactory: () => filesize,\n    signal: abortsignal.timeout(10_000), // cancel the upload after 10 seconds\n  });\n  console.log(json.stringify(uploadresult, null, 2));\n\n  /**\n   * tops up a wallet with credits using tokens.\n   * default token is ar, using winston as the unit.\n   */\n  const topupresult = await turboauthclient.topupwithtokens({\n    tokenamount: winstontotokenamount(100_000_000), // 0.0001 ar\n  });\n  console.log(json.stringify(topupresult, null, 2));\n})();\n\n\n\n# typescript\n\nthe sdk provides typescript types. when you import the sdk in a typescript project:\n\nimport { turbofactory } from "@ardrive/turbo-sdk/web";\n\n// or \'@ardrive/turbo-sdk/node\' for node.js projects\n\n\ntypes are exported from ./lib/types/[node/web]/index.d.ts and should be automatically recognized, offering benefits such as type-checking and autocompletion.\n\nexamples:\n\nexamples are available in the examples directory. to run examples:\n\n * yarn example:web - opens up the example web page\n * yarn example:cjs - runs example cjs node script\n * yarn example:esm - runs example esm node script\n\n\n# apis\n\n\n# turbofactory\n\n# unauthenticated()\n\n * creates an instance of a client that accesses turbo\'s unauthenticated services.\n   \n   const turbo = turbofactory.unauthenticated();\n   \n\n# authenticated()\n\ncreates an instance of a client that accesses turbo\'s authenticated and unauthenticated services. requires either a signer, or private key to be provided.\n\n * construct turbo with an arweave jwk\n   \n   const jwk = await arweave.crypto.generatejwk();\n   const turbo = turbofactory.authenticated({ privatekey: jwk });\n   \n\n * construct turbo with an arweave signer\n   \n   const signer = new arweavesigner(jwk);\n   const turbo = turbofactory.authenticated({ signer });\n   \n\n * construct turbo with an arconnect signer\n   \n   const signer = new arweavesigner(jwk);\n   const turbo = turbofactory.authenticated({ signer });\n   \n\n * construct turbo with an eth signer\n   \n   const signer = new arconnectsigner(window.arweavewallet);\n   const turbo = turbofactory.authenticated({ signer });\n   \n\n * construct turbo with an eth private key\n   \n   const turbo = turbofactory.authenticated({\n     privatekey: ethhexadecimalprivatekey,\n     token: "ethereum",\n   });\n   \n\n * construct turbo with a sol signer\n   \n   const signer = new hexsolanasigner(bs58.encode(secretkey));\n   const turbo = turbofactory.authenticated({ signer });\n   \n\n * construct turbo with a sol secret key\n   \n   const turbo = turbofactory.authenticated({\n     privatekey: bs58.encode(secretkey),\n     token: "solana",\n   });\n   \n\n\n# turbounauthenticatedclient\n\n# getsupportedcurrencies()\n\n * returns the list of currencies supported by the turbo payment service for topping up a user balance of ar credits (measured in winston credits, or winc).\n   \n   const currencies = await turbo.getsupportedcurrencies();\n   \n\n# getsupportedcountries()\n\n * returns the list of countries supported by the turbo payment service\'s top up workflow.\n   \n   const countries = await turbo.getsupportedcountries();\n   \n\n# getfiattoar({ currency })\n\n * returns the current raw fiat to ar conversion rate for a specific currency as reported by third-party pricing oracles.\n   \n   const fiattoar = await turbo.getfiattoar({ currency: "usd" });\n   \n\n# getfiatrates()\n\n * returns the current fiat rates for 1 gib of data for supported currencies, including all top-up adjustments and fees.\n   \n   const rates = await turbo.getfiatrates();\n   \n\n# getwincforfiat({ amount })\n\n * returns the current amount of winston credits including all adjustments for the provided fiat currency, amount. to leverage promo codes, see turboauthenticatedclient.\n   \n   const { winc, paymentamount, quotedpaymentamount, adjustments } =\n     await turbo.getwincforfiat({\n       amount: usd(100),\n       // promo codes require an authenticated client\n     });\n   \n\n# getuploadcosts({ bytes })\n\n * returns the estimated cost in winston credits for the provided file sizes, including all upload adjustments and fees.\n   \n   const [uploadcostforfile] = await turbo.getuploadcosts({ bytes: [1024] });\n   const { winc, adjustments } = uploadcostforfile;\n   \n\n# uploadsigneddataitem({ dataitemstreamfactory, dataitemsizefactory, signal })\n\n * uploads a signed data item. the provided dataitemstreamfactory should produce a new signed data item stream each time is it invoked. the dataitemsizefactory is a function that returns the size of the file. the signal is an optional abortsignal that can be used to cancel the upload or timeout the request.\n   \n   const filepath = path.join(__dirname, "./my-signed-data-item");\n   const dataitemsize = fs.statsync(filepath).size;\n   const uploadresponse = await turbo.uploadsigneddataitem({\n     dataitemstreamfactory: () => fs.createreadstream(filepath),\n     dataitemsizefactory: () => dataitemsize,\n     signal: abortsignal.timeout(10_000), // cancel the upload after 10 seconds\n   });\n   \n\n# createcheckoutsession({ amount, owner })\n\n * creates a stripe checkout session for a turbo top up with the provided amount, currency, owner. the returned url can be opened in the browser, all payments are processed by stripe. to leverage promo codes, see turboauthenticatedclient.\n   \n   const { url, winc, paymentamount, quotedpaymentamount, adjustments } =\n     await turbo.createcheckoutsession({\n       amount: usd(10.0), // $10.00 usd\n       owner: publicarweaveaddress,\n       // promo codes require an authenticated client\n     });\n   \n   // open checkout session in a browser\n   if (process.platform === "darwin") {\n     // macos\n     exec(`open ${url}`);\n   } else if (process.platform === "win32") {\n     // windows\n     exec(`start "" "${url}"`, { shell: true });\n   } else {\n     // linux/unix\n     open(url);\n   }\n   \n\n * top up to eth or sol wallets\n   \n   const turbo = turbofactory.unauthenticated({ token: "ethereum" });\n   \n   const { url, winc, paymentamount } = await turbo.createcheckoutsession({\n     amount: usd(10.0), // $10.00 usd\n     owner: publicethereumaddress,\n   });\n   \n   \n   const turbo = turbofactory.unauthenticated({ token: "solana" });\n   \n   const { url, winc, paymentamount } = await turbo.createcheckoutsession({\n     amount: usd(10.0), // $10.00 usd\n     owner: publicsolanaaddress,\n   });\n   \n\n# submitfundtransaction({ txid})\n\n * submits the transaction id of a funding transaction to turbo payment service for top up processing. the txid is the transaction id of the transaction to be submitted.\n   \n   * note: use this api if you\'ve already executed your token transfer to the turbo wallet. otherwise, consider using topupwithtokens to execute a new token transfer to the turbo wallet and submit its resulting transaction id for top up processing all in one go.\n   \n   const turbo = turbofactory.unauthenticated(); // defaults to arweave token type\n   const { status, id, ...fundresult } = await turbo.submitfundtransaction({\n     txid: "my-valid-arweave-fund-transaction-id",\n   });\n   \n\n\n# turboauthenticatedclient\n\n# getbalance()\n\n * issues a signed request to get the credit balance of a wallet measured in ar (measured in winston credits, or winc).\n   \n   const { winc: balance } = await turbo.getbalance();\n   \n\n# getwincforfiat({ amount, promocodes })\n\n * returns the current amount of winston credits including all adjustments for the provided fiat currency, amount, and optional promo codes.\n   \n   const { winc, paymentamount, quotedpaymentamount, adjustments } =\n     await turbo.getwincforfiat({\n       amount: usd(100),\n       promocodes: ["my_promo_code"], // promo codes require an authenticated client\n     });\n   \n\n# createcheckoutsession({ amount, owner, promocodes })\n\n * creates a stripe checkout session for a turbo top up with the provided amount, currency, owner, and optional promo codes. the returned url can be opened in the browser, all payments are processed by stripe. promo codes require an authenticated client.\n   \n   const { url, winc, paymentamount, quotedpaymentamount, adjustments } =\n     await turbo.createcheckoutsession({\n       amount: usd(10.0), // $10.00 usd\n       owner: publicarweaveaddress,\n       promocodes: ["my_promo_code"], // promo codes require an authenticated client\n     });\n   \n   // open checkout session in a browser\n   if (process.platform === "darwin") {\n     // macos\n     exec(`open ${url}`);\n   } else if (process.platform === "win32") {\n     // windows\n     exec(`start "" "${url}"`, { shell: true });\n   } else {\n     // linux/unix\n     open(url);\n   }\n   \n\n# uploadfile({ filestreamfactory, filesizefactory, signal })\n\n * signs and uploads a raw file. the provided filestreamfactory should produce a new file data stream each time is it invoked. the filesizefactory is a function that returns the size of the file. the signal is an optional abortsignal that can be used to cancel the upload or timeout the request. dataitemopts is an optional object that can be used to configure tags, target, and anchor for the data item upload.\n   \n   const filepath = path.join(__dirname, "./my-unsigned-file.txt");\n   const filesize = fs.statesync(filepath).size;\n   const uploadresult = await turbo.uploadfile({\n     filestreamfactory: () => fs.createreadstream(filepath),\n     filesizefactory: () => filesize,\n     dataitemopts: {\n       // optional\n       tags: [\n         {\n           name: "content-type",\n           value: "text/plain",\n         },\n         {\n           name: "my-custom-tag",\n           value: "my-custom-value",\n         },\n       ],\n       // no timeout or abortsignal provided\n     },\n   });\n   \n\n# topupwithtokens({ tokenamount, feemultiplier })\n\n * tops up the connected wallet with credits by submitting a payment transaction for the token amount to the turbo wallet and then submitting that transaction id to turbo payment service for top up processing.\n   \n   * the tokenamount is the amount of tokens in the token type\'s smallest unit value (e.g: winston for arweave token type) to fund the wallet with.\n     * note: as of release 1.5.0, only ar tokens are supported with topupwithtokens.\n   * the feemultiplier (optional) is the multiplier to apply to the reward for the transaction to modify its chances of being mined. credits will be added to the wallet balance after the transaction is confirmed on the given blockchain. defaults to 1.0, meaning no multiplier.\n   \n   const turbo = turbofactory.authenticated({ signer, token: "arweave" });\n   const { winc, status, id, ...fundresult } = await turbo.topupwithtokens({\n     tokenamount: winstontotokenamount(100_000_000), // 0.0001 ar\n     feemultiplier: 1.1, // 10% increase in reward for improved mining chances\n   });\n   \n\n * top up eth tokens to eth wallet\n   \n   const turbo = turbofactory.authenticated({ signer, token: "ethereum" });\n   \n   const { winc, status, id, ...fundresult } = await turbo.topupwithtokens({\n     tokenamount: ethtotokenamount(0.00001), // 0.00001 eth\n   });\n   \n\n * top up sol tokens to sol wallet\n   \n   const turbo = turbofactory.authenticated({ signer, token: "solana" });\n   \n   const { winc, status, id, ...fundresult } = await turbo.topupwithtokens({\n     tokenamount: soltotokenamount(0.00001), // 0.00001 sol\n   });\n   \n\n\n# developers\n\n\n# requirements\n\n * nvm\n * node (>= 18)\n * yarn\n\n\n# setup & build\n\n * yarn install - installs dependencies\n * yarn build - builds web/node/bundled outputs\n\n\n# testing\n\n * yarn test - runs integration tests against dev environment (e.g. https://payment.ardrive.dev and https://upload.ardrive.dev)\n * yarn test:docker - runs integration tests against locally running docker containers (recommended)\n * yarn example:web - opens up the example web page\n * yarn example:cjs - runs example cjs node script\n * yarn example:esm - runs example esm node script\n\n\n# linting & formatting\n\n * yarn lint:check - checks for linting errors\n * yarn lint:fix - fixes linting errors\n * yarn format:check - checks for formatting errors\n * yarn format:fix - fixes formatting errors\n\n\n# architecture\n\n * code to interfaces.\n * prefer type safety over runtime safety.\n * prefer composition over inheritance.\n * prefer integration tests over unit tests.\n\n\n# contributions\n\nif you encounter any issues or have feature requests, please file an issue on our github repository. contributions, pull requests, and feedback are both welcome and encouraged.\n\nfor more information on how to contribute, please see contributing.md.',charsets:{}},{title:"Migrating to Turbo From Irys",frontmatter:{next:!1},regularPath:"/docs/turbo/migrating.html",relativePath:"docs/turbo/migrating.md",key:"v-45095440",path:"/docs/turbo/migrating.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:247},{level:2,title:"Using Irys SDK with Turbo",slug:"using-irys-sdk-with-turbo",normalizedTitle:"using irys sdk with turbo",charIndex:582},{level:2,title:"Using Irys CLI with Turbo",slug:"using-irys-cli-with-turbo",normalizedTitle:"using irys cli with turbo",charIndex:1403},{level:2,title:"Differences",slug:"differences",normalizedTitle:"differences",charIndex:1825},{level:3,title:"Crypto Top Ups / Withdrawals",slug:"crypto-top-ups-withdrawals",normalizedTitle:"crypto top ups / withdrawals",charIndex:1841},{level:2,title:"Wallet Extensions and Providers",slug:"wallet-extensions-and-providers",normalizedTitle:"wallet extensions and providers",charIndex:2116},{level:2,title:"GraphQL",slug:"graphql",normalizedTitle:"graphql",charIndex:2441}],headersStr:"Overview Using Irys SDK with Turbo Using Irys CLI with Turbo Differences Crypto Top Ups / Withdrawals Wallet Extensions and Providers GraphQL",content:'# Migrating to Turbo From Irys\n\nIrys Version Management\n\nThis was tested using Irys SDK v0.1.1 Future versions of the Irys SDK, and by extension the Irys CLI, may introduce breaking changes. It is suggested that developers lock their version.\n\n\n# Overview\n\nIn the interest of maintaining robust and decentralized infrastructure throughout the Arweave community, it is important to provide options and alternatives to single points of potential failure. With this in mind, ArDrive Turbo provides an Irys-compatible API, allowing for simple migrations across services if desired.\n\n\n# Using Irys SDK with Turbo\n\nArDrive Turbo can be selected as the upload method for projects that currently use the Irys SDK by setting the url value to https://turbo.ardrive.io when instantiating the Irys instance:\n\n// import Irys as normal\nimport Irys from "@irys/sdk";\nimport fs from "fs";\n\n// load Arweave wallet\nconst wallet = JSON.parse(\n  fs\n    .readFileSync(\n      "Keyfile.json",\n    )\n    .toString(),\n);\n\nconst init = async () => {\n  const token = "arweave";\n  const irys = new Irys({\n    url: "https://turbo.ardrive.io", // URL of the node you want to connect to, https://turbo.ardrive.io will facilitate upload using ArDrive Turbo.\n    token, // Token used for payment and signing\n    key: wallet, // Arweave wallet\n  });\n\n  const receipt = await irys.upload("file/to/upload");\n  console.log(receipt);\n}\n\n\n\n# Using Irys CLI with Turbo\n\nSelecting Turbo as the upload method using the Irys CLI is similarly simple. https://turbo.ardrive.io can be set as the target node when using the upload or upload-dir CLI commands with the -h flag:\n\nirys upload importantFile.pdf -h https://turbo.ardrive.io --tags superImportant needsPermanence\n\n\nirys upload-dir ./bigFolder -h https://turbo.ardrive.io \n\n\nOther flags may be used as normal\n\n\n# Differences\n\n\n# Crypto Top Ups / Withdrawals\n\nTurbo does not natively support block chains other than Arweave. This means that some features dealing with other chains, like topping up your Irys balance with other coins, or withdrawing from your Irys balance are not currently supported.\n\n\n# Wallet Extensions and Providers\n\nTurbo is not yet designed to interact with wallet extensions and providers that are not a part of the Arweave ecosystem. While the ArDrive Web App does support generating an Arweave wallet from an EVM wallet using Metamask, Turbo cannot facilitate uploading using an EVM wallet directly.\n\n\n# GraphQL\n\nProjects that do claim to allow uploading from non-arweave wallets actually accept payment on their front ends and handle the actual uploading using an Arweave wallet. As such, the owner of an upload will not match the non-arweave wallet address and the upload cannot be found by searching for it in GraphQL. This value can, however, be added as a tag on the upload and searched in that way.',normalizedContent:'# migrating to turbo from irys\n\nirys version management\n\nthis was tested using irys sdk v0.1.1 future versions of the irys sdk, and by extension the irys cli, may introduce breaking changes. it is suggested that developers lock their version.\n\n\n# overview\n\nin the interest of maintaining robust and decentralized infrastructure throughout the arweave community, it is important to provide options and alternatives to single points of potential failure. with this in mind, ardrive turbo provides an irys-compatible api, allowing for simple migrations across services if desired.\n\n\n# using irys sdk with turbo\n\nardrive turbo can be selected as the upload method for projects that currently use the irys sdk by setting the url value to https://turbo.ardrive.io when instantiating the irys instance:\n\n// import irys as normal\nimport irys from "@irys/sdk";\nimport fs from "fs";\n\n// load arweave wallet\nconst wallet = json.parse(\n  fs\n    .readfilesync(\n      "keyfile.json",\n    )\n    .tostring(),\n);\n\nconst init = async () => {\n  const token = "arweave";\n  const irys = new irys({\n    url: "https://turbo.ardrive.io", // url of the node you want to connect to, https://turbo.ardrive.io will facilitate upload using ardrive turbo.\n    token, // token used for payment and signing\n    key: wallet, // arweave wallet\n  });\n\n  const receipt = await irys.upload("file/to/upload");\n  console.log(receipt);\n}\n\n\n\n# using irys cli with turbo\n\nselecting turbo as the upload method using the irys cli is similarly simple. https://turbo.ardrive.io can be set as the target node when using the upload or upload-dir cli commands with the -h flag:\n\nirys upload importantfile.pdf -h https://turbo.ardrive.io --tags superimportant needspermanence\n\n\nirys upload-dir ./bigfolder -h https://turbo.ardrive.io \n\n\nother flags may be used as normal\n\n\n# differences\n\n\n# crypto top ups / withdrawals\n\nturbo does not natively support block chains other than arweave. this means that some features dealing with other chains, like topping up your irys balance with other coins, or withdrawing from your irys balance are not currently supported.\n\n\n# wallet extensions and providers\n\nturbo is not yet designed to interact with wallet extensions and providers that are not a part of the arweave ecosystem. while the ardrive web app does support generating an arweave wallet from an evm wallet using metamask, turbo cannot facilitate uploading using an evm wallet directly.\n\n\n# graphql\n\nprojects that do claim to allow uploading from non-arweave wallets actually accept payment on their front ends and handle the actual uploading using an arweave wallet. as such, the owner of an upload will not match the non-arweave wallet address and the upload cannot be found by searching for it in graphql. this value can, however, be added as a tag on the upload and searched in that way.',charsets:{}},{title:"Turbo SDK Release Notes",frontmatter:{},regularPath:"/docs/turbo/turbo-sdk/release-notes.html",relativePath:"docs/turbo/turbo-sdk/release-notes.md",key:"v-f81e553c",path:"/docs/turbo/turbo-sdk/release-notes.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:30},{level:2,title:"Releases",slug:"releases",normalizedTitle:"releases",charIndex:530},{level:3,title:"1.9.0",slug:"_1-9-0",normalizedTitle:"1.9.0",charIndex:700},{level:3,title:"1.8.0",slug:"_1-8-0",normalizedTitle:"1.8.0",charIndex:858},{level:3,title:"1.7.0",slug:"_1-7-0",normalizedTitle:"1.7.0",charIndex:953},{level:3,title:"1.6.0",slug:"_1-6-0",normalizedTitle:"1.6.0",charIndex:1074},{level:3,title:"V1.5.0",slug:"v1-5-0",normalizedTitle:"v1.5.0",charIndex:1215},{level:3,title:"V1.4.2",slug:"v1-4-2",normalizedTitle:"v1.4.2",charIndex:1722},{level:3,title:"V1.4.1",slug:"v1-4-1",normalizedTitle:"v1.4.1",charIndex:1819},{level:3,title:"V1.4.0",slug:"v1-4-0",normalizedTitle:"v1.4.0",charIndex:1924},{level:3,title:"V1.3.0",slug:"v1-3-0",normalizedTitle:"v1.3.0",charIndex:2021},{level:3,title:"V1.2.0",slug:"v1-2-0",normalizedTitle:"v1.2.0",charIndex:2324},{level:3,title:"V1.1.1",slug:"v1-1-1",normalizedTitle:"v1.1.1",charIndex:2423},{level:3,title:"V1.1.0",slug:"v1-1-0",normalizedTitle:"v1.1.0",charIndex:2665},{level:3,title:"V1.0.2",slug:"v1-0-2",normalizedTitle:"v1.0.2",charIndex:2810},{level:3,title:"V1.0.1",slug:"v1-0-1",normalizedTitle:"v1.0.1",charIndex:2896},{level:3,title:"V1.0.0",slug:"v1-0-0",normalizedTitle:"v1.0.0",charIndex:3145}],headersStr:"Overview Releases 1.9.0 1.8.0 1.7.0 1.6.0 V1.5.0 V1.4.2 V1.4.1 V1.4.0 V1.3.0 V1.2.0 V1.1.1 V1.1.0 V1.0.2 V1.0.1 V1.0.0",content:"# Turbo SDK Release Notes\n\n\n# Overview\n\nWelcome to the documentation page for the Turbo SDK release notes. Here, you will find detailed information about each version of the Turbo SDK, including the enhancements, bug fixes, and any other changes introduced in every release. This page serves as a comprehensive resource to keep you informed about the latest developments and updates in the Turbo SDK. For those interested in exploring the source code, each version's code is readily accessible at our GitHub repository: Turbo SDK Releases. Stay updated with the continuous improvements and advancements in the Turbo SDK by referring to this page for all release-related information.\n\n\n# Releases\n\n\n# 1.9.0\n\n(2024-05-06)\n\nBug Fixes\n\n * eth payments: setup ETH in default constructor, remove default wait()\n\nFeatures\n\n * eth payments: init eth tx payments\n\n\n# 1.8.0\n\n(2024-05-02)\n\nFeatures\n\n * solana payments: init solana token tools for sol payment\n\n\n# 1.7.0\n\n(2024-04-25)\n\nFeatures\n\n * upload: allow eth and sol signing for upload\n * upload: allow eth/sol signer types\n\n\n# 1.6.0\n\n(2024-04-24)\n\nFeatures\n\n * top up: allow eth/sol destination for fiat top up\n * top up: allow eth/sol destination for fiat top up\n\n\n# V1.5.0\n\n(2024-04-16)\n\nBug Fixes\n\n * fund with AR: add web esm compatible arweave export\n * export Arconnect and ArweaveSigner from env specific signers\n\nFeatures\n\n * crypto payments: Init fund methods\n * crypto payments: Refactor arweave-js out of signer\n * fund with AR: Add ToTokenAmount helper utils\n * fund with AR: Catch polling error\n * fund with AR: Continue polling on request error\n * fund with AR: Throw no wallet found as error\n * signers: Exports arbundles ArconnectSigner and ArweaveSigner\n\n\n# V1.4.2\n\n(2024-03-15)\n\nBug Fixes\n\n * arbundles: pin arbundles to v0.9.9 and run tests locally\n\n\n# V1.4.1\n\n(2024-01-30)\n\nBug Fixes\n\n * checkout session: correct query param, change type, add coverage\n\n\n# V1.4.0\n\n(2024-01-30)\n\nFeatures\n\n * ui mode: support query param for checkout session ui mode\n\n\n# V1.3.0\n\n(2024-01-03)\n\nBug Fixes\n\n * web: ensure we have the public key for arconnect wallets when signing data\n * web: remove reference to node:crypto in websigner, use signer to signer to sign header\n\nFeatures\n\n * signer: allow an optional signer to be passed instead of JWK for signing data items\n\n\n# V1.2.0\n\n(2023-12-15)\n\nFeatures\n\n * data item opts: init tags anchor and target support PE-5035\n\n\n# V1.1.1\n\n(2023-12-14)\n\nBug Fixes\n\n * exports: use bundled export to avoid issue with polyfilled features needed for web\n * exports: web exports reference an invalid build path\n * polyfills: update esbuild script to include crypto polyfill\n\n\n# V1.1.0\n\n(2023-11-10)\n\nBug Fixes\n\n * axios: set maxRedirects to 0 on our axios instances\n\nFeatures\n\n * logger: add configurable global logger\n\n\n# V1.0.2\n\n(2023-11-03)\n\nBug Fixes\n\n * upload: update the default upload service URL\n\n\n# V1.0.1\n\n(2023-09-27)\n\nBug Fixes\n\n * headers: add default headers for all HTTP requests\n * release: use script that updates built version.js files\n * version: update version.js to proper version on build and commit it back to git after a release\n\n\n# V1.0.0\n\n(2023-09-26)\n\nBug Fixes\n\n * add command that removes type module from package.json\n * add command that removes type module from package.json\n * add main import and allow wildcard imports\n * add module to package.json and tweak types\n * add one more step to make esm useable\n * add owner to TurboUploadDataItemResponse and remove byteCount\n * add separate folder for types, use it in named exports\n * change name of public facing clients.\n * cjs: add separate cjs and esm outputs\n * content-length: require content length factory for uploads\n * exports: move turbo configurations to turbo.ts so it is available to clients\n * fix package.json\n * modify return type of signDataItem function, tweak implementation of ArweaveSigner header\n * move from getWincPriceForBytes to getUploadCosts\n * package.json: add back module to package.json\n * remove package.json from lib directory\n * remove postinstall command\n * replace retry-axios, add additional retry logic\n * retry-axios: pin retry-axios to 3.0.0\n * revert to single file upload/data item upload\n * swap adding package.json to esm to cjs\n * top up: export type PE-4465\n * type imports for web and node\n * types: finalize types, update default payment and upload URLs\n * update main and types path in package.json\n * update package.json output for esm\n * update web signer and cleanup examples\n * use .cjs as base for types to avoid reference require errors\n * use declare in sub-classes to overwrite parent class type\n * wildcard: allow wildcard exports for older projects\n * wrong path for types!\n\nFeatures\n\n * abstract axios to TurboHTTPService class\n * abstract JWKInterface used in AuthenticatedPayment and AuthenticatedUploadService\n * add remaining unauthenticated apis for payment service, introduce some new types, add tests\n * add uploadFiles implementation for node and web\n * break services into auth vs unauth\n * initial implementation of TurboWebClient and TurboNodeClient\n * introduce AbortController\n * introduce uploadSignedDataItem interface, implement for node\n * remove TurboDataItemVerifier\n * sdk: all uphill from here 🚀 PE-4064\n * top-up: init get checkout session PE-4465\n * winc for fiat: extend AmountMapper pattern and add promoCode support PE-4465",normalizedContent:"# turbo sdk release notes\n\n\n# overview\n\nwelcome to the documentation page for the turbo sdk release notes. here, you will find detailed information about each version of the turbo sdk, including the enhancements, bug fixes, and any other changes introduced in every release. this page serves as a comprehensive resource to keep you informed about the latest developments and updates in the turbo sdk. for those interested in exploring the source code, each version's code is readily accessible at our github repository: turbo sdk releases. stay updated with the continuous improvements and advancements in the turbo sdk by referring to this page for all release-related information.\n\n\n# releases\n\n\n# 1.9.0\n\n(2024-05-06)\n\nbug fixes\n\n * eth payments: setup eth in default constructor, remove default wait()\n\nfeatures\n\n * eth payments: init eth tx payments\n\n\n# 1.8.0\n\n(2024-05-02)\n\nfeatures\n\n * solana payments: init solana token tools for sol payment\n\n\n# 1.7.0\n\n(2024-04-25)\n\nfeatures\n\n * upload: allow eth and sol signing for upload\n * upload: allow eth/sol signer types\n\n\n# 1.6.0\n\n(2024-04-24)\n\nfeatures\n\n * top up: allow eth/sol destination for fiat top up\n * top up: allow eth/sol destination for fiat top up\n\n\n# v1.5.0\n\n(2024-04-16)\n\nbug fixes\n\n * fund with ar: add web esm compatible arweave export\n * export arconnect and arweavesigner from env specific signers\n\nfeatures\n\n * crypto payments: init fund methods\n * crypto payments: refactor arweave-js out of signer\n * fund with ar: add totokenamount helper utils\n * fund with ar: catch polling error\n * fund with ar: continue polling on request error\n * fund with ar: throw no wallet found as error\n * signers: exports arbundles arconnectsigner and arweavesigner\n\n\n# v1.4.2\n\n(2024-03-15)\n\nbug fixes\n\n * arbundles: pin arbundles to v0.9.9 and run tests locally\n\n\n# v1.4.1\n\n(2024-01-30)\n\nbug fixes\n\n * checkout session: correct query param, change type, add coverage\n\n\n# v1.4.0\n\n(2024-01-30)\n\nfeatures\n\n * ui mode: support query param for checkout session ui mode\n\n\n# v1.3.0\n\n(2024-01-03)\n\nbug fixes\n\n * web: ensure we have the public key for arconnect wallets when signing data\n * web: remove reference to node:crypto in websigner, use signer to signer to sign header\n\nfeatures\n\n * signer: allow an optional signer to be passed instead of jwk for signing data items\n\n\n# v1.2.0\n\n(2023-12-15)\n\nfeatures\n\n * data item opts: init tags anchor and target support pe-5035\n\n\n# v1.1.1\n\n(2023-12-14)\n\nbug fixes\n\n * exports: use bundled export to avoid issue with polyfilled features needed for web\n * exports: web exports reference an invalid build path\n * polyfills: update esbuild script to include crypto polyfill\n\n\n# v1.1.0\n\n(2023-11-10)\n\nbug fixes\n\n * axios: set maxredirects to 0 on our axios instances\n\nfeatures\n\n * logger: add configurable global logger\n\n\n# v1.0.2\n\n(2023-11-03)\n\nbug fixes\n\n * upload: update the default upload service url\n\n\n# v1.0.1\n\n(2023-09-27)\n\nbug fixes\n\n * headers: add default headers for all http requests\n * release: use script that updates built version.js files\n * version: update version.js to proper version on build and commit it back to git after a release\n\n\n# v1.0.0\n\n(2023-09-26)\n\nbug fixes\n\n * add command that removes type module from package.json\n * add command that removes type module from package.json\n * add main import and allow wildcard imports\n * add module to package.json and tweak types\n * add one more step to make esm useable\n * add owner to turbouploaddataitemresponse and remove bytecount\n * add separate folder for types, use it in named exports\n * change name of public facing clients.\n * cjs: add separate cjs and esm outputs\n * content-length: require content length factory for uploads\n * exports: move turbo configurations to turbo.ts so it is available to clients\n * fix package.json\n * modify return type of signdataitem function, tweak implementation of arweavesigner header\n * move from getwincpriceforbytes to getuploadcosts\n * package.json: add back module to package.json\n * remove package.json from lib directory\n * remove postinstall command\n * replace retry-axios, add additional retry logic\n * retry-axios: pin retry-axios to 3.0.0\n * revert to single file upload/data item upload\n * swap adding package.json to esm to cjs\n * top up: export type pe-4465\n * type imports for web and node\n * types: finalize types, update default payment and upload urls\n * update main and types path in package.json\n * update package.json output for esm\n * update web signer and cleanup examples\n * use .cjs as base for types to avoid reference require errors\n * use declare in sub-classes to overwrite parent class type\n * wildcard: allow wildcard exports for older projects\n * wrong path for types!\n\nfeatures\n\n * abstract axios to turbohttpservice class\n * abstract jwkinterface used in authenticatedpayment and authenticateduploadservice\n * add remaining unauthenticated apis for payment service, introduce some new types, add tests\n * add uploadfiles implementation for node and web\n * break services into auth vs unauth\n * initial implementation of turbowebclient and turbonodeclient\n * introduce abortcontroller\n * introduce uploadsigneddataitem interface, implement for node\n * remove turbodataitemverifier\n * sdk: all uphill from here 🚀 pe-4064\n * top-up: init get checkout session pe-4465\n * winc for fiat: extend amountmapper pattern and add promocode support pe-4465",charsets:{}},{title:"Using Turbo SDK in a Browser Environment",frontmatter:{},regularPath:"/docs/turbo/turbo-sdk/turbo-web.html",relativePath:"docs/turbo/turbo-sdk/turbo-web.md",key:"v-7cc2c9e4",path:"/docs/turbo/turbo-sdk/turbo-web.html",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:47}],headersStr:"Overview",content:"# Using Turbo SDK in a Browser Environment\n\n\n# Overview\n\nWith Turbo-SDK v1.3.0, You can authenticate a Turbo instance by passing in an arweave signer instance instead of JWK. This supports the ArweaveSigner or ArconnectSigner classes from arbundles.",normalizedContent:"# using turbo sdk in a browser environment\n\n\n# overview\n\nwith turbo-sdk v1.3.0, you can authenticate a turbo instance by passing in an arweave signer instance instead of jwk. this supports the arweavesigner or arconnectsigner classes from arbundles.",charsets:{}},{title:"What Is Turbo?",frontmatter:{prev:!1},regularPath:"/docs/turbo/what-is-turbo.html",relativePath:"docs/turbo/what-is-turbo.md",key:"v-5d3101c8",path:"/docs/turbo/what-is-turbo.html",headersStr:null,content:"# What Is Turbo?\n\nTurbo, offered by ArDrive, is a streamlined service that simplifies permaweb storage, making it more accessible by allowing users to pay for uploads with credit or debit cards. It integrates two key components: a service that bundles uploads for efficiency and ease, and a payment system designed for straightforward transactions. Turbo Credits, which users can purchase within the ArDrive web app, enable a direct conversion from AR tokens, reflecting the amount of data one can upload. These credits are meticulously calibrated, with the Winston Credit (winc) representing the smallest unit, ensuring users have precise control over their storage needs. As an open-source technology, Turbo encourages community engagement, allowing developers to contribute to its continuous enhancement.\n\nTYPE                          FEATURE\nACCESS                         * Optimistic, instant data caching, using arweave.net.\n                               * Optimistic, near instant GraphQL indexing including\n                                 cross-chain token address indexing, using arweave.net.\n                               * Irys-compatible transaction status endpoint for checking\n                                 transaction finality.\nDEVELOPMENT AND INTEGRATION    * Rich documentation for developer integrations, SDK and\n                                 Turbo APIs.\n                                 * Swagger UI Upload Service API docs.\n                                 * Swagger UI Payment Service API docs.\n                               * Deploy your own upload and payment service for bundling\n                                 data and sending it to Arweave.\n                                 * GitHub - ardriveapp/turbo-upload-service: Turbo Upload\n                                   service that allows users to upload data items using\n                                   fiat currencies.\n                                 * GitHub - ardriveapp/turbo-payment-service: ArDrive\n                                   Turbo Payment Service that manages Turbo balances.\n                               * Flexible typescript SDK for seamless web and NodeJS\n                                 integration.\n                               * GitHub - ardriveapp/turbo-sdk: The first SDK on Arweave\n                                 to bring you programmable fiat top ups, Turbo-powered\n                                 upload reliability, and fast data and indexing finality\n                                 for Typescript based Web and Node projects.\n                               * Development and testing environment.\nENTERPRISE                    Built for scale and trusted by enterprises\nIDENTITY                       * Cryptographic sign in using Arweave, Ethereum, Solana or\n                                 other Irys-compatible keys.\n                               * Arweave ecosystem supported web wallets and providers:\n                                 * ✅ Arconnect\n                                 * ✅ arweave.app\n                                 * ✅ ArweaveWalletAdapter\nMATURITY                       * Run by PDS, the same team that has been operating\n                                 arweave.net since March 2022, with over 1.8B transactions\n                                 indexed and accessible.\n                               * First bundling services launched in October 2022, with as\n                                 ArDrive Turbo launching in July 2023.\n                                 * ar.io Meta Bundler | Arweave Explorer | ViewBlock\n                                 * ArDrive Turbo | Arweave Explorer | ViewBlock\nPAYMENTS                       * Instantly fund your Turbo account with your credit card.\n                               * Leverage other Turbo benefits like Gifting and Coupon\n                                 Codes.\nPERFORMANCE                    * Irys-compatible single request or multipart uploading.\n                               * Proven, high layer 2 transactional throughput with\n                                 860/sec sustained on 12/18 and 12/19\nPROVENANCE                    Irys-compatible receipts with transaction id, high\n                              resolution timestamp, upload price and cryptographic\n                              signature.\nTRANSPARENCY                  Open source infrastructure and software development kit with\n                              AGPL3.0 licensing.",normalizedContent:"# what is turbo?\n\nturbo, offered by ardrive, is a streamlined service that simplifies permaweb storage, making it more accessible by allowing users to pay for uploads with credit or debit cards. it integrates two key components: a service that bundles uploads for efficiency and ease, and a payment system designed for straightforward transactions. turbo credits, which users can purchase within the ardrive web app, enable a direct conversion from ar tokens, reflecting the amount of data one can upload. these credits are meticulously calibrated, with the winston credit (winc) representing the smallest unit, ensuring users have precise control over their storage needs. as an open-source technology, turbo encourages community engagement, allowing developers to contribute to its continuous enhancement.\n\ntype                          feature\naccess                         * optimistic, instant data caching, using arweave.net.\n                               * optimistic, near instant graphql indexing including\n                                 cross-chain token address indexing, using arweave.net.\n                               * irys-compatible transaction status endpoint for checking\n                                 transaction finality.\ndevelopment and integration    * rich documentation for developer integrations, sdk and\n                                 turbo apis.\n                                 * swagger ui upload service api docs.\n                                 * swagger ui payment service api docs.\n                               * deploy your own upload and payment service for bundling\n                                 data and sending it to arweave.\n                                 * github - ardriveapp/turbo-upload-service: turbo upload\n                                   service that allows users to upload data items using\n                                   fiat currencies.\n                                 * github - ardriveapp/turbo-payment-service: ardrive\n                                   turbo payment service that manages turbo balances.\n                               * flexible typescript sdk for seamless web and nodejs\n                                 integration.\n                               * github - ardriveapp/turbo-sdk: the first sdk on arweave\n                                 to bring you programmable fiat top ups, turbo-powered\n                                 upload reliability, and fast data and indexing finality\n                                 for typescript based web and node projects.\n                               * development and testing environment.\nenterprise                    built for scale and trusted by enterprises\nidentity                       * cryptographic sign in using arweave, ethereum, solana or\n                                 other irys-compatible keys.\n                               * arweave ecosystem supported web wallets and providers:\n                                 * ✅ arconnect\n                                 * ✅ arweave.app\n                                 * ✅ arweavewalletadapter\nmaturity                       * run by pds, the same team that has been operating\n                                 arweave.net since march 2022, with over 1.8b transactions\n                                 indexed and accessible.\n                               * first bundling services launched in october 2022, with as\n                                 ardrive turbo launching in july 2023.\n                                 * ar.io meta bundler | arweave explorer | viewblock\n                                 * ardrive turbo | arweave explorer | viewblock\npayments                       * instantly fund your turbo account with your credit card.\n                               * leverage other turbo benefits like gifting and coupon\n                                 codes.\nperformance                    * irys-compatible single request or multipart uploading.\n                               * proven, high layer 2 transactional throughput with\n                                 860/sec sustained on 12/18 and 12/19\nprovenance                    irys-compatible receipts with transaction id, high\n                              resolution timestamp, upload price and cryptographic\n                              signature.\ntransparency                  open source infrastructure and software development kit with\n                              agpl3.0 licensing.",charsets:{cjk:!0}},{title:"About ArDrive",frontmatter:{homepage:!0},regularPath:"/",relativePath:"index.md",key:"v-501d8193",path:"/",headers:[{level:2,title:"Control Your Own Data",slug:"control-your-own-data",normalizedTitle:"control your own data",charIndex:544},{level:3,title:"True Data Ownership",slug:"true-data-ownership",normalizedTitle:"true data ownership",charIndex:570},{level:3,title:"No More Lost Data",slug:"no-more-lost-data",normalizedTitle:"no more lost data",charIndex:745},{level:3,title:"Decentralized Network",slug:"decentralized-network",normalizedTitle:"decentralized network",charIndex:897},{level:3,title:"Community Owned",slug:"community-owned",normalizedTitle:"community owned",charIndex:1088},{level:2,title:"How can Ardrive Help You?",slug:"how-can-ardrive-help-you",normalizedTitle:"how can ardrive help you?",charIndex:1246},{level:3,title:"Store Family Memories Forever",slug:"store-family-memories-forever",normalizedTitle:"store family memories forever",charIndex:1276},{level:3,title:"Permanence",slug:"permanence",normalizedTitle:"permanence",charIndex:1473},{level:3,title:"Totally Private or Totally Public",slug:"totally-private-or-totally-public",normalizedTitle:"totally private or totally public",charIndex:1702},{level:3,title:"Eliminate Subscription Fees",slug:"eliminate-subscription-fees",normalizedTitle:"eliminate subscription fees",charIndex:1953},{level:3,title:"Control Your Data",slug:"control-your-data",normalizedTitle:"control your data",charIndex:2180},{level:3,title:"Perfect Record Keeping",slug:"perfect-record-keeping",normalizedTitle:"perfect record keeping",charIndex:2403},{level:3,title:"Durable NFTs",slug:"durable-nfts",normalizedTitle:"durable nfts",charIndex:2661},{level:3,title:"Archive the Web",slug:"archive-the-web",normalizedTitle:"archive the web",charIndex:2850}],headersStr:"Control Your Own Data True Data Ownership No More Lost Data Decentralized Network Community Owned How can Ardrive Help You? Store Family Memories Forever Permanence Totally Private or Totally Public Eliminate Subscription Fees Control Your Data Perfect Record Keeping Durable NFTs Archive the Web",content:"# About ArDrive\n\nArDrive offers never-ending storage of your most valuable files. Pay once and save your memories forever.\n\nFEATURE                                     ARDRIVE   TRADITIONAL CLOUD STORAGE\nOne time payments for file storage          ✓         ✗\nNo monthly subscriptions                    ✓         ✗\n200+ years of file storage                  ✓         ✗\nData available even if company disappears   ✓         ✗\nDecentralized and open source               ✓         ✗\nInactive accounts never deleted             ✓         ✗\n\n\n# Control Your Own Data\n\n\n# True Data Ownership\n\nWith pay-once pricing you no longer have to add another subscription fee to your monthly budget. Save big when you only have to pay for what you use.\n\n\n# No More Lost Data\n\nFeel safe about the longevity of your files and avoid the horror stories of broken hard drives, deleted accounts, or lost files.\n\n\n# Decentralized Network\n\nBreak free from Big Tech and leverage the power of the decentralized Arweave blockchain network that puts you back in control. Own your data instead of renting it.\n\n\n# Community Owned\n\nYou're the boss. As a Web3 organization, ArDrive is owned collectively so you can have a say in our governance and share in our rewards.\n\n\n# How can Ardrive Help You?\n\n\n# Store Family Memories Forever\n\nNever lose a cherished photo or video again. Keep and pass along all of your most important photos and documents to the present or future generations. Learn more\n\n\n# Permanence\n\nIn a digital world, how do you guarantee information is kept for long-periods of time? Just as the web connects data and people over vast distances, your data can now be kept over vast periods of time. Learn more\n\n\n# Totally Private or Totally Public\n\nIt’s your choice in how you want to manage your data. Keep it private, share with select individuals, or make it public to the world. ArDrive is optimized for photography, digital art and NFT storage. Learn more\n\n\n# Eliminate Subscription Fees\n\nIf you are paying monthly for cloud storage you are renting out your data. Get a digital wallet and move to full ownership of your data with our innovative pay once per file pricing. Learn more\n\n\n# Control Your Data\n\nBreak free from the whims of centralized big tech and ever-changing terms of service. Enjoy the benefits of total privacy, security, and extreme data redundancy on a decentralized network. Learn more\n\n\n# Perfect Record Keeping\n\nData integrity, accuracy and consistency for your most important files! Achieve regulatory compliance in any industry or your personal life by having an immutable (unchanging) and time-stamped record of all your files. Learn more\n\n\n# Durable NFTs\n\nNFTs make the internet ownable. But when you buy an NFT how do you know it is going to be around in 20 years? Who is paying to store it? And what if they stop? Learn more\n\n\n# Archive the Web\n\nSave a copy of any webpage you create or find! Each page will be given a unique url and saved on to Arweave’s permaweb (just like the web, but forever!). Learn more",normalizedContent:"# about ardrive\n\nardrive offers never-ending storage of your most valuable files. pay once and save your memories forever.\n\nfeature                                     ardrive   traditional cloud storage\none time payments for file storage          ✓         ✗\nno monthly subscriptions                    ✓         ✗\n200+ years of file storage                  ✓         ✗\ndata available even if company disappears   ✓         ✗\ndecentralized and open source               ✓         ✗\ninactive accounts never deleted             ✓         ✗\n\n\n# control your own data\n\n\n# true data ownership\n\nwith pay-once pricing you no longer have to add another subscription fee to your monthly budget. save big when you only have to pay for what you use.\n\n\n# no more lost data\n\nfeel safe about the longevity of your files and avoid the horror stories of broken hard drives, deleted accounts, or lost files.\n\n\n# decentralized network\n\nbreak free from big tech and leverage the power of the decentralized arweave blockchain network that puts you back in control. own your data instead of renting it.\n\n\n# community owned\n\nyou're the boss. as a web3 organization, ardrive is owned collectively so you can have a say in our governance and share in our rewards.\n\n\n# how can ardrive help you?\n\n\n# store family memories forever\n\nnever lose a cherished photo or video again. keep and pass along all of your most important photos and documents to the present or future generations. learn more\n\n\n# permanence\n\nin a digital world, how do you guarantee information is kept for long-periods of time? just as the web connects data and people over vast distances, your data can now be kept over vast periods of time. learn more\n\n\n# totally private or totally public\n\nit’s your choice in how you want to manage your data. keep it private, share with select individuals, or make it public to the world. ardrive is optimized for photography, digital art and nft storage. learn more\n\n\n# eliminate subscription fees\n\nif you are paying monthly for cloud storage you are renting out your data. get a digital wallet and move to full ownership of your data with our innovative pay once per file pricing. learn more\n\n\n# control your data\n\nbreak free from the whims of centralized big tech and ever-changing terms of service. enjoy the benefits of total privacy, security, and extreme data redundancy on a decentralized network. learn more\n\n\n# perfect record keeping\n\ndata integrity, accuracy and consistency for your most important files! achieve regulatory compliance in any industry or your personal life by having an immutable (unchanging) and time-stamped record of all your files. learn more\n\n\n# durable nfts\n\nnfts make the internet ownable. but when you buy an nft how do you know it is going to be around in 20 years? who is paying to store it? and what if they stop? learn more\n\n\n# archive the web\n\nsave a copy of any webpage you create or find! each page will be given a unique url and saved on to arweave’s permaweb (just like the web, but forever!). learn more",charsets:{}}],themeConfig:{searchPlaceholder:"Ctrl + K",repo:"",editLinks:!1,docsDir:"",editLinkText:"",lastUpdated:!1,initialOpenGroupIndex:-1,logo:"/images/ArDrive-Logo.png",sidebar:{"/":[{title:"Core-js",path:"/docs/core-sdk"},{title:"CLI",initialOpenGroupIndex:-1,collapsable:!0,children:[{title:"Overview",path:"/docs/cli/intro"},{title:"Getting Started",path:"/docs/cli/getting-started"},{title:"Using the CLI",path:"/docs/cli/using-the-cli"},{title:"All Commands",path:"/docs/cli/all-commands"},{title:"Help",path:"/docs/cli/getting-help"}]},{title:"ArFS",initialOpenGroupIndex:-1,children:[{title:"Overview",path:"/docs/arfs/overview"},{title:"Data Model",path:"/docs/arfs/data-model"},{title:"Entity Types",path:"/docs/arfs/entity-types"},{title:"Schema Diagrams",path:"/docs/arfs/schema-diagrams"},{title:"Content Types",path:"/docs/arfs/content-types"},{title:"Privacy",path:"/docs/arfs/privacy"},{title:"Usage",children:[{title:"Create",children:[{title:"Create Drive",path:"/docs/arfs/usage/create/create-drive"},{title:"Create Folder",path:"/docs/arfs/usage/create/create-folder"},{title:"Create File",path:"/docs/arfs/usage/create/create-file"}]},{title:"Modify",children:[{title:"Modify Drives",path:"/docs/arfs/usage/change/drives"},{title:"Modify Folders",path:"/docs/arfs/usage/change/folders"},{title:"Modify Files",path:"/docs/arfs/usage/change/files"}]},{title:"Read",path:"/docs/arfs/usage/read/read-operations"},{title:"Extending Schemas",path:"/docs/arfs/usage/extending-schemas"}]}]},{title:"Turbo",sidebarDepth:2,children:[{title:"What is Turbo?",path:"/docs/turbo/what-is-turbo"},{title:"Payment API",path:"/docs/turbo/api/payment"},{title:"Upload API",path:"/docs/turbo/api/upload"},{title:"Turbo SDK",path:"/docs/turbo/turbo-sdk/"},{title:"Turbo SDK Release Notes",path:"/docs/turbo/turbo-sdk/release-notes"},{title:"Migrating From Irys",path:"/docs/turbo/migrating"}]},{title:"Misc.",children:[{title:"EthAReum",path:"/docs/misc/eth"},{title:"Permasites",path:"/docs/misc/permasite"},{title:"Price Calculator",path:"/docs/misc/price-calculator"},{title:"How to Deploy a dApp",children:[{title:"Preparing your dApp",path:"/docs/misc/deploy/prepare"},{title:"Hash Routing",path:"/docs/misc/deploy/routing"},{title:"Relative File Paths",path:"/docs/misc/deploy/paths"},{title:"How to Deploy",path:"/docs/misc/deploy/deploy"},{title:"Examples",path:"/docs/misc/deploy/examples"}]}]}]}}};function $s(){return"undefined"!=typeof navigator&&"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}}const Ws="function"==typeof Proxy;let Vs,Bs;function Gs(){return void 0!==Vs||("undefined"!=typeof window&&window.performance?(Vs=!0,Bs=window.performance):"undefined"!=typeof global&&(null===(e=global.perf_hooks)||void 0===e?void 0:e.performance)?(Vs=!0,Bs=global.perf_hooks.performance):Vs=!1),Vs?Bs.now():Date.now();var e}class Hs{constructor(e,t){this.target=null,this.targetQueue=[],this.onQueue=[],this.plugin=e,this.hook=t;const n={};if(e.settings)for(const t in e.settings){const a=e.settings[t];n[t]=a.defaultValue}const a="__vue-devtools-plugin-settings__"+e.id;let r=Object.assign({},n);try{const e=localStorage.getItem(a),t=JSON.parse(e);Object.assign(r,t)}catch(e){}this.fallbacks={getSettings:()=>r,setSettings(e){try{localStorage.setItem(a,JSON.stringify(e))}catch(e){}r=e},now:()=>Gs()},t&&t.on("plugin:settings:set",(e,t)=>{e===this.plugin.id&&this.fallbacks.setSettings(t)}),this.proxiedOn=new Proxy({},{get:(e,t)=>this.target?this.target.on[t]:(...e)=>{this.onQueue.push({method:t,args:e})}}),this.proxiedTarget=new Proxy({},{get:(e,t)=>this.target?this.target[t]:"on"===t?this.proxiedOn:Object.keys(this.fallbacks).includes(t)?(...e)=>(this.targetQueue.push({method:t,args:e,resolve:()=>{}}),this.fallbacks[t](...e)):(...e)=>new Promise(n=>{this.targetQueue.push({method:t,args:e,resolve:n})})})}async setRealTarget(e){this.target=e;for(const e of this.onQueue)this.target.on[e.method](...e.args);for(const e of this.targetQueue)e.resolve(await this.target[e.method](...e.args))}}function Js(e,t){const n=e,a=$s(),r=$s().__VUE_DEVTOOLS_GLOBAL_HOOK__,i=Ws&&n.enableEarlyProxy;if(!r||!a.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__&&i){const e=i?new Hs(n,r):null;(a.__VUE_DEVTOOLS_PLUGINS__=a.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:n,setupFn:t,proxy:e}),e&&t(e.proxiedTarget)}else r.emit("devtools-plugin:setup",e,t)}
/*!
 * vuex v4.1.0
 * (c) 2022 Evan You
 * @license MIT
 */function Ks(e,t){if(void 0===t&&(t=[]),null===e||"object"!=typeof e)return e;var n,a=(n=function(t){return t.original===e},t.filter(n)[0]);if(a)return a.copy;var r=Array.isArray(e)?[]:{};return t.push({original:e,copy:r}),Object.keys(e).forEach((function(n){r[n]=Ks(e[n],t)})),r}function Ys(e,t){Object.keys(e).forEach((function(n){return t(e[n],n)}))}function Qs(e){return null!==e&&"object"==typeof e}function Zs(e,t){if(!e)throw new Error("[vuex] "+t)}function Xs(e,t,n){return t.indexOf(e)<0&&(n&&n.prepend?t.unshift(e):t.push(e)),function(){var n=t.indexOf(e);n>-1&&t.splice(n,1)}}function el(e,t){e._actions=Object.create(null),e._mutations=Object.create(null),e._wrappedGetters=Object.create(null),e._modulesNamespaceMap=Object.create(null);var n=e.state;nl(e,n,[],e._modules.root,!0),tl(e,n,t)}function tl(e,t,n){var a=e._state,r=e._scope;e.getters={},e._makeLocalGettersCache=Object.create(null);var i,o=e._wrappedGetters,s={},l={},c=new Ke(!0);c.run((function(){Ys(o,(function(t,n){s[n]=function(e,t){return function(){return e(t)}}(t,e),l[n]=function(e,t){var n,a,r=d(e);r?(n=e,a=P):(n=e.get,a=e.set);var i=ie()?null:new Zt(ce,n,P,{lazy:!0}),o={effect:i,get value(){return i?(i.dirty&&i.evaluate(),ge.target&&i.depend(),i.value):n()},set value(e){a(e)}};return B(o,"__v_isRef",!0),B(o,"__v_isReadonly",r),o}((function(){return s[n]()})),Object.defineProperty(e.getters,n,{get:function(){return l[n].value},enumerable:!0})}))})),e._state=(qe(i={data:t},!1),i),e._scope=c,e.strict&&function(e){He((function(){return e._state.data}),(function(){Zs(e._committing,"do not mutate vuex store state outside mutation handlers.")}),{deep:!0,flush:"sync"})}(e),a&&n&&e._withCommit((function(){a.data=null})),r&&r.stop()}function nl(e,t,n,a,r){var i=!n.length,o=e._modules.getNamespace(n);if(a.namespaced&&(e._modulesNamespaceMap[o]&&console.error("[vuex] duplicate namespace "+o+" for the namespaced module "+n.join("/")),e._modulesNamespaceMap[o]=a),!i&&!r){var s=rl(t,n.slice(0,-1)),l=n[n.length-1];e._withCommit((function(){l in s&&console.warn('[vuex] state field "'+l+'" was overridden by a module with the same name at "'+n.join(".")+'"'),s[l]=a.state}))}var d=a.context=function(e,t,n){var a=""===t,r={dispatch:a?e.dispatch:function(n,a,r){var i=il(n,a,r),o=i.payload,s=i.options,l=i.type;if(s&&s.root||(l=t+l,e._actions[l]))return e.dispatch(l,o);console.error("[vuex] unknown local action type: "+i.type+", global type: "+l)},commit:a?e.commit:function(n,a,r){var i=il(n,a,r),o=i.payload,s=i.options,l=i.type;s&&s.root||(l=t+l,e._mutations[l])?e.commit(l,o,s):console.error("[vuex] unknown local mutation type: "+i.type+", global type: "+l)}};return Object.defineProperties(r,{getters:{get:a?function(){return e.getters}:function(){return al(e,t)}},state:{get:function(){return rl(e.state,n)}}}),r}(e,o,n);a.forEachMutation((function(t,n){!function(e,t,n,a){(e._mutations[t]||(e._mutations[t]=[])).push((function(t){n.call(e,a.state,t)}))}(e,o+n,t,d)})),a.forEachAction((function(t,n){var a=t.root?n:o+n,r=t.handler||t;!function(e,t,n,a){(e._actions[t]||(e._actions[t]=[])).push((function(t){var r,i=n.call(e,{dispatch:a.dispatch,commit:a.commit,getters:a.getters,state:a.state,rootGetters:e.getters,rootState:e.state},t);return(r=i)&&"function"==typeof r.then||(i=Promise.resolve(i)),e._devtoolHook?i.catch((function(t){throw e._devtoolHook.emit("vuex:error",t),t})):i}))}(e,a,r,d)})),a.forEachGetter((function(t,n){!function(e,t,n,a){if(e._wrappedGetters[t])return void console.error("[vuex] duplicate getter key: "+t);e._wrappedGetters[t]=function(e){return n(a.state,a.getters,e.state,e.getters)}}(e,o+n,t,d)})),a.forEachChild((function(a,i){nl(e,t,n.concat(i),a,r)}))}function al(e,t){if(!e._makeLocalGettersCache[t]){var n={},a=t.length;Object.keys(e.getters).forEach((function(r){if(r.slice(0,a)===t){var i=r.slice(a);Object.defineProperty(n,i,{get:function(){return e.getters[r]},enumerable:!0})}})),e._makeLocalGettersCache[t]=n}return e._makeLocalGettersCache[t]}function rl(e,t){return t.reduce((function(e,t){return e[t]}),e)}function il(e,t,n){return Qs(e)&&e.type&&(n=t,t=e,e=e.type),Zs("string"==typeof e,"expects string as the type, but found "+typeof e+"."),{type:e,payload:t,options:n}}var ol=0;function sl(e,t){Js({id:"org.vuejs.vuex",app:e,label:"Vuex",homepage:"https://next.vuex.vuejs.org/",logo:"https://vuejs.org/images/icons/favicon-96x96.png",packageName:"vuex",componentStateTypes:["vuex bindings"]},(function(n){n.addTimelineLayer({id:"vuex:mutations",label:"Vuex Mutations",color:ll}),n.addTimelineLayer({id:"vuex:actions",label:"Vuex Actions",color:ll}),n.addInspector({id:"vuex",label:"Vuex",icon:"storage",treeFilterPlaceholder:"Filter stores..."}),n.on.getInspectorTree((function(n){if(n.app===e&&"vuex"===n.inspectorId)if(n.filter){var a=[];!function e(t,n,a,r){r.includes(a)&&t.push({id:r||"root",label:r.endsWith("/")?r.slice(0,r.length-1):r||"Root",tags:n.namespaced?[dl]:[]});Object.keys(n._children).forEach((function(i){e(t,n._children[i],a,r+i+"/")}))}(a,t._modules.root,n.filter,""),n.rootNodes=a}else n.rootNodes=[ul(t._modules.root,"")]})),n.on.getInspectorState((function(n){if(n.app===e&&"vuex"===n.inspectorId){var a=n.nodeId;al(t,a),n.state=function(e,t,n){t="root"===n?t:t[n];var a=Object.keys(t),r={state:Object.keys(e.state).map((function(t){return{key:t,editable:!0,value:e.state[t]}}))};if(a.length){var i=function(e){var t={};return Object.keys(e).forEach((function(n){var a=n.split("/");if(a.length>1){var r=t,i=a.pop();a.forEach((function(e){r[e]||(r[e]={_custom:{value:{},display:e,tooltip:"Module",abstract:!0}}),r=r[e]._custom.value})),r[i]=pl((function(){return e[n]}))}else t[n]=pl((function(){return e[n]}))})),t}(t);r.getters=Object.keys(i).map((function(e){return{key:e.endsWith("/")?cl(e):e,editable:!1,value:pl((function(){return i[e]}))}}))}return r}((r=t._modules,(o=(i=a).split("/").filter((function(e){return e}))).reduce((function(e,t,n){var a=e[t];if(!a)throw new Error('Missing module "'+t+'" for path "'+i+'".');return n===o.length-1?a:a._children}),"root"===i?r:r.root._children)),"root"===a?t.getters:t._makeLocalGettersCache,a)}var r,i,o})),n.on.editInspectorState((function(n){if(n.app===e&&"vuex"===n.inspectorId){var a=n.nodeId,r=n.path;"root"!==a&&(r=a.split("/").filter(Boolean).concat(r)),t._withCommit((function(){n.set(t._state.data,r,n.state.value)}))}})),t.subscribe((function(e,t){var a={};e.payload&&(a.payload=e.payload),a.state=t,n.notifyComponentUpdate(),n.sendInspectorTree("vuex"),n.sendInspectorState("vuex"),n.addTimelineEvent({layerId:"vuex:mutations",event:{time:Date.now(),title:e.type,data:a}})})),t.subscribeAction({before:function(e,t){var a={};e.payload&&(a.payload=e.payload),e._id=ol++,e._time=Date.now(),a.state=t,n.addTimelineEvent({layerId:"vuex:actions",event:{time:e._time,title:e.type,groupId:e._id,subtitle:"start",data:a}})},after:function(e,t){var a={},r=Date.now()-e._time;a.duration={_custom:{type:"duration",display:r+"ms",tooltip:"Action duration",value:r}},e.payload&&(a.payload=e.payload),a.state=t,n.addTimelineEvent({layerId:"vuex:actions",event:{time:Date.now(),title:e.type,groupId:e._id,subtitle:"end",data:a}})}})}))}var ll=8702998,dl={label:"namespaced",textColor:16777215,backgroundColor:6710886};function cl(e){return e&&"root"!==e?e.split("/").slice(-2,-1)[0]:"Root"}function ul(e,t){return{id:t||"root",label:cl(t),tags:e.namespaced?[dl]:[],children:Object.keys(e._children).map((function(n){return ul(e._children[n],t+n+"/")}))}}function pl(e){try{return e()}catch(e){return e}}var hl=function(e,t){this.runtime=t,this._children=Object.create(null),this._rawModule=e;var n=e.state;this.state=("function"==typeof n?n():n)||{}},fl={namespaced:{configurable:!0}};fl.namespaced.get=function(){return!!this._rawModule.namespaced},hl.prototype.addChild=function(e,t){this._children[e]=t},hl.prototype.removeChild=function(e){delete this._children[e]},hl.prototype.getChild=function(e){return this._children[e]},hl.prototype.hasChild=function(e){return e in this._children},hl.prototype.update=function(e){this._rawModule.namespaced=e.namespaced,e.actions&&(this._rawModule.actions=e.actions),e.mutations&&(this._rawModule.mutations=e.mutations),e.getters&&(this._rawModule.getters=e.getters)},hl.prototype.forEachChild=function(e){Ys(this._children,e)},hl.prototype.forEachGetter=function(e){this._rawModule.getters&&Ys(this._rawModule.getters,e)},hl.prototype.forEachAction=function(e){this._rawModule.actions&&Ys(this._rawModule.actions,e)},hl.prototype.forEachMutation=function(e){this._rawModule.mutations&&Ys(this._rawModule.mutations,e)},Object.defineProperties(hl.prototype,fl);var ml=function(e){this.register([],e,!1)};ml.prototype.get=function(e){return e.reduce((function(e,t){return e.getChild(t)}),this.root)},ml.prototype.getNamespace=function(e){var t=this.root;return e.reduce((function(e,n){return e+((t=t.getChild(n)).namespaced?n+"/":"")}),"")},ml.prototype.update=function(e){!function e(t,n,a){if(gl(t,a),n.update(a),a.modules)for(var r in a.modules){if(!n.getChild(r))return void console.warn("[vuex] trying to add a new module '"+r+"' on hot reloading, manual reload is needed");e(t.concat(r),n.getChild(r),a.modules[r])}}([],this.root,e)},ml.prototype.register=function(e,t,n){var a=this;void 0===n&&(n=!0),gl(e,t);var r=new hl(t,n);0===e.length?this.root=r:this.get(e.slice(0,-1)).addChild(e[e.length-1],r);t.modules&&Ys(t.modules,(function(t,r){a.register(e.concat(r),t,n)}))},ml.prototype.unregister=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1],a=t.getChild(n);a?a.runtime&&t.removeChild(n):console.warn("[vuex] trying to unregister module '"+n+"', which is not registered")},ml.prototype.isRegistered=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1];return!!t&&t.hasChild(n)};var vl={assert:function(e){return"function"==typeof e},expected:"function"},yl={getters:vl,mutations:vl,actions:{assert:function(e){return"function"==typeof e||"object"==typeof e&&"function"==typeof e.handler},expected:'function or object with "handler" function'}};function gl(e,t){Object.keys(yl).forEach((function(n){if(t[n]){var a=yl[n];Ys(t[n],(function(t,r){Zs(a.assert(t),function(e,t,n,a,r){var i=t+" should be "+r+' but "'+t+"."+n+'"';e.length>0&&(i+=' in module "'+e.join(".")+'"');return i+=" is "+JSON.stringify(a)+"."}(e,n,r,t,a.expected))}))}}))}var wl=function e(t){var n=this;void 0===t&&(t={}),Zs("undefined"!=typeof Promise,"vuex requires a Promise polyfill in this browser."),Zs(this instanceof e,"store must be called with the new operator.");var a=t.plugins;void 0===a&&(a=[]);var r=t.strict;void 0===r&&(r=!1);var i=t.devtools;this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new ml(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._makeLocalGettersCache=Object.create(null),this._scope=null,this._devtools=i;var o=this,s=this.dispatch,l=this.commit;this.dispatch=function(e,t){return s.call(o,e,t)},this.commit=function(e,t,n){return l.call(o,e,t,n)},this.strict=r;var d=this._modules.root.state;nl(this,d,[],this._modules.root),tl(this,d),a.forEach((function(e){return e(n)}))},bl={state:{configurable:!0}};wl.prototype.install=function(e,t){e.provide(t||"store",this),e.config.globalProperties.$store=this,(void 0===this._devtools||this._devtools)&&sl(e,this)},bl.state.get=function(){return this._state.data},bl.state.set=function(e){Zs(!1,"use store.replaceState() to explicit replace store state.")},wl.prototype.commit=function(e,t,n){var a=this,r=il(e,t,n),i=r.type,o=r.payload,s=r.options,l={type:i,payload:o},d=this._mutations[i];d?(this._withCommit((function(){d.forEach((function(e){e(o)}))})),this._subscribers.slice().forEach((function(e){return e(l,a.state)})),s&&s.silent&&console.warn("[vuex] mutation type: "+i+". Silent option has been removed. Use the filter functionality in the vue-devtools")):console.error("[vuex] unknown mutation type: "+i)},wl.prototype.dispatch=function(e,t){var n=this,a=il(e,t),r=a.type,i=a.payload,o={type:r,payload:i},s=this._actions[r];if(s){try{this._actionSubscribers.slice().filter((function(e){return e.before})).forEach((function(e){return e.before(o,n.state)}))}catch(e){console.warn("[vuex] error in before action subscribers: "),console.error(e)}var l=s.length>1?Promise.all(s.map((function(e){return e(i)}))):s[0](i);return new Promise((function(e,t){l.then((function(t){try{n._actionSubscribers.filter((function(e){return e.after})).forEach((function(e){return e.after(o,n.state)}))}catch(e){console.warn("[vuex] error in after action subscribers: "),console.error(e)}e(t)}),(function(e){try{n._actionSubscribers.filter((function(e){return e.error})).forEach((function(t){return t.error(o,n.state,e)}))}catch(e){console.warn("[vuex] error in error action subscribers: "),console.error(e)}t(e)}))}))}console.error("[vuex] unknown action type: "+r)},wl.prototype.subscribe=function(e,t){return Xs(e,this._subscribers,t)},wl.prototype.subscribeAction=function(e,t){return Xs("function"==typeof e?{before:e}:e,this._actionSubscribers,t)},wl.prototype.watch=function(e,t,n){var a=this;return Zs("function"==typeof e,"store.watch only accepts a function."),He((function(){return e(a.state,a.getters)}),t,Object.assign({},n))},wl.prototype.replaceState=function(e){var t=this;this._withCommit((function(){t._state.data=e}))},wl.prototype.registerModule=function(e,t,n){void 0===n&&(n={}),"string"==typeof e&&(e=[e]),Zs(Array.isArray(e),"module path must be a string or an Array."),Zs(e.length>0,"cannot register the root module by using registerModule."),this._modules.register(e,t),nl(this,this.state,e,this._modules.get(e),n.preserveState),tl(this,this.state)},wl.prototype.unregisterModule=function(e){var t=this;"string"==typeof e&&(e=[e]),Zs(Array.isArray(e),"module path must be a string or an Array."),this._modules.unregister(e),this._withCommit((function(){delete rl(t.state,e.slice(0,-1))[e[e.length-1]]})),el(this)},wl.prototype.hasModule=function(e){return"string"==typeof e&&(e=[e]),Zs(Array.isArray(e),"module path must be a string or an Array."),this._modules.isRegistered(e)},wl.prototype.hotUpdate=function(e){this._modules.update(e),el(this,!0)},wl.prototype._withCommit=function(e){var t=this._committing;this._committing=!0,e(),this._committing=t},Object.defineProperties(wl.prototype,bl);var xl=Sl((function(e,t){var n={};return Al(t)||console.error("[vuex] mapState: mapper parameter must be either an Array or an Object"),jl(t).forEach((function(t){var a=t.key,r=t.val;n[a]=function(){var t=this.$store.state,n=this.$store.getters;if(e){var a=Il(this.$store,"mapState",e);if(!a)return;t=a.context.state,n=a.context.getters}return"function"==typeof r?r.call(this,t,n):t[r]},n[a].vuex=!0})),n})),kl=Sl((function(e,t){var n={};return Al(t)||console.error("[vuex] mapMutations: mapper parameter must be either an Array or an Object"),jl(t).forEach((function(t){var a=t.key,r=t.val;n[a]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var a=this.$store.commit;if(e){var i=Il(this.$store,"mapMutations",e);if(!i)return;a=i.context.commit}return"function"==typeof r?r.apply(this,[a].concat(t)):a.apply(this.$store,[r].concat(t))}})),n})),Tl=Sl((function(e,t){var n={};return Al(t)||console.error("[vuex] mapGetters: mapper parameter must be either an Array or an Object"),jl(t).forEach((function(t){var a=t.key,r=t.val;r=e+r,n[a]=function(){if(!e||Il(this.$store,"mapGetters",e)){if(r in this.$store.getters)return this.$store.getters[r];console.error("[vuex] unknown getter: "+r)}},n[a].vuex=!0})),n})),_l=Sl((function(e,t){var n={};return Al(t)||console.error("[vuex] mapActions: mapper parameter must be either an Array or an Object"),jl(t).forEach((function(t){var a=t.key,r=t.val;n[a]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var a=this.$store.dispatch;if(e){var i=Il(this.$store,"mapActions",e);if(!i)return;a=i.context.dispatch}return"function"==typeof r?r.apply(this,[a].concat(t)):a.apply(this.$store,[r].concat(t))}})),n}));function jl(e){return Al(e)?Array.isArray(e)?e.map((function(e){return{key:e,val:e}})):Object.keys(e).map((function(t){return{key:t,val:e[t]}})):[]}function Al(e){return Array.isArray(e)||Qs(e)}function Sl(e){return function(t,n){return"string"!=typeof t?(n=t,t=""):"/"!==t.charAt(t.length-1)&&(t+="/"),e(t,n)}}function Il(e,t,n){var a=e._modulesNamespaceMap[n];return a||console.error("[vuex] module namespace not found in "+t+"(): "+n),a}function Cl(e,t,n){var a=n?e.groupCollapsed:e.group;try{a.call(e,t)}catch(n){e.log(t)}}function Dl(e){try{e.groupEnd()}catch(t){e.log("—— log end ——")}}function Fl(){var e=new Date;return" @ "+El(e.getHours(),2)+":"+El(e.getMinutes(),2)+":"+El(e.getSeconds(),2)+"."+El(e.getMilliseconds(),3)}function El(e,t){return n="0",a=t-e.toString().length,new Array(a+1).join(n)+e;var n,a}var Pl={version:"4.1.0",Store:wl,storeKey:"store",createStore:function(e){return new wl(e)},useStore:function(e){return void 0===e&&(e=null),function(e,t,n){void 0===n&&(n=!1);var a=ce;if(a){var r=a.$parent&&a.$parent._provided;if(r&&e in r)return r[e];if(arguments.length>1)return n&&d(t)?t.call(a):t}else 0}(null!==e?e:"store")},mapState:xl,mapMutations:kl,mapGetters:Tl,mapActions:_l,createNamespacedHelpers:function(e){return{mapState:xl.bind(null,e),mapGetters:Tl.bind(null,e),mapMutations:kl.bind(null,e),mapActions:_l.bind(null,e)}},createLogger:function(e){void 0===e&&(e={});var t=e.collapsed;void 0===t&&(t=!0);var n=e.filter;void 0===n&&(n=function(e,t,n){return!0});var a=e.transformer;void 0===a&&(a=function(e){return e});var r=e.mutationTransformer;void 0===r&&(r=function(e){return e});var i=e.actionFilter;void 0===i&&(i=function(e,t){return!0});var o=e.actionTransformer;void 0===o&&(o=function(e){return e});var s=e.logMutations;void 0===s&&(s=!0);var l=e.logActions;void 0===l&&(l=!0);var d=e.logger;return void 0===d&&(d=console),function(e){var c=Ks(e.state);void 0!==d&&(s&&e.subscribe((function(e,i){var o=Ks(i);if(n(e,c,o)){var s=Fl(),l=r(e),u="mutation "+e.type+s;Cl(d,u,t),d.log("%c prev state","color: #9E9E9E; font-weight: bold",a(c)),d.log("%c mutation","color: #03A9F4; font-weight: bold",l),d.log("%c next state","color: #4CAF50; font-weight: bold",a(o)),Dl(d)}c=o})),l&&e.subscribeAction((function(e,n){if(i(e,n)){var a=Fl(),r=o(e),s="action "+e.type+a;Cl(d,s,t),d.log("%c action","color: #03A9F4; font-weight: bold",r),Dl(d)}})))}}};ea.use(Pl);var zl=new Pl.Store({state:{isLight:!1,isSearchModalOpen:!1},mutations:{openSearchModal(e){e.isSearchModalOpen=!0},closeSearchModal(e){e.isSearchModalOpen=!1},toggleLightMode(e){e.isLight=!e.isLight}}});n(239);ea.component("Badge",()=>Promise.all([n.e(0),n.e(4)]).then(n.bind(null,342))),ea.component("CodeBlock",()=>Promise.all([n.e(0),n.e(5)]).then(n.bind(null,301))),ea.component("CodeGroup",()=>Promise.all([n.e(0),n.e(6)]).then(n.bind(null,302)));n(240);var Ol=[({Vue:e,options:t,router:n,siteData:a})=>{e.mixin({beforeCreate(){this.$store=zl}})},{},({Vue:e})=>{e.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({Vue:e})=>{e.component("CodeCopy",qs)}],ql=[];class Rl extends class{constructor(){this.store=new ea({data:{state:{}}})}$get(e){return this.store.state[e]}$set(e,t){ea.set(this.store.state,e,t)}$emit(...e){this.store.$emit(...e)}$on(...e){this.store.$on(...e)}}{}Object.assign(Rl.prototype,{getPageAsyncComponent:fs,getLayoutAsyncComponent:ms,getAsyncComponent:vs,getVueComponent:ys});var Ml={install(e){const t=new Rl;e.$vuepress=t,e.prototype.$vuepress=t}};function Ll(e,t){const n=t.toLowerCase();return e.options.routes.some(e=>e.path.toLowerCase()===n)}var Ul={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(e){const t=this.pageKey||this.$parent.$page.key;return ws("pageKey",t),ea.component(t)||ea.component(t,fs(t)),ea.component(t)?e(t):e("")}},Nl={functional:!0,props:{slotKey:String,required:!0},render:(e,{props:t,slots:n})=>e("div",{class:["content__"+t.slotKey]},n()[t.slotKey])},$l={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Wl=(n(241),n(242),Object(Os.a)($l,(function(){var e=this._self._c;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Vl={functional:!0,render(e,{parent:t,children:n}){if(t._isMounted)return n;t.$once("hook:mounted",()=>{t.$forceUpdate()})}};ea.config.productionTip=!1,ea.use(Zo),ea.use(Ml),ea.mixin(function(e,t,n=ea){!function(e){e.locales&&Object.keys(e.locales).forEach(t=>{e.locales[t].path=t});Object.freeze(e)}(t),n.$vuepress.$set("siteData",t);const a=new(e(n.$vuepress.$get("siteData"))),r=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(a)),i={};return Object.keys(r).reduce((e,t)=>(t.startsWith("$")&&(e[t]=r[t].get),e),i),{computed:i}}(e=>class{setPage(e){this.__page=e}get $site(){return e}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:e={}}=this.$site;let t,n;for(const a in e)"/"===a?n=e[a]:0===this.$page.path.indexOf(a)&&(t=e[a]);return t||n||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:e}=this.$page.frontmatter;return"string"==typeof e&&e}get $title(){const e=this.$page,{metaTitle:t}=this.$page.frontmatter;if("string"==typeof t)return t;const n=this.$siteTitle,a=e.frontmatter.home?null:e.frontmatter.title||e.title;return n?a?a+" | "+n:n:a||"VuePress"}get $description(){const e=function(e){if(e){const t=e.filter(e=>"description"===e.name)[0];if(t)return t.content}}(this.$page.frontmatter.meta);return e||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(e,t){for(let n=0;n<e.length;n++){const a=e[n];if(a.path.toLowerCase()===t.toLowerCase())return a}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},Ns)),ea.component("Content",Ul),ea.component("ContentSlotsDistributor",Nl),ea.component("OutboundLink",Wl),ea.component("ClientOnly",Vl),ea.component("Layout",ms("Layout")),ea.component("NotFound",ms("NotFound")),ea.prototype.$withBase=function(e){const t=this.$site.base;return"/"===e.charAt(0)?t+e.slice(1):e},window.__VUEPRESS__={version:"1.9.9",hash:"6de6a41"},async function(e){const t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Ns.routerBase||Ns.base,n=new Zo({base:t,mode:"history",fallback:!1,routes:Us,scrollBehavior:(e,t,n)=>n||(e.hash?!ea.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(e.hash)}:{x:0,y:0})});!function(e){e.beforeEach((t,n,a)=>{if(Ll(e,t.path))a();else if(/(\/|\.html)$/.test(t.path))if(/\/$/.test(t.path)){const n=t.path.replace(/\/$/,"")+".html";Ll(e,n)?a(n):a()}else a();else{const n=t.path+"/",r=t.path+".html";Ll(e,r)?a(r):Ll(e,n)?a(n):a()}})}(n);const a={};try{await Promise.all(Ol.filter(e=>"function"==typeof e).map(t=>t({Vue:ea,options:a,router:n,siteData:Ns,isServer:e})))}catch(e){console.error(e)}return{app:new ea(Object.assign(a,{router:n,render:e=>e("div",{attrs:{id:"app"}},[e("RouterView",{ref:"layout"}),e("div",{class:"global-ui"},ql.map(t=>e(t)))])})),router:n}}(!1).then(({app:e,router:t})=>{t.onReady(()=>{e.$mount("#app")})})}]);